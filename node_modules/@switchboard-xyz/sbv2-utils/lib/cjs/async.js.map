{"version":3,"file":"async.js","sourceRoot":"","sources":["../../src/async.ts"],"names":[],"mappings":";;;AAAA;;;GAGG;AACI,MAAM,KAAK,GAAG,CAAC,EAAU,EAAgB,EAAE,CAChD,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAD3B,QAAA,KAAK,SACsB;AAExC;;;;;GAKG;AACI,KAAK,UAAU,kBAAkB,CACtC,EAAU,EACV,OAAmB,EACnB,YAAY,GAAG,IAAI,KAAK,CAAC,cAAc,CAAC;IAExC,gDAAgD;IAChD,MAAM,OAAO,GAAG,IAAI,OAAO,CAAQ,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE;QAC/C,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,CAAC,YAAY,CAAC,CAAC;QACvB,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC,IAAI,CAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;AAC7C,CAAC;AAbD,gDAaC","sourcesContent":["/** Sleep for a given number of milliseconds\n * @param ms number of milliseconds to sleep for\n * @return a promise that resolves when the sleep interval has elapsed\n */\nexport const sleep = (ms: number): Promise<any> =>\n  new Promise((s) => setTimeout(s, ms));\n\n/** Returns a promise that resolves successfully if returned before the given timeout has elapsed.\n * @param ms the number of milliseconds before the promise expires\n * @param promise the promise to wait for\n * @param timeoutError the error to throw if the promise expires\n * @return the promise result\n */\nexport async function promiseWithTimeout<T>(\n  ms: number,\n  promise: Promise<T>,\n  timeoutError = new Error(\"timeoutError\")\n): Promise<T> {\n  // create a promise that rejects in milliseconds\n  const timeout = new Promise<never>((_, reject) => {\n    setTimeout(() => {\n      reject(timeoutError);\n    }, ms);\n  });\n\n  return Promise.race<T>([promise, timeout]);\n}\n"]}