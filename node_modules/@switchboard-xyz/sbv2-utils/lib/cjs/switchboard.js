"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadSwitchboardAccount = exports.findAccountType = exports.SWITCHBOARD_DISCRIMINATOR_MAP = exports.SWITCHBOARD_ACCOUNT_TYPES = void 0;
const anchor = __importStar(require("@project-serum/anchor"));
const anchor_1 = require("@project-serum/anchor");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const errors_js_1 = require("./errors.js");
exports.SWITCHBOARD_ACCOUNT_TYPES = [
    "JobAccountData",
    "AggregatorAccountData",
    "OracleAccountData",
    "OracleQueueAccountData",
    "PermissionAccountData",
    "LeaseAccountData",
    "ProgramStateAccountData",
    "VrfAccountData",
    "SbState",
    "BUFFERxx",
    "CrankAccountData",
    "BufferRelayerAccountData",
];
exports.SWITCHBOARD_DISCRIMINATOR_MAP = new Map(exports.SWITCHBOARD_ACCOUNT_TYPES.map((accountType) => [
    accountType,
    anchor.BorshAccountsCoder.accountDiscriminator(accountType),
]));
// should also check if pubkey is a token account
const findAccountType = async (program, publicKey) => {
    const account = await program.provider.connection.getAccountInfo(publicKey);
    if (!account) {
        throw new Error(`failed to fetch account info for ${publicKey}`);
    }
    const accountDiscriminator = account.data.slice(0, anchor_1.ACCOUNT_DISCRIMINATOR_SIZE);
    for (const [name, discriminator] of exports.SWITCHBOARD_DISCRIMINATOR_MAP.entries()) {
        if (Buffer.compare(accountDiscriminator, discriminator) === 0) {
            return name;
        }
    }
    throw new errors_js_1.InvalidSwitchboardAccount();
};
exports.findAccountType = findAccountType;
const loadSwitchboardAccount = async (program, publicKey) => {
    const accountType = await (0, exports.findAccountType)(program, publicKey);
    switch (accountType) {
        case "JobAccountData": {
            return [accountType, new switchboard_v2_1.JobAccount({ program, publicKey })];
        }
        case "AggregatorAccountData": {
            return [accountType, new switchboard_v2_1.AggregatorAccount({ program, publicKey })];
        }
        case "OracleAccountData": {
            return [accountType, new switchboard_v2_1.OracleAccount({ program, publicKey })];
        }
        case "PermissionAccountData": {
            return [accountType, new switchboard_v2_1.PermissionAccount({ program, publicKey })];
        }
        case "LeaseAccountData": {
            return [accountType, new switchboard_v2_1.LeaseAccount({ program, publicKey })];
        }
        case "OracleQueueAccountData": {
            return [accountType, new switchboard_v2_1.OracleQueueAccount({ program, publicKey })];
        }
        case "CrankAccountData": {
            return [accountType, new switchboard_v2_1.CrankAccount({ program, publicKey })];
        }
        case "SbState":
        case "ProgramStateAccountData": {
            return [accountType, new switchboard_v2_1.ProgramStateAccount({ program, publicKey })];
        }
        case "VrfAccountData": {
            return [accountType, new switchboard_v2_1.VrfAccount({ program, publicKey })];
        }
        case "BufferRelayerAccountData": {
            return [accountType, new switchboard_v2_1.BufferRelayerAccount({ program, publicKey })];
        }
    }
    throw new errors_js_1.InvalidSwitchboardAccount();
};
exports.loadSwitchboardAccount = loadSwitchboardAccount;
//# sourceMappingURL=switchboard.js.map