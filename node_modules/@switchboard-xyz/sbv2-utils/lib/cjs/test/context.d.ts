import * as anchor from "@project-serum/anchor";
import * as spl from "@solana/spl-token-v2";
import { PublicKey } from "@solana/web3.js";
import * as sbv2 from "@switchboard-xyz/switchboard-v2";
export interface ISwitchboardTestContext {
    program: anchor.Program;
    mint: spl.Mint;
    payerTokenWallet: PublicKey;
    queue: sbv2.OracleQueueAccount;
    oracle?: sbv2.OracleAccount;
}
export declare class SwitchboardTestContext implements ISwitchboardTestContext {
    program: anchor.Program;
    mint: spl.Mint;
    payerTokenWallet: PublicKey;
    queue: sbv2.OracleQueueAccount;
    oracle?: sbv2.OracleAccount;
    constructor(ctx: ISwitchboardTestContext);
    /** Load the associated token wallet for the given payer with a prefunded balance
     * @param program anchor program
     * @param mint the switchboard mint address
     * @param tokenAmount number of tokens to populate in switchboard mint's associated token account
     */
    static getOrCreateSwitchboardWallet(program: anchor.Program, mint: spl.Mint, tokenAmount: number): Promise<PublicKey>;
    /** Load SwitchboardTestContext using a specified queue
     * @param provider anchor Provider containing connection and payer Keypair
     * @param queueKey the oracle queue to load
     * @param tokenAmount number of tokens to populate in switchboard mint's associated token account
     */
    static loadDevnetQueue(provider: anchor.AnchorProvider, queueKey?: string, tokenAmount?: number): Promise<SwitchboardTestContext>;
    /** Recursively loop through directories and return the filepath of switchboard.env
     * @param envFileName alternative filename to search for. defaults to switchboard.env
     * @returns the filepath for a switchboard env file to load
     */
    static findSwitchboardEnv(envFileName?: string): string;
    /** Load SwitchboardTestContext from an env file containing $SWITCHBOARD_PROGRAM_ID, $ORACLE_QUEUE, $AGGREGATOR
     * @param provider anchor Provider containing connection and payer Keypair
     * @param filePath filesystem path to env file
     * @param tokenAmount number of tokens to populate in switchboard mint's associated token account
     */
    static loadFromEnv(provider: anchor.AnchorProvider, filePath?: string, tokenAmount?: number): Promise<SwitchboardTestContext>;
    /** Create a static data feed that resolves to an expected value */
    createStaticFeed(value: number, timeout?: number): Promise<sbv2.AggregatorAccount>;
    /** Update a feed to a single job that resolves to a new expected value
     * @param aggregatorAccount the aggregator to change a job definition for
     * @param value the new expected value
     * @param timeout how long to wait for the oracle to update the aggregator's latestRound result
     */
    updateStaticFeed(aggregatorAccount: sbv2.AggregatorAccount, value: number, timeout?: number): Promise<void>;
    /** Checks whether the queue has any active oracles heartbeating */
    isQueueReady(): Promise<boolean>;
    /** Awaits the specified timeout for an oracle to start heartbeating on the queue
     * @param timeout number of seconds to wait for an oracle to start heartbeating
     */
    oracleHeartbeat(timeout?: number): Promise<void>;
}
//# sourceMappingURL=context.d.ts.map