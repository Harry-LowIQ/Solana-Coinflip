"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwitchboardTestEnvironment = exports.LATEST_DOCKER_VERSION = void 0;
const anchor = __importStar(require("@project-serum/anchor"));
const web3_js_1 = require("@solana/web3.js");
const sbv2 = __importStar(require("@switchboard-xyz/switchboard-v2"));
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const anchor_js_1 = require("../anchor.js");
const date_js_1 = require("../date.js");
const queue_js_1 = require("../queue.js");
const token_js_1 = require("../token.js");
exports.LATEST_DOCKER_VERSION = "dev-v2-07-18-22";
/** Contains all of the necessary devnet Switchboard accounts to clone to localnet */
class SwitchboardTestEnvironment {
    constructor(ctx) {
        var _a;
        this.programId = ctx.programId;
        this.programDataAddress = ctx.programDataAddress;
        this.idlAddress = ctx.idlAddress;
        this.programState = ctx.programState;
        this.switchboardVault = ctx.switchboardVault;
        this.switchboardMint = ctx.switchboardMint;
        this.tokenWallet = ctx.tokenWallet;
        this.queue = ctx.queue;
        this.queueAuthority = ctx.queueAuthority;
        this.queueBuffer = ctx.queueBuffer;
        this.crank = ctx.crank;
        this.crankBuffer = ctx.crankBuffer;
        this.oracle = ctx.oracle;
        this.oracleAuthority = ctx.oracleAuthority;
        this.oracleEscrow = ctx.oracleEscrow;
        this.oraclePermissions = ctx.oraclePermissions;
        this.payerKeypairPath = ctx.payerKeypairPath;
        this.additionalClonedAccounts = (_a = ctx.additionalClonedAccounts) !== null && _a !== void 0 ? _a : {};
    }
    getAccountCloneString() {
        const accounts = Object.keys(this).map((key) => {
            // iterate over additionalClonedAccounts and collect pubkeys
            if (typeof this[key] === "string") {
                return;
            }
            if (key === "additionalClonedAccounts" && this[key]) {
                const additionalPubkeys = Object.values(this.additionalClonedAccounts);
                const cloneStrings = additionalPubkeys.map((pubkey) => `--clone ${pubkey.toBase58()} \`# ${key}\``);
                return cloneStrings.join(`\\\n`);
            }
            return `--clone ${this[key].toBase58()} \`# ${key}\` `;
        });
        return accounts.filter(Boolean).join(`\\\n`);
    }
    toJSON() {
        return {
            programId: this.programId,
            programDataAddress: this.programDataAddress,
            idlAddress: this.idlAddress,
            programState: this.programState,
            switchboardVault: this.switchboardVault,
            switchboardMint: this.switchboardMint,
            tokenWallet: this.tokenWallet,
            queue: this.queue,
            queueAuthority: this.queueAuthority,
            queueBuffer: this.queueBuffer,
            crank: this.crank,
            crankBuffer: this.crankBuffer,
            oracle: this.oracle,
            oracleAuthority: this.oracleAuthority,
            oracleEscrow: this.oracleEscrow,
            oraclePermissions: this.oraclePermissions,
            payerKeypairPath: this.payerKeypairPath,
            additionalClonedAccounts: this.additionalClonedAccounts,
        };
    }
    /** Write switchboard test environment to filesystem */
    writeAll(outputDir) {
        fs_1.default.mkdirSync(outputDir, { recursive: true });
        this.writeEnv(outputDir);
        this.writeJSON(outputDir);
        this.writeScripts(outputDir);
        this.writeDockerCompose(outputDir);
        this.writeAnchorToml(outputDir);
    }
    /** Write the env file to filesystem */
    writeEnv(filePath) {
        const ENV_FILE_PATH = path_1.default.join(filePath, "switchboard.env");
        let fileStr = "";
        fileStr += `SWITCHBOARD_PROGRAM_ID="${this.programId.toBase58()}"\n`;
        fileStr += `SWITCHBOARD_PROGRAM_DATA_ADDRESS="${this.programDataAddress.toBase58()}"\n`;
        fileStr += `SWITCHBOARD_IDL_ADDRESS="${this.idlAddress.toBase58()}"\n`;
        fileStr += `SWITCHBOARD_PROGRAM_STATE="${this.programState.toBase58()}"\n`;
        fileStr += `SWITCHBOARD_VAULT="${this.switchboardVault.toBase58()}"\n`;
        fileStr += `SWITCHBOARD_MINT="${this.switchboardMint.toBase58()}"\n`;
        fileStr += `TOKEN_WALLET="${this.tokenWallet.toBase58()}"\n`;
        fileStr += `ORACLE_QUEUE="${this.queue.toBase58()}"\n`;
        fileStr += `ORACLE_QUEUE_AUTHORITY="${this.queueAuthority.toBase58()}"\n`;
        fileStr += `ORACLE_QUEUE_BUFFER="${this.queueBuffer.toBase58()}"\n`;
        fileStr += `CRANK="${this.crank.toBase58()}"\n`;
        fileStr += `CRANK_BUFFER="${this.crankBuffer.toBase58()}"\n`;
        fileStr += `ORACLE="${this.oracle.toBase58()}"\n`;
        fileStr += `ORACLE_AUTHORITY="${this.oracleAuthority.toBase58()}"\n`;
        fileStr += `ORACLE_ESCROW="${this.oracleEscrow.toBase58()}"\n`;
        fileStr += `ORACLE_PERMISSIONS="${this.oraclePermissions.toBase58()}"\n`;
        // fileStr += `SWITCHBOARD_ACCOUNTS="${this.getAccountCloneString()}"\n`;
        // TODO: Write additionalClonedAccounts to env file
        fs_1.default.writeFileSync(ENV_FILE_PATH, fileStr);
        console.log(`${chalk_1.default.green("Env File saved to:")} ${ENV_FILE_PATH.replace(process.cwd(), ".")}`);
    }
    writeJSON(outputDir) {
        const JSON_FILE_PATH = path_1.default.join(outputDir, "switchboard.json");
        fs_1.default.writeFileSync(JSON_FILE_PATH, JSON.stringify(this.toJSON(), (key, value) => {
            if (value instanceof web3_js_1.PublicKey) {
                return value.toBase58();
            }
            return value;
        }, 2));
    }
    writeScripts(outputDir) {
        const LOCAL_VALIDATOR_SCRIPT = path_1.default.join(outputDir, "start-local-validator.sh");
        // create bash script to startup local validator with appropriate accounts cloned
        const baseValidatorCommand = `solana-test-validator -r --ledger .anchor/test-ledger --mint ${this.oracleAuthority.toBase58()} --bind-address 0.0.0.0 --url ${(0, web3_js_1.clusterApiUrl)("devnet")} --rpc-port 8899 `;
        const cloneAccountsString = this.getAccountCloneString();
        const startValidatorCommand = `${baseValidatorCommand} ${cloneAccountsString}`;
        fs_1.default.writeFileSync(LOCAL_VALIDATOR_SCRIPT, `#!/bin/bash\n\nmkdir -p .anchor/test-ledger\n\n${startValidatorCommand}`);
        fs_1.default.chmodSync(LOCAL_VALIDATOR_SCRIPT, "755");
        console.log(`${chalk_1.default.green("Bash script saved to:")} ${LOCAL_VALIDATOR_SCRIPT.replace(process.cwd(), ".")}`);
        // create bash script to start local oracle
        const ORACLE_SCRIPT = path_1.default.join(outputDir, "start-oracle.sh");
        // const startOracleCommand = `docker-compose -f docker-compose.switchboard.yml up`;
        fs_1.default.writeFileSync(ORACLE_SCRIPT, `#!/usr/bin/env bash

script_dir=$( cd -- "$( dirname -- "\${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

docker-compose -f  "$script_dir"/docker-compose.switchboard.yml up
      `
        // `#!/bin/bash\n\n${startOracleCommand}`
        );
        fs_1.default.chmodSync(ORACLE_SCRIPT, "755");
        console.log(`${chalk_1.default.green("Bash script saved to:")} ${ORACLE_SCRIPT.replace(process.cwd(), ".")}`);
    }
    writeDockerCompose(outputDir) {
        const DOCKER_COMPOSE_FILEPATH = path_1.default.join(outputDir, "docker-compose.switchboard.yml");
        const dockerComposeString = `version: "3.3"
services:
  oracle:
    image: "switchboardlabs/node:\${SBV2_ORACLE_VERSION:-${exports.LATEST_DOCKER_VERSION}}" # https://hub.docker.com/r/switchboardlabs/node/tags
    network_mode: host
    restart: always
    secrets:
      - PAYER_SECRETS
    environment:
      - VERBOSE=1
      - LIVE=1
      - CLUSTER=\${CLUSTER:-localnet}
      - HEARTBEAT_INTERVAL=30 # Seconds
      - ORACLE_KEY=${this.oracle.toBase58()}
    #  - RPC_URL=\${RPC_URL}
secrets:
  PAYER_SECRETS:
    file: ${this.payerKeypairPath}
`;
        fs_1.default.writeFileSync(DOCKER_COMPOSE_FILEPATH, dockerComposeString);
        console.log(`${chalk_1.default.green("Docker-Compose saved to:")} ${DOCKER_COMPOSE_FILEPATH.replace(process.cwd(), ".")}`);
    }
    writeAnchorToml(outputDir) {
        const ANCHOR_TOML_FILEPATH = path_1.default.join(outputDir, "Anchor.switchboard.toml");
        const anchorTomlString = `[provider]
cluster = "localnet"
wallet = "${this.payerKeypairPath}"

[test]
startup_wait = 10000

[test.validator]
url = "https://devnet.genesysgo.net/"

[[test.validator.clone]] # programID
address = "${this.programId}"

[[test.validator.clone]] # idlAddress
address = "${this.idlAddress}"

[[test.validator.clone]] # programState
address = "${this.programState}"

[[test.validator.clone]] # switchboardVault
address = "${this.switchboardVault}"

[[test.validator.clone]] # tokenWallet
address = "${this.tokenWallet}"

[[test.validator.clone]] # queue
address = "${this.queue}"

[[test.validator.clone]] # queueAuthority
address = "${this.queueAuthority}"

[[test.validator.clone]] # queueBuffer
address = "${this.queueBuffer}"

[[test.validator.clone]] # crank
address = "${this.crank}"

[[test.validator.clone]] # crankBuffer
address = "${this.crankBuffer}"

[[test.validator.clone]] # oracle
address = "${this.oracle}"

[[test.validator.clone]] # oracleAuthority
address = "${this.oracleAuthority}"

[[test.validator.clone]] # oracleEscrow
address = "${this.oracleEscrow}"

[[test.validator.clone]] # oraclePermissions
address = "${this.oraclePermissions}"
`;
        fs_1.default.writeFileSync(ANCHOR_TOML_FILEPATH, anchorTomlString);
        console.log(`${chalk_1.default.green("Anchor.toml saved to:")} ${ANCHOR_TOML_FILEPATH.replace(process.cwd(), ".")}`);
    }
    /** Build a devnet environment to later clone to localnet */
    static async create(payerKeypairPath, additionalClonedAccounts, alternateProgramId) {
        const fullKeypairPath = payerKeypairPath.charAt(0) === "/"
            ? payerKeypairPath
            : path_1.default.join(process.cwd(), payerKeypairPath);
        if (!fs_1.default.existsSync(fullKeypairPath)) {
            throw new Error("Failed to find payer keypair path");
        }
        const payerKeypair = web3_js_1.Keypair.fromSecretKey(new Uint8Array(JSON.parse(fs_1.default.readFileSync(fullKeypairPath, {
            encoding: "utf-8",
        }))));
        const connection = new web3_js_1.Connection((0, web3_js_1.clusterApiUrl)("devnet"), {
            commitment: "confirmed",
        });
        const programId = alternateProgramId !== null && alternateProgramId !== void 0 ? alternateProgramId : sbv2.getSwitchboardPid("devnet");
        const wallet = new sbv2.AnchorWallet(payerKeypair);
        const provider = new anchor.AnchorProvider(connection, wallet, {});
        const anchorIdl = await anchor.Program.fetchIdl(programId, provider);
        if (!anchorIdl) {
            throw new Error(`failed to read idl for ${programId}`);
        }
        const switchboardProgram = new anchor.Program(anchorIdl, programId, provider);
        const programDataAddress = (0, anchor_js_1.getProgramDataAddress)(switchboardProgram.programId);
        const idlAddress = await (0, anchor_js_1.getIdlAddress)(switchboardProgram.programId);
        const queueResponse = await (0, queue_js_1.createQueue)(switchboardProgram, {
            authority: payerKeypair.publicKey,
            name: "Test Queue",
            metadata: `created ${(0, date_js_1.anchorBNtoDateString)(new anchor.BN(Math.floor(Date.now() / 1000)))}`,
            minStake: new anchor.BN(0),
            reward: new anchor.BN(0),
            crankSize: 10,
            oracleTimeout: 180,
            numOracles: 1,
            unpermissionedFeeds: true,
            unpermissionedVrf: true,
            enableBufferRelayers: true,
        }, 10);
        const queueAccount = queueResponse.queueAccount;
        const queue = await queueAccount.loadData();
        const [programStateAccount, stateBump] = switchboard_v2_1.ProgramStateAccount.fromSeed(switchboardProgram);
        const programState = await programStateAccount.loadData();
        const mint = await queueAccount.loadMint();
        const payerSwitchboardWallet = await (0, token_js_1.getOrCreateSwitchboardTokenAccount)(switchboardProgram, mint);
        const crankAccount = new switchboard_v2_1.CrankAccount({
            program: switchboardProgram,
            publicKey: queueResponse.crankPubkey,
        });
        const crank = await crankAccount.loadData();
        const oracleAccount = new switchboard_v2_1.OracleAccount({
            program: switchboardProgram,
            publicKey: queueResponse.oracles[0],
        });
        const oracle = await oracleAccount.loadData();
        const [permissionAccount] = switchboard_v2_1.PermissionAccount.fromSeed(switchboardProgram, queue.authority, queueAccount.publicKey, oracleAccount.publicKey);
        const permission = await permissionAccount.loadData();
        const ctx = {
            programId: switchboardProgram.programId,
            programDataAddress,
            idlAddress,
            programState: programStateAccount.publicKey,
            switchboardVault: programState.tokenVault,
            switchboardMint: mint.address,
            tokenWallet: payerSwitchboardWallet,
            queue: queueResponse.queueAccount.publicKey,
            queueAuthority: queue.authority,
            queueBuffer: queue.dataBuffer,
            crank: crankAccount.publicKey,
            crankBuffer: crank.dataBuffer,
            oracle: oracleAccount.publicKey,
            oracleAuthority: oracle.oracleAuthority,
            oracleEscrow: oracle.tokenAccount,
            oraclePermissions: permissionAccount.publicKey,
            payerKeypairPath: fullKeypairPath,
            additionalClonedAccounts,
        };
        return new SwitchboardTestEnvironment(ctx);
    }
}
exports.SwitchboardTestEnvironment = SwitchboardTestEnvironment;
//# sourceMappingURL=env.js.map