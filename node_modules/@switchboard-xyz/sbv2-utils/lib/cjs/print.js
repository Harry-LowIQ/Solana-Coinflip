"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prettyPrintSwitchboardAccount = exports.prettyPrintBufferRelayer = exports.prettyPrintCrank = exports.prettyPrintVrf = exports.prettyPrintAggregator = exports.prettyPrintJob = exports.prettyPrintLease = exports.prettyPrintQueue = exports.prettyPrintPermissions = exports.prettyPrintOracle = exports.prettyPrintProgramState = exports.toVrfStatusString = exports.toPermissionString = exports.buffer2string = exports.tokenAmountString = exports.pubKeyConverter = exports.chalkString = void 0;
const anchor = __importStar(require("@project-serum/anchor"));
const web3_js_1 = require("@solana/web3.js");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const big_js_1 = __importDefault(require("big.js"));
const chalk_1 = __importDefault(require("chalk"));
const anchor_js_1 = require("./anchor.js");
const date_js_1 = require("./date.js");
const chalkString = (label, value, padding = 16) => {
    let valueString = "";
    if (typeof value === "string") {
        valueString = value;
    }
    else if (typeof value === "number") {
        valueString = value.toString();
    }
    else if (typeof value === "boolean") {
        valueString = value.toString();
    }
    else if (value instanceof web3_js_1.PublicKey) {
        if (web3_js_1.PublicKey.default.equals(value)) {
            valueString = "N/A";
        }
        else {
            valueString = value.toString();
        }
    }
    else if (value !== undefined) {
        valueString = value.toString();
    }
    return `${chalk_1.default.blue(label.padEnd(padding, " "))}${chalk_1.default.yellow(valueString)}`;
};
exports.chalkString = chalkString;
// JSON.stringify: Object => String
const pubKeyConverter = (key, value) => {
    var _a;
    if (value instanceof web3_js_1.PublicKey || key.toLowerCase().endsWith("publickey")) {
        return (_a = value.toString()) !== null && _a !== void 0 ? _a : "";
    }
    if (value instanceof Uint8Array) {
        return `[${value.toString()}]`;
    }
    if (value instanceof anchor.BN) {
        return value.toString();
    }
    if (value instanceof big_js_1.default) {
        return value.toString();
    }
    if (value instanceof switchboard_v2_1.SwitchboardDecimal) {
        return new big_js_1.default(value.mantissa.toString())
            .div(new big_js_1.default(10).pow(value.scale))
            .toString();
    }
    return value;
};
exports.pubKeyConverter = pubKeyConverter;
const tokenAmountString = (value) => {
    var _a;
    return `${(_a = value.uiAmountString) !== null && _a !== void 0 ? _a : ""} (${value.amount})`;
};
exports.tokenAmountString = tokenAmountString;
/* eslint-disable no-control-regex */
const buffer2string = (buf) => {
    return Buffer.from(buf)
        .toString("utf8")
        .replace(/\u0000/g, ""); // removes padding from onchain fixed sized buffers
};
exports.buffer2string = buffer2string;
const toPermissionString = (permission) => {
    switch (permission) {
        case switchboard_v2_1.SwitchboardPermissionValue.PERMIT_ORACLE_HEARTBEAT:
            return "PERMIT_ORACLE_HEARTBEAT";
        case switchboard_v2_1.SwitchboardPermissionValue.PERMIT_ORACLE_QUEUE_USAGE:
            return "PERMIT_ORACLE_QUEUE_USAGE";
        case switchboard_v2_1.SwitchboardPermissionValue.PERMIT_VRF_REQUESTS:
            return "PERMIT_VRF_REQUESTS";
        default:
            return "NONE";
    }
};
exports.toPermissionString = toPermissionString;
const toVrfStatusString = (status) => {
    try {
        if ("statusNone" in status) {
            return "StatusNone";
        }
        if ("statusRequesting" in status) {
            return "StatusRequesting";
        }
        if ("statusVerifying" in status) {
            return "StatusVerifying";
        }
        if ("statusVerified" in status) {
            return "StatusVerified";
        }
        if ("statusCallbackSuccess" in status) {
            return "StatusCallbackSuccess";
        }
        if ("statusVerifyFailure" in status) {
            return "StatusVerifyFailure";
        }
    }
    catch { }
    return "";
};
exports.toVrfStatusString = toVrfStatusString;
async function prettyPrintProgramState(programState, accountData, printIdlAddress = false, printDataAddress = false, SPACING = 24) {
    const data = accountData !== null && accountData !== void 0 ? accountData : (await programState.loadData());
    let outputString = "";
    outputString += chalk_1.default.underline((0, exports.chalkString)("## SbState", programState.publicKey, SPACING) + "\r\n");
    outputString += (0, exports.chalkString)("authority", data.authority, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("tokenMint", data.tokenMint, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("tokenVault", data.tokenVault, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("daoMint", data.daoMint, SPACING);
    if (printIdlAddress) {
        const idlAddress = await (0, anchor_js_1.getIdlAddress)(programState.program.programId);
        outputString += "\r\n" + (0, exports.chalkString)("idlAddress", idlAddress, SPACING);
    }
    if (printDataAddress) {
        const dataAddress = (0, anchor_js_1.getProgramDataAddress)(programState.program.programId);
        outputString +=
            "\r\n" + (0, exports.chalkString)("programDataAddress", dataAddress, SPACING);
    }
    return outputString;
}
exports.prettyPrintProgramState = prettyPrintProgramState;
async function prettyPrintOracle(oracleAccount, accountData, printPermissions = false, SPACING = 24) {
    const data = accountData !== null && accountData !== void 0 ? accountData : (await oracleAccount.loadData());
    const oracleTokenAmount = await oracleAccount.program.provider.connection.getTokenAccountBalance(data.tokenAccount);
    let outputString = "";
    outputString += chalk_1.default.underline((0, exports.chalkString)("## Oracle", oracleAccount.publicKey, SPACING) + "\r\n");
    outputString +=
        (0, exports.chalkString)("name", (0, exports.buffer2string)(data.name), SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("metadata", (0, exports.buffer2string)(data.metadata), SPACING) +
            "\r\n";
    outputString +=
        (0, exports.chalkString)("balance", (0, exports.tokenAmountString)(oracleTokenAmount.value), SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("oracleAuthority", data.oracleAuthority, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("tokenAccount", data.tokenAccount, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("queuePubkey", data.queuePubkey, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("lastHeartbeat", (0, date_js_1.anchorBNtoDateTimeString)(data.lastHeartbeat), SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("numInUse", data.numInUse, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("metrics", JSON.stringify(data.metrics, undefined, 2), SPACING);
    if (printPermissions) {
        let permissionAccount;
        try {
            const queueAccount = new switchboard_v2_1.OracleQueueAccount({
                program: oracleAccount.program,
                publicKey: data.queuePubkey,
            });
            const queue = await queueAccount.loadData();
            [permissionAccount] = switchboard_v2_1.PermissionAccount.fromSeed(oracleAccount.program, queue.authority, queueAccount.publicKey, oracleAccount.publicKey);
            const permissionData = await permissionAccount.loadData();
            outputString +=
                "\r\n" +
                    (await prettyPrintPermissions(permissionAccount, permissionData));
        }
        catch {
            outputString += `\r\nFailed to load permission account. Has it been created yet?`;
        }
    }
    return outputString;
}
exports.prettyPrintOracle = prettyPrintOracle;
async function prettyPrintPermissions(permissionAccount, accountData, SPACING = 24) {
    const data = accountData !== null && accountData !== void 0 ? accountData : (await permissionAccount.loadData());
    let outputString = "";
    outputString += chalk_1.default.underline((0, exports.chalkString)("## Permission", permissionAccount.publicKey, SPACING) + "\r\n");
    outputString += (0, exports.chalkString)("authority", data.authority, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("permissions", (0, exports.toPermissionString)(data.permissions), SPACING) +
            "\r\n";
    outputString += (0, exports.chalkString)("granter", data.granter, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("grantee", data.grantee, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("expiration", (0, date_js_1.anchorBNtoDateTimeString)(data.expiration), SPACING);
    return outputString;
}
exports.prettyPrintPermissions = prettyPrintPermissions;
async function prettyPrintQueue(queueAccount, accountData, printOracles = false, SPACING = 30) {
    var _a, _b;
    const data = accountData !== null && accountData !== void 0 ? accountData : (await queueAccount.loadData());
    const varianceToleranceMultiplier = switchboard_v2_1.SwitchboardDecimal.from(data.varianceToleranceMultiplier).toBig();
    let outputString = "";
    outputString += chalk_1.default.underline((0, exports.chalkString)("## Queue", queueAccount.publicKey, SPACING) + "\r\n");
    outputString +=
        (0, exports.chalkString)("name", (0, exports.buffer2string)(data.name), SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("metadata", (0, exports.buffer2string)(data.metadata), SPACING) +
            "\r\n";
    outputString +=
        (0, exports.chalkString)("oracleBuffer", data.dataBuffer, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("authority", data.authority, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("oracleTimeout", data.oracleTimeout, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("reward", data.reward, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("minStake", data.minStake, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("slashingEnabled", data.slashingEnabled, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("consecutiveFeedFailureLimit", data.consecutiveFeedFailureLimit.toString(), SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("consecutiveOracleFailureLimit", data.consecutiveOracleFailureLimit.toString(), SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("varianceToleranceMultiplier", varianceToleranceMultiplier, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("feedProbationPeriod", data.feedProbationPeriod.toString(), SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("unpermissionedFeedsEnabled", data.unpermissionedFeedsEnabled.toString(), SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("unpermissionedVrfEnabled", data.unpermissionedVrfEnabled.toString(), SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("enableBufferRelayers", (_b = (_a = data.enableBufferRelayers) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "", SPACING);
    if (printOracles && data.queue) {
        outputString += chalk_1.default.underline((0, exports.chalkString)("\r\n## Oracles", " ".repeat(32), SPACING) + "\r\n");
        outputString += data.queue
            .filter((pubkey) => !web3_js_1.PublicKey.default.equals(pubkey))
            .map((pubkey) => pubkey.toString())
            .join("\n");
        // (data.queue as PublicKey[]).forEach(
        //   (row, index) =>
        //     (outputString +=
        //       chalkString(`# ${index + 1},`, row.toString(), SPACING) + "\r\n")
        // );
    }
    return outputString;
}
exports.prettyPrintQueue = prettyPrintQueue;
async function prettyPrintLease(leaseAccount, accountData, SPACING = 24) {
    const data = accountData !== null && accountData !== void 0 ? accountData : (await leaseAccount.loadData());
    const escrowTokenAmount = await leaseAccount.program.provider.connection.getTokenAccountBalance(data.escrow);
    const balance = Number.parseInt(escrowTokenAmount.value.amount, 10);
    let outputString = "";
    outputString += chalk_1.default.underline((0, exports.chalkString)("## Lease", leaseAccount.publicKey, SPACING) + "\r\n");
    outputString += (0, exports.chalkString)("escrow", data.escrow, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("escrowBalance", (0, exports.tokenAmountString)(escrowTokenAmount.value), SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("withdrawAuthority", data.withdrawAuthority, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("queue", data.queue, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("aggregator", data.aggregator, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("isActive", data.isActive, SPACING);
    return outputString;
}
exports.prettyPrintLease = prettyPrintLease;
async function prettyPrintJob(jobAccount, accountData, SPACING = 24) {
    const data = accountData !== null && accountData !== void 0 ? accountData : (await jobAccount.loadData());
    let outputString = "";
    outputString += chalk_1.default.underline((0, exports.chalkString)("## Job", jobAccount.publicKey, SPACING) + "\r\n");
    outputString +=
        (0, exports.chalkString)("name", (0, exports.buffer2string)(data.name), SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("metadata", (0, exports.buffer2string)(data.metadata), SPACING) +
            "\r\n";
    outputString += (0, exports.chalkString)("authority", data.authority, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("expiration", data.expiration, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("tasks", JSON.stringify(switchboard_v2_1.OracleJob.decodeDelimited(data.data).tasks, undefined, 2), SPACING);
    return outputString;
}
exports.prettyPrintJob = prettyPrintJob;
// TODO: Add rest of fields
async function prettyPrintAggregator(aggregatorAccount, accountData, printPermissions = false, printLease = false, printJobs = false, SPACING = 24) {
    var _a, _b, _c, _d;
    const data = accountData !== null && accountData !== void 0 ? accountData : (await aggregatorAccount.loadData());
    const result = switchboard_v2_1.SwitchboardDecimal.from(data.latestConfirmedRound.result)
        .toBig()
        .toString();
    const resultTimestamp = (0, date_js_1.anchorBNtoDateTimeString)((_a = data.latestConfirmedRound.roundOpenTimestamp) !== null && _a !== void 0 ? _a : new anchor.BN(0));
    const varianceThreshold = parseFloat(switchboard_v2_1.SwitchboardDecimal.from(data.varianceThreshold).toBig().toString()).toFixed(2);
    let outputString = "";
    outputString += chalk_1.default.underline((0, exports.chalkString)("## Aggregator", (_b = aggregatorAccount.publicKey) !== null && _b !== void 0 ? _b : web3_js_1.PublicKey.default, SPACING) + "\r\n");
    outputString +=
        (0, exports.chalkString)("latestResult", `${result} (${resultTimestamp !== null && resultTimestamp !== void 0 ? resultTimestamp : ""})`, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("name", (0, exports.buffer2string)(data.name), SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("metadata", (0, exports.buffer2string)(data.metadata), SPACING) +
            "\r\n";
    outputString += (0, exports.chalkString)("authority", data.authority, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("queuePubkey", data.queuePubkey, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("crankPubkey", data.crankPubkey, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("historyBufferPublicKey", data.historyBuffer, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("authorWallet", (_c = data.authorWallet) !== null && _c !== void 0 ? _c : web3_js_1.PublicKey.default, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("minUpdateDelaySeconds", data.minUpdateDelaySeconds, SPACING) +
            "\r\n";
    outputString +=
        (0, exports.chalkString)("jobPubkeysSize", data.jobPubkeysSize, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("minJobResults", data.minJobResults, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("oracleRequestBatchSize", data.oracleRequestBatchSize, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("minOracleResults", data.minOracleResults, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("varianceThreshold", `${varianceThreshold} %`, SPACING) +
            "\r\n";
    outputString +=
        (0, exports.chalkString)("forceReportPeriod", data.forceReportPeriod, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("isLocked", data.isLocked, SPACING);
    if (printPermissions) {
        let permissionAccount;
        try {
            const queueAccount = new switchboard_v2_1.OracleQueueAccount({
                program: aggregatorAccount.program,
                publicKey: data.queuePubkey,
            });
            const queue = await queueAccount.loadData();
            [permissionAccount] = switchboard_v2_1.PermissionAccount.fromSeed(aggregatorAccount.program, queue.authority, queueAccount.publicKey, (_d = aggregatorAccount.publicKey) !== null && _d !== void 0 ? _d : web3_js_1.PublicKey.default);
            const permissionData = await permissionAccount.loadData();
            outputString +=
                "\r\n" +
                    (await prettyPrintPermissions(permissionAccount, permissionData));
        }
        catch {
            outputString += `\r\nFailed to load permission account. Has it been created yet?`;
        }
    }
    if (printLease) {
        let leaseAccount;
        try {
            const queueAccount = new switchboard_v2_1.OracleQueueAccount({
                program: aggregatorAccount.program,
                publicKey: data.queuePubkey,
            });
            const { authority } = await queueAccount.loadData();
            [leaseAccount] = switchboard_v2_1.LeaseAccount.fromSeed(aggregatorAccount.program, queueAccount, aggregatorAccount);
            const leaseData = await leaseAccount.loadData();
            outputString +=
                "\r\n" + (await prettyPrintLease(leaseAccount, leaseData));
        }
        catch {
            outputString += `\r\nFailed to load lease account. Has it been created yet?`;
        }
    }
    if (printJobs) {
        const jobKeys = data.jobPubkeysData.filter((pubkey) => !web3_js_1.PublicKey.default.equals(pubkey));
        for await (const jobKey of jobKeys) {
            const jobAccount = new switchboard_v2_1.JobAccount({
                program: aggregatorAccount.program,
                publicKey: jobKey,
            });
            outputString += "\r\n" + (await prettyPrintJob(jobAccount));
        }
    }
    return outputString;
}
exports.prettyPrintAggregator = prettyPrintAggregator;
async function prettyPrintVrf(vrfAccount, accountData, printPermissions = false, SPACING = 24) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    const data = accountData !== null && accountData !== void 0 ? accountData : (await vrfAccount.loadData());
    const escrowTokenAmount = await vrfAccount.program.provider.connection.getTokenAccountBalance(data.escrow);
    let outputString = "";
    outputString += chalk_1.default.underline((0, exports.chalkString)("## VRF", vrfAccount.publicKey, SPACING) + "\r\n");
    outputString += (0, exports.chalkString)("authority", data.authority, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("oracleQueue", data.oracleQueue, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("escrow", data.escrow, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("escrowBalance", (0, exports.tokenAmountString)(escrowTokenAmount.value), SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("batchSize", data.batchSize, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("callback", JSON.stringify({
            ...data.callback,
            accounts: data.callback.accounts.filter((a) => !a.pubkey.equals(web3_js_1.PublicKey.default)),
            ixData: `[${data.callback.ixData
                .slice(0, data.callback.ixDataLen)
                .map((n) => n.toString())
                .join(",")}]`,
        }, undefined, 2), SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("counter", data.counter, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("status", (0, exports.toVrfStatusString)(data.status), SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("latestResult", JSON.stringify({
        status: (_b = (0, exports.toVrfStatusString)((_a = data.builders[0]) === null || _a === void 0 ? void 0 : _a.status)) !== null && _b !== void 0 ? _b : "",
        verified: (_d = (_c = data.builders[0]) === null || _c === void 0 ? void 0 : _c.verified) !== null && _d !== void 0 ? _d : "",
        txRemaining: (_f = (_e = data.builders[0]) === null || _e === void 0 ? void 0 : _e.txRemaining) !== null && _f !== void 0 ? _f : "",
        producer: (_h = (_g = data.builders[0]) === null || _g === void 0 ? void 0 : _g.producer.toString()) !== null && _h !== void 0 ? _h : "",
        reprProof: data.builders[0].reprProof
            ? `[${data.builders[0].reprProof.map((value) => value.toString())}]`
            : "",
        reprProofHex: data.builders[0].reprProof
            ? Buffer.from(data.builders[0].reprProof).toString("hex")
            : "",
        currentRound: {
            result: data.currentRound.result
                ? `[${data.currentRound.result.map((value) => value.toString())}]`
                : "",
            alpha: data.currentRound.alpha
                ? `[${data.currentRound.alpha.map((value) => value.toString())}]`
                : "",
            alphaHex: Buffer.from(data.currentRound.alpha).toString("hex"),
            requestSlot: (_l = (_k = (_j = data.currentRound) === null || _j === void 0 ? void 0 : _j.requestSlot) === null || _k === void 0 ? void 0 : _k.toString()) !== null && _l !== void 0 ? _l : "",
            requestTimestamp: (0, date_js_1.anchorBNtoDateTimeString)(data.currentRound.requestTimestamp),
            numVerified: data.currentRound.numVerified.toString(),
        },
    }, undefined, 2), SPACING);
    if (printPermissions) {
        let permissionAccount;
        try {
            const queueAccount = new switchboard_v2_1.OracleQueueAccount({
                program: vrfAccount.program,
                publicKey: data.oracleQueue,
            });
            const queue = await queueAccount.loadData();
            [permissionAccount] = switchboard_v2_1.PermissionAccount.fromSeed(vrfAccount.program, queue.authority, queueAccount.publicKey, vrfAccount.publicKey);
            const permissionData = await permissionAccount.loadData();
            outputString +=
                "\r\n" +
                    (await prettyPrintPermissions(permissionAccount, permissionData));
        }
        catch {
            outputString += `\r\nFailed to load permission account. Has it been created yet?`;
        }
    }
    return outputString;
}
exports.prettyPrintVrf = prettyPrintVrf;
async function prettyPrintCrank(crankAccount, accountData, printRows = false, SPACING = 24) {
    const data = accountData !== null && accountData !== void 0 ? accountData : (await crankAccount.loadData());
    let outputString = "";
    outputString += chalk_1.default.underline((0, exports.chalkString)("## Crank", crankAccount.publicKey, SPACING) + "\r\n");
    outputString +=
        (0, exports.chalkString)("name", (0, exports.buffer2string)(data.name), SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("metadata", (0, exports.buffer2string)(data.metadata), SPACING) +
            "\r\n";
    outputString +=
        (0, exports.chalkString)("queuePubkey", data.queuePubkey, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("dataBuffer", data.dataBuffer, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("Size", `${data.pqData.length
            .toString()
            .padStart(4)} / ${data.maxRows.toString().padEnd(4)}`, SPACING) + "\r\n";
    if (printRows) {
        outputString += chalk_1.default.underline((0, exports.chalkString)("## Crank Buffer", data.dataBuffer, SPACING) + "\r\n");
        const rowStrings = data.pqData.map((row) => {
            return `${(0, date_js_1.anchorBNtoDateTimeString)(row.nextTimestamp).padEnd(16)} - ${row.pubkey.toString()}`;
        });
        outputString = outputString.concat(...rowStrings.join("\n"));
        // const feedNames: string[] = [];
        // for await (const row of data.pqData) {
        //   const agg = new AggregatorAccount({
        //     program: crankAccount.program,
        //     publicKey: row.pubkey,
        //   });
        //   const aggData = await agg.loadData();
        //   const aggName = buffer2string(aggData.name as any);
        //   feedNames.push(`${(row.pubkey as PublicKey).toString()} # ${aggName}`);
        // }
        // outputString = outputString.concat("\n", ...feedNames.join("\n"));
    }
    return outputString;
}
exports.prettyPrintCrank = prettyPrintCrank;
async function prettyPrintBufferRelayer(bufferRelayerAccount, accountData, printJob = false, SPACING = 24) {
    const data = accountData !== null && accountData !== void 0 ? accountData : (await bufferRelayerAccount.loadData());
    let outputString = "";
    outputString += chalk_1.default.underline((0, exports.chalkString)("## BufferRelayer", bufferRelayerAccount.publicKey, SPACING) +
        "\r\n");
    outputString +=
        (0, exports.chalkString)("name", (0, exports.buffer2string)(data.name), SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("queuePubkey", data.queuePubkey, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("escrow", data.escrow, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("authority", data.authority, SPACING) + "\r\n";
    outputString += (0, exports.chalkString)("jobPubkey", data.jobPubkey, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("minUpdateDelaySeconds", data.minUpdateDelaySeconds, SPACING) +
            "\r\n";
    const result = data.result;
    outputString +=
        (0, exports.chalkString)("result", `[${result.map((r) => r.toString()).join(",")}]`, SPACING) + "\r\n";
    outputString +=
        (0, exports.chalkString)("currentRound", JSON.stringify(data.currentRound, exports.pubKeyConverter, 2), SPACING) + "\r\n";
    if (printJob) {
        const jobAccount = new switchboard_v2_1.JobAccount({
            program: bufferRelayerAccount.program,
            publicKey: data.jobPubkey,
        });
        outputString += "\r\n" + (await prettyPrintJob(jobAccount));
    }
    return outputString;
}
exports.prettyPrintBufferRelayer = prettyPrintBufferRelayer;
async function prettyPrintSwitchboardAccount(program, publicKey, accountType) {
    switch (accountType) {
        case "JobAccountData": {
            const job = new switchboard_v2_1.JobAccount({ program, publicKey });
            return prettyPrintJob(job);
        }
        case "AggregatorAccountData": {
            const aggregator = new switchboard_v2_1.AggregatorAccount({ program, publicKey });
            return prettyPrintAggregator(aggregator, undefined);
        }
        case "OracleAccountData": {
            const oracle = new switchboard_v2_1.OracleAccount({ program, publicKey });
            return prettyPrintOracle(oracle, undefined);
        }
        case "PermissionAccountData": {
            const permission = new switchboard_v2_1.PermissionAccount({ program, publicKey });
            return prettyPrintPermissions(permission, undefined);
        }
        case "LeaseAccountData": {
            const lease = new switchboard_v2_1.LeaseAccount({ program, publicKey });
            return prettyPrintLease(lease, undefined);
        }
        case "OracleQueueAccountData": {
            const queue = new switchboard_v2_1.OracleQueueAccount({ program, publicKey });
            return prettyPrintQueue(queue, undefined);
        }
        case "CrankAccountData": {
            const crank = new switchboard_v2_1.CrankAccount({ program, publicKey });
            return prettyPrintCrank(crank, undefined);
        }
        case "SbState":
        case "ProgramStateAccountData": {
            const [programState] = switchboard_v2_1.ProgramStateAccount.fromSeed(program);
            return prettyPrintProgramState(programState);
        }
        case "VrfAccountData": {
            const vrfAccount = new switchboard_v2_1.VrfAccount({ program, publicKey });
            return prettyPrintVrf(vrfAccount, undefined);
        }
        case "BufferRelayerAccountData": {
            const bufferRelayerAccount = new switchboard_v2_1.BufferRelayerAccount({
                program,
                publicKey,
            });
            return prettyPrintBufferRelayer(bufferRelayerAccount, undefined);
        }
        case "BUFFERxx": {
            return `Found buffer account but dont know which one`;
        }
    }
}
exports.prettyPrintSwitchboardAccount = prettyPrintSwitchboardAccount;
//# sourceMappingURL=print.js.map