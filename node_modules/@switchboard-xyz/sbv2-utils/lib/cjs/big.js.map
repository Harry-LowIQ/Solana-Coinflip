{"version":3,"file":"big.js","sourceRoot":"","sources":["../../src/big.ts"],"names":[],"mappings":"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","sourcesContent":["import type { OrcaU64 } from \"@orca-so/sdk\";\nimport * as anchor from \"@project-serum/anchor\";\nimport type {\n  Fraction,\n  Price,\n  TokenAmount as SaberTokenAmount,\n} from \"@saberhq/token-utils\";\nimport type { TokenAmount } from \"@solana/web3.js\";\nimport { SwitchboardDecimal } from \"@switchboard-xyz/switchboard-v2\";\nimport Big from \"big.js\";\nimport Decimal from \"decimal.js\";\n\nexport class BigUtils {\n  static safeDiv(number_: Big, denominator: Big, decimals = 20): Big {\n    const oldDp = Big.DP;\n    Big.DP = decimals;\n    const result = number_.div(denominator);\n    Big.DP = oldDp;\n    return result;\n  }\n\n  static safeMul(...n: Big[]): Big {\n    if (n.length === 0) {\n      throw new Error(`need to provide elements to multiply ${n}`);\n    }\n\n    let result = new Big(1);\n    for (const x of n) {\n      result = result.mul(x);\n    }\n\n    return result;\n  }\n\n  static safeNthRoot(big: Big, nthRoot: number, decimals = 20): Big {\n    if (nthRoot <= 0) {\n      throw new Error(`cannot take the nth root of a negative number`);\n    }\n\n    const oldDp = Big.DP;\n    Big.DP = decimals;\n\n    const decimal = BigUtils.toDecimal(big);\n    const frac = new Decimal(1).div(nthRoot);\n    const root: Decimal =\n      big.s === -1\n        ? decimal.abs().pow(frac).mul(new Decimal(big.s))\n        : decimal.pow(frac);\n\n    const result: Big = BigUtils.fromDecimal(root);\n\n    Big.DP = oldDp;\n\n    return result;\n  }\n\n  static safeSqrt(n: Big, decimals = 20): Big {\n    const oldDp = Big.DP;\n    Big.DP = decimals;\n    const result = n.sqrt();\n    Big.DP = oldDp;\n    return result;\n  }\n\n  static safePow(n: Big, exp: number, decimals = 20): Big {\n    const oldDp = Big.DP;\n    Big.DP = decimals;\n\n    const oldPrecision = Decimal.precision;\n    Decimal.set({ precision: decimals });\n    const base = BigUtils.toDecimal(n);\n    const value = base.pow(exp);\n    const result = BigUtils.fromDecimal(value);\n    Decimal.set({ precision: oldPrecision });\n\n    Big.DP = oldDp;\n    return result;\n  }\n\n  static fromBN(n: anchor.BN, decimals = 0): Big {\n    const big = new SwitchboardDecimal(n, decimals).toBig();\n    // assert(n.cmp(new anchor.BN(big.toFixed())) === 0);\n    return big;\n  }\n\n  static toDecimal(big: Big, decimals = 20): Decimal {\n    const decimal = new Decimal(big.toFixed(decimals, 0));\n    // assert(decimal.toFixed() === big.toFixed());\n    return decimal;\n    // const b = new Big(big);\n\n    // const decimal = new Decimal(0);\n    // (decimal as any).d = groupArray(b.c);\n    // (decimal as any).e = b.e;\n    // (decimal as any).s = b.s;\n\n    // console.log(`toDecimal: ${big.toString()} => ${decimal.toString()}`);\n    // return decimal;\n  }\n\n  static fromDecimal(decimal: Decimal, decimals = 20): Big {\n    if (decimal.isNaN()) {\n      throw new TypeError(`cannot convert NaN decimal.js to Big.js`);\n    }\n\n    if (!decimal.isFinite()) {\n      throw new TypeError(`cannot convert INF decimal.js to Big.js`);\n    }\n\n    const big = new Big(decimal.toFixed(decimals, 0));\n    // assert(big.toFixed() === decimal.toFixed());\n    return big;\n    // const d = new Decimal(decimal);\n\n    // const big = new Big(0);\n    // console.log(`fromDecimal (${d.toString()}) d.d ${d.d}`);\n    // big.c = splitToDigits(d.d);\n    // big.e = d.e;\n    // big.s = d.s;\n\n    // console.log(`fromDecimal: ${decimal.toString()} => ${big.toString()}`);\n    // return big;\n  }\n\n  static fromOrcaU64(u64: OrcaU64): Big {\n    return BigUtils.fromBN(new anchor.BN(u64.value), u64.scale);\n  }\n\n  static fromSaberTokenAmount(token: SaberTokenAmount): Big {\n    return BigUtils.fromBN(\n      new anchor.BN(token.toU64()),\n      token.token.info.decimals\n    );\n  }\n\n  static fromTokenAmount(token: TokenAmount): Big {\n    return BigUtils.fromBN(new anchor.BN(token.amount), token.decimals);\n  }\n\n  static fromPrice(price: Price | Fraction): Big {\n    const numerator = new Big(price.numerator.toString());\n    const denominator = new Big(price.denominator.toString());\n    return BigUtils.safeDiv(numerator, denominator);\n  }\n}\n"]}