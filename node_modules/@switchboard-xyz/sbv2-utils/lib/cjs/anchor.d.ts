import * as anchor from "@project-serum/anchor";
import { Connection, Keypair, PublicKey } from "@solana/web3.js";
export declare function programWallet(program: anchor.Program): Keypair;
/** Return the default anchor.AnchorProvider that will fail if a transaction is sent. This is used to avoid accidentally loading a
 * valid keypair from the anchor environment defaults.
 * @param connection a Solana connection object for a given Solana cluster and endpoint
 * @return the anchor.AnchorProvider object
 * */
export declare const getDefaultProvider: (connection: Connection) => anchor.AnchorProvider;
/** Get the program data address for a given programId
 * @param programId the programId for a given on-chain program
 * @return the publicKey of the address holding the upgradeable program buffer
 */
export declare const getProgramDataAddress: (programId: PublicKey) => PublicKey;
/** Get the IDL address for a given programId
 * @param programId the programId for a given on-chain program
 * @return the publicKey of the IDL address
 */
export declare const getIdlAddress: (programId: PublicKey) => Promise<PublicKey>;
export declare const programHasPayer: (program: anchor.Program) => boolean;
export declare const getProgramPayer: (program: anchor.Program) => Keypair;
export declare const verifyProgramHasPayer: (program: anchor.Program) => void;
export declare function getAnchorWalletPath(parsedToml?: any): string;
export declare function getAnchorCluster(parsedToml?: any): string;
export declare function loadPid(programKeypairPath: string): PublicKey;
export declare function getWorkspace(programName: string, programPath: string): anchor.Program;
//# sourceMappingURL=anchor.d.ts.map