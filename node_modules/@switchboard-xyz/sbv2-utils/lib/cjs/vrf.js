"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.awaitOpenRound = void 0;
const anchor = __importStar(require("@project-serum/anchor"));
const web3_js_1 = require("@solana/web3.js");
const async_js_1 = require("./async.js");
async function awaitOpenRound(vrfAccount, counter, timeout = 30) {
    // call open round and wait for new value
    const accountsCoder = new anchor.BorshAccountsCoder(vrfAccount.program.idl);
    let accountWs;
    const awaitUpdatePromise = new Promise((resolve) => {
        var _a;
        accountWs = vrfAccount.program.provider.connection.onAccountChange((_a = vrfAccount === null || vrfAccount === void 0 ? void 0 : vrfAccount.publicKey) !== null && _a !== void 0 ? _a : web3_js_1.PublicKey.default, async (accountInfo) => {
            const vrf = accountsCoder.decode("VrfAccountData", accountInfo.data);
            if (!counter.eq(vrf.counter)) {
                return;
            }
            if (vrf.result.every((val) => val === 0)) {
                return;
            }
            resolve(vrf.result);
        });
    });
    const updatedValuePromise = (0, async_js_1.promiseWithTimeout)(timeout * 1000, awaitUpdatePromise, new Error(`vrf failed to update in ${timeout} seconds`)).finally(() => {
        if (accountWs) {
            vrfAccount.program.provider.connection.removeAccountChangeListener(accountWs);
        }
    });
    const result = await updatedValuePromise;
    if (!result) {
        throw new Error(`failed to update VRF`);
    }
    return result;
}
exports.awaitOpenRound = awaitOpenRound;
//# sourceMappingURL=vrf.js.map