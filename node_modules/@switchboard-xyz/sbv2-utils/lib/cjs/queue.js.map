{"version":3,"file":"queue.js","sourceRoot":"","sources":["../../src/queue.ts"],"names":[],"mappings":"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","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport * as spl from \"@solana/spl-token-v2\";\nimport {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  CrankAccount,\n  OracleAccount,\n  OracleQueueAccount,\n  PermissionAccount,\n  ProgramStateAccount,\n  programWallet,\n  SwitchboardDecimal,\n} from \"@switchboard-xyz/switchboard-v2\";\nimport Big from \"big.js\";\nimport { chalkString } from \"./print.js\";\nimport { packAndSend } from \"./transaction.js\";\n\nexport interface CreateQueueParams {\n  authority?: PublicKey;\n  name?: string;\n  metadata?: string;\n  minStake: anchor.BN;\n  reward: anchor.BN;\n  crankSize?: number;\n  oracleTimeout?: number;\n  numOracles?: number;\n  unpermissionedFeeds?: boolean;\n  unpermissionedVrf?: boolean;\n  enableBufferRelayers?: boolean;\n}\n\nexport interface CreateQueueResponse {\n  queueAccount: OracleQueueAccount;\n  crankPubkey: PublicKey;\n  oracles: PublicKey[];\n}\n\nexport async function createQueue(\n  program: anchor.Program,\n  params: CreateQueueParams,\n  queueSize = 500,\n  authorityKeypair = programWallet(program)\n): Promise<CreateQueueResponse> {\n  const payerKeypair = programWallet(program);\n\n  const [programStateAccount, stateBump] =\n    ProgramStateAccount.fromSeed(program);\n  const mint = await spl.getMint(\n    program.provider.connection,\n    spl.NATIVE_MINT,\n    undefined,\n    spl.TOKEN_PROGRAM_ID\n  );\n\n  const ixns: (TransactionInstruction | TransactionInstruction[])[] = [];\n  const signers: Keypair[] = [payerKeypair, authorityKeypair];\n\n  try {\n    await programStateAccount.loadData();\n  } catch {\n    const vaultKeypair = anchor.web3.Keypair.generate();\n    ixns.push([\n      SystemProgram.createAccount({\n        fromPubkey: payerKeypair.publicKey,\n        newAccountPubkey: vaultKeypair.publicKey,\n        lamports:\n          await program.provider.connection.getMinimumBalanceForRentExemption(\n            spl.AccountLayout.span\n          ),\n        space: spl.AccountLayout.span,\n        programId: spl.TOKEN_PROGRAM_ID,\n      }),\n      spl.createInitializeAccountInstruction(\n        vaultKeypair.publicKey,\n        mint.address,\n        payerKeypair.publicKey,\n        spl.TOKEN_PROGRAM_ID\n      ),\n      await program.methods\n        .programInit({\n          stateBump,\n        })\n        .accounts({\n          state: programStateAccount.publicKey,\n          authority: payerKeypair.publicKey,\n          tokenMint: mint.address,\n          vault: vaultKeypair.publicKey,\n          payer: payerKeypair.publicKey,\n          systemProgram: SystemProgram.programId,\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n          daoMint: mint.address,\n        })\n        .instruction(),\n    ]);\n    signers.push(vaultKeypair);\n  }\n\n  const queueKeypair = anchor.web3.Keypair.generate();\n  const queueBuffer = anchor.web3.Keypair.generate();\n  const queueBufferSize = queueSize * 32 + 8;\n\n  const queueAccount = new OracleQueueAccount({\n    program: program,\n    publicKey: queueKeypair.publicKey,\n  });\n\n  console.debug(chalkString(\"OracleQueue\", queueKeypair.publicKey));\n  console.debug(chalkString(\"OracleBuffer\", queueBuffer.publicKey));\n\n  const crankKeypair = anchor.web3.Keypair.generate();\n  const crankBuffer = anchor.web3.Keypair.generate();\n  const crankSize = params.crankSize ? params.crankSize * 40 + 8 : 0;\n\n  console.debug(chalkString(\"CrankAccount\", crankKeypair.publicKey));\n  console.debug(chalkString(\"CrankBuffer\", crankBuffer.publicKey));\n\n  const crankAccount = new CrankAccount({\n    program: program,\n    publicKey: crankKeypair.publicKey,\n  });\n\n  ixns.push(\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payerKeypair.publicKey,\n      newAccountPubkey: queueBuffer.publicKey,\n      space: queueBufferSize,\n      lamports:\n        await program.provider.connection.getMinimumBalanceForRentExemption(\n          queueBufferSize\n        ),\n      programId: program.programId,\n    }),\n    await program.methods\n      .oracleQueueInit({\n        name: Buffer.from(params.name ?? \"\").slice(0, 32),\n        metadata: Buffer.from(\"\").slice(0, 64),\n        reward: params.reward ? new anchor.BN(params.reward) : new anchor.BN(0),\n        minStake: params.minStake\n          ? new anchor.BN(params.minStake)\n          : new anchor.BN(0),\n        // feedProbationPeriod: 0,\n        oracleTimeout: params.oracleTimeout,\n        slashingEnabled: false,\n        varianceToleranceMultiplier: SwitchboardDecimal.fromBig(new Big(2)),\n        authority: authorityKeypair.publicKey,\n        // consecutiveFeedFailureLimit: new anchor.BN(1000),\n        // consecutiveOracleFailureLimit: new anchor.BN(1000),\n        minimumDelaySeconds: 5,\n        queueSize: queueSize,\n        unpermissionedFeeds: params.unpermissionedFeeds ?? false,\n        unpermissionedVrf: params.unpermissionedVrf ?? false,\n        enableBufferRelayers: params.enableBufferRelayers ?? false,\n      })\n      .accounts({\n        oracleQueue: queueKeypair.publicKey,\n        authority: authorityKeypair.publicKey,\n        buffer: queueBuffer.publicKey,\n        systemProgram: SystemProgram.programId,\n        payer: payerKeypair.publicKey,\n        mint: mint.address,\n      })\n      .instruction(),\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payerKeypair.publicKey,\n      newAccountPubkey: crankBuffer.publicKey,\n      space: crankSize,\n      lamports:\n        await program.provider.connection.getMinimumBalanceForRentExemption(\n          crankSize\n        ),\n      programId: program.programId,\n    }),\n    await program.methods\n      .crankInit({\n        name: Buffer.from(\"Crank\").slice(0, 32),\n        metadata: Buffer.from(\"\").slice(0, 64),\n        crankSize: params.crankSize,\n      })\n      .accounts({\n        crank: crankKeypair.publicKey,\n        queue: queueKeypair.publicKey,\n        buffer: crankBuffer.publicKey,\n        systemProgram: SystemProgram.programId,\n        payer: payerKeypair.publicKey,\n      })\n      .instruction()\n  );\n  signers.push(queueKeypair, queueBuffer, crankKeypair, crankBuffer);\n\n  const finalTransactions: (\n    | TransactionInstruction\n    | TransactionInstruction[]\n  )[] = [];\n\n  const oracleAccounts = await Promise.all(\n    Array.from(Array(params.numOracles).keys()).map(async (n) => {\n      const name = `Oracle-${n + 1}`;\n      const tokenWalletKeypair = anchor.web3.Keypair.generate();\n      const [oracleAccount, oracleBump] = OracleAccount.fromSeed(\n        program,\n        queueAccount,\n        tokenWalletKeypair.publicKey\n      );\n\n      console.debug(chalkString(name, oracleAccount.publicKey));\n\n      const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n        program,\n        authorityKeypair.publicKey,\n        queueAccount.publicKey,\n        oracleAccount.publicKey\n      );\n      console.debug(\n        chalkString(`Permission-${n + 1}`, permissionAccount.publicKey)\n      );\n\n      finalTransactions.push([\n        SystemProgram.createAccount({\n          fromPubkey: payerKeypair.publicKey,\n          newAccountPubkey: tokenWalletKeypair.publicKey,\n          lamports:\n            await program.provider.connection.getMinimumBalanceForRentExemption(\n              spl.AccountLayout.span\n            ),\n          space: spl.AccountLayout.span,\n          programId: spl.TOKEN_PROGRAM_ID,\n        }),\n        spl.createInitializeAccountInstruction(\n          tokenWalletKeypair.publicKey,\n          mint.address,\n          programStateAccount.publicKey,\n          spl.TOKEN_PROGRAM_ID\n        ),\n        await program.methods\n          .oracleInit({\n            name: Buffer.from(name).slice(0, 32),\n            metadata: Buffer.from(\"\").slice(0, 128),\n            stateBump,\n            oracleBump,\n          })\n          .accounts({\n            oracle: oracleAccount.publicKey,\n            oracleAuthority: authorityKeypair.publicKey,\n            queue: queueKeypair.publicKey,\n            wallet: tokenWalletKeypair.publicKey,\n            programState: programStateAccount.publicKey,\n            systemProgram: SystemProgram.programId,\n            payer: payerKeypair.publicKey,\n          })\n          .instruction(),\n        await program.methods\n          .permissionInit({})\n          .accounts({\n            permission: permissionAccount.publicKey,\n            authority: authorityKeypair.publicKey,\n            granter: queueAccount.publicKey,\n            grantee: oracleAccount.publicKey,\n            payer: payerKeypair.publicKey,\n            systemProgram: SystemProgram.programId,\n          })\n          .instruction(),\n        await program.methods\n          .permissionSet({\n            permission: { permitOracleHeartbeat: null },\n            enable: true,\n          })\n          .accounts({\n            permission: permissionAccount.publicKey,\n            authority: authorityKeypair.publicKey,\n          })\n          .instruction(),\n      ]);\n      signers.push(tokenWalletKeypair);\n      return {\n        oracleAccount,\n        name,\n        permissionAccount,\n        tokenWalletKeypair,\n      };\n    })\n  );\n\n  const createAccountSignatures = await packAndSend(\n    program,\n    [ixns, finalTransactions],\n    signers,\n    payerKeypair.publicKey\n  );\n\n  // const result = await program.provider.connection.confirmTransaction(\n  //   createAccountSignatures[-1]\n  // );\n\n  return {\n    queueAccount,\n    crankPubkey: crankAccount.publicKey,\n    oracles: oracleAccounts.map((o) => o.oracleAccount.publicKey) ?? [],\n  };\n}\n"]}