{"version":3,"file":"feed.js","sourceRoot":"","sources":["../../src/feed.ts"],"names":[],"mappings":"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","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport * as spl from \"@solana/spl-token-v2\";\nimport {\n  AggregatorAccount,\n  AggregatorInitParams,\n  JobAccount,\n  LeaseAccount,\n  OracleQueueAccount,\n  packInstructions,\n  PermissionAccount,\n  ProgramStateAccount,\n  programWallet,\n  signTransactions,\n  SwitchboardDecimal,\n} from \"@switchboard-xyz/switchboard-v2\";\nimport Big from \"big.js\";\nimport { promiseWithTimeout } from \"./async.js\";\n\nexport async function awaitOpenRound(\n  aggregatorAccount: AggregatorAccount,\n  queueAccount: OracleQueueAccount,\n  payerTokenWallet: anchor.web3.PublicKey,\n  expectedValue: Big | undefined = undefined,\n  timeout = 30\n): Promise<Big> {\n  // call open round and wait for new value\n  const accountsCoder = new anchor.BorshAccountsCoder(\n    aggregatorAccount.program.idl\n  );\n\n  let accountWs: number;\n  const awaitUpdatePromise = new Promise(\n    (resolve: (value: Big) => void, reject: (reason?: string) => void) => {\n      accountWs = aggregatorAccount.program.provider.connection.onAccountChange(\n        aggregatorAccount?.publicKey ?? anchor.web3.PublicKey.default,\n        async (accountInfo) => {\n          const aggregator = accountsCoder.decode(\n            \"AggregatorAccountData\",\n            accountInfo.data\n          );\n          const latestResult = await aggregatorAccount.getLatestValue(\n            aggregator\n          );\n          if (!latestResult) {\n            return;\n          }\n          if (!expectedValue) {\n            resolve(latestResult);\n          } else if (latestResult?.eq(expectedValue)) {\n            resolve(latestResult);\n          } else {\n            reject(\n              `Value mismatch, expected ${expectedValue}, received ${latestResult}`\n            );\n          }\n        }\n      );\n    }\n  );\n\n  const updatedValuePromise = promiseWithTimeout(\n    timeout * 1000,\n    awaitUpdatePromise,\n    new Error(`aggregator failed to update in ${timeout} seconds`)\n  ).finally(() => {\n    if (accountWs) {\n      aggregatorAccount.program.provider.connection.removeAccountChangeListener(\n        accountWs\n      );\n    }\n  });\n\n  await aggregatorAccount.openRound({\n    oracleQueueAccount: queueAccount,\n    payoutWallet: payerTokenWallet,\n  });\n\n  const result = await updatedValuePromise;\n\n  if (!result) {\n    throw new Error(`failed to update aggregator`);\n  }\n\n  return result;\n}\n\nasync function signAndConfirmTransactions(\n  program: anchor.Program,\n  transactions: anchor.web3.Transaction[]\n) {\n  const signedTxs = await (\n    program.provider as anchor.AnchorProvider\n  ).wallet.signAllTransactions(transactions);\n  for (const transaction of signedTxs) {\n    // console.log(`Blockhash: ${transaction.recentBlockhash}`);\n    const sig = await program.provider.connection.sendRawTransaction(\n      transaction.serialize(),\n      { skipPreflight: false, maxRetries: 10 }\n    );\n    await program.provider.connection.confirmTransaction(sig);\n  }\n}\n\nexport async function createAggregator(\n  program: anchor.Program,\n  queueAccount: OracleQueueAccount,\n  params: AggregatorInitParams,\n  jobs: [JobAccount, number][],\n  fundLeaseAmount = new anchor.BN(0)\n): Promise<AggregatorAccount> {\n  const req = await createAggregatorReq(\n    program,\n    queueAccount,\n    params,\n    jobs,\n    fundLeaseAmount\n  );\n  const { blockhash } = await program.provider.connection.getLatestBlockhash();\n  const packedTxns = packInstructions(\n    req.ixns,\n    programWallet(program).publicKey,\n    blockhash\n  );\n  const signedTxns = signTransactions(\n    packedTxns,\n    req.signers as anchor.web3.Keypair[]\n  );\n  await signAndConfirmTransactions(program, signedTxns);\n  return req.account;\n}\n\n/**\n * Retrieve information about the payer's associated token account. If it does not exist, an\n * instruction to create it will be returned with the account's {@linkcode PublicKey}.\n */\nasync function getPayerTokenAccount(\n  connection: anchor.web3.Connection,\n  payer: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n): Promise<{\n  /**\n   * The {@linkcode PublicKey} of the associated token account for this payer.\n   */\n  publicKey: anchor.web3.PublicKey;\n  /**\n   * If the token account doesn't currently exist on-chain, it needs to be created using this ixn.\n   */\n  ixn?: anchor.web3.TransactionInstruction;\n}> {\n  const publicKey = await spl.getAssociatedTokenAddress(\n    mint,\n    payer,\n    undefined,\n    spl.TOKEN_PROGRAM_ID,\n    spl.ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n  const accountExists = await connection\n    .getAccountInfo(publicKey)\n    .then((info) => info !== null)\n    .catch(() => false);\n\n  return {\n    publicKey,\n    ixn: accountExists\n      ? undefined // Account exists, so theres no need to create it.\n      : spl.createAssociatedTokenAccountInstruction(\n          payer,\n          publicKey,\n          payer,\n          mint,\n          spl.TOKEN_PROGRAM_ID,\n          spl.ASSOCIATED_TOKEN_PROGRAM_ID\n        ),\n  };\n}\n\nexport async function createAggregatorReq(\n  program: anchor.Program,\n  queueAccount: OracleQueueAccount,\n  params: AggregatorInitParams,\n  jobs: [JobAccount, number][],\n  fundLeaseAmount = new anchor.BN(0),\n  payerPubkey = programWallet(program as any).publicKey\n): Promise<{\n  ixns: anchor.web3.TransactionInstruction[];\n  signers: anchor.web3.Signer[];\n  account: AggregatorAccount;\n}> {\n  const queue = await queueAccount.loadData();\n  const mint = await queueAccount.loadMint();\n\n  // Aggregator params\n  const aggregatorKeypair = params.keypair ?? anchor.web3.Keypair.generate();\n  const authority = params.authority ?? payerPubkey;\n  const size = program.account.aggregatorAccountData.size;\n  const [programStateAccount, stateBump] =\n    ProgramStateAccount.fromSeed(program);\n  const state = await programStateAccount.loadData();\n  const aggregatorAccount = new AggregatorAccount({\n    program,\n    publicKey: aggregatorKeypair.publicKey,\n  });\n\n  // Permission params\n  const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n    program,\n    queue.authority,\n    queueAccount.publicKey,\n    aggregatorKeypair.publicKey\n  );\n\n  // Lease params\n  const [leaseAccount, leaseBump] = LeaseAccount.fromSeed(\n    program,\n    queueAccount,\n    aggregatorAccount\n  );\n  const leaseEscrow = await spl.getAssociatedTokenAddress(\n    mint.address,\n    leaseAccount.publicKey,\n    true,\n    spl.TOKEN_PROGRAM_ID,\n    spl.ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  // const jobPubkeys: Array<PublicKey> = [];\n  // const jobWallets: Array<PublicKey> = [];\n  // const walletBumps: Array<number> = [];\n  // for (const idx in jobs) {\n  //   const [jobWallet, bump] = anchor.utils.publicKey.findProgramAddressSync(\n  //     [\n  //       payerKeypair.publicKey.toBuffer(),\n  //       spl.TOKEN_PROGRAM_ID.toBuffer(),\n  //       mint.address.toBuffer(),\n  //     ],\n  //     spl.ASSOCIATED_TOKEN_PROGRAM_ID\n  //   );\n  //   jobPubkeys.push(jobs[idx].publicKey);\n  //   jobWallets.push(jobWallet);\n  //   walletBumps.push(bump);\n  // }\n\n  const ixns: anchor.web3.TransactionInstruction[] = [];\n\n  // Check if the user has created a user token account. If not, they'll need to do that first.\n  const payerTokenAcct = await getPayerTokenAccount(\n    program.provider.connection,\n    payerPubkey,\n    mint.address\n  );\n  if (payerTokenAcct.ixn) {\n    ixns.push(payerTokenAcct.ixn);\n  }\n\n  // TODO: if fundLeaseAmount, check payer has enough funds\n\n  ixns.push(\n    ...([\n      // allocate aggregator account\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: programWallet(program).publicKey,\n        newAccountPubkey: aggregatorKeypair.publicKey,\n        space: size,\n        lamports:\n          await program.provider.connection.getMinimumBalanceForRentExemption(\n            size\n          ),\n        programId: program.programId,\n      }),\n      // create aggregator\n      await program.methods\n        .aggregatorInit({\n          name: (params.name ?? Buffer.from(\"\")).slice(0, 32),\n          metadata: (params.metadata ?? Buffer.from(\"\")).slice(0, 128),\n          batchSize: params.batchSize,\n          minOracleResults: params.minRequiredOracleResults,\n          minJobResults: params.minRequiredJobResults,\n          minUpdateDelaySeconds: params.minUpdateDelaySeconds,\n          varianceThreshold: SwitchboardDecimal.fromBig(\n            new Big(params.varianceThreshold ?? 0)\n          ),\n          forceReportPeriod: params.forceReportPeriod ?? new anchor.BN(0),\n          expiration: params.expiration ?? new anchor.BN(0),\n          stateBump,\n        })\n        .accounts({\n          aggregator: aggregatorKeypair.publicKey,\n          authority,\n          queue: params.queueAccount.publicKey,\n          // authorWallet: params.authorWallet ?? state.tokenVault,\n          programState: programStateAccount.publicKey,\n        })\n        .instruction(),\n      await program.methods\n        .permissionInit({})\n        .accounts({\n          permission: permissionAccount.publicKey,\n          authority: queue.authority,\n          granter: queueAccount.publicKey,\n          grantee: aggregatorKeypair.publicKey,\n          payer: payerPubkey,\n          systemProgram: anchor.web3.SystemProgram.programId,\n        })\n        .instruction(),\n      payerPubkey.equals(queue.authority)\n        ? await program.methods\n            .permissionSet({\n              permission: { permitOracleQueueUsage: null },\n              enable: true,\n            })\n            .accounts({\n              permission: permissionAccount.publicKey,\n              authority: queue.authority,\n            })\n            .instruction()\n        : undefined,\n      spl.createAssociatedTokenAccountInstruction(\n        payerPubkey,\n        leaseEscrow,\n        leaseAccount.publicKey,\n        mint.address\n      ),\n      await program.methods\n        .leaseInit({\n          loadAmount: fundLeaseAmount,\n          stateBump,\n          leaseBump,\n          withdrawAuthority: payerPubkey,\n          walletBumps: Buffer.from([]),\n        })\n        .accounts({\n          programState: programStateAccount.publicKey,\n          lease: leaseAccount.publicKey,\n          queue: queueAccount.publicKey,\n          aggregator: aggregatorAccount.publicKey,\n          systemProgram: anchor.web3.SystemProgram.programId,\n          funder: payerTokenAcct.publicKey,\n          payer: payerPubkey,\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n          escrow: leaseEscrow,\n          owner: payerPubkey,\n          mint: mint.address,\n        })\n        // .remainingAccounts(\n        //   jobPubkeys.concat(jobWallets).map((pubkey: PublicKey) => {\n        //     return { isSigner: false, isWritable: true, pubkey };\n        //   })\n        // )\n        .instruction(),\n      ...(await Promise.all(\n        jobs.map(async ([jobAccount, weight]) => {\n          return program.methods\n            .aggregatorAddJob({\n              weight,\n            })\n            .accounts({\n              aggregator: aggregatorKeypair.publicKey,\n              authority,\n              job: jobAccount.publicKey,\n            })\n            .instruction();\n        })\n      )),\n    ].filter(Boolean) as anchor.web3.TransactionInstruction[])\n  );\n\n  return {\n    ixns: ixns,\n    signers: [aggregatorKeypair],\n    account: aggregatorAccount,\n  };\n}\n"]}