"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferWrappedSol = exports.getOrCreateSwitchboardTokenAccount = void 0;
const spl = __importStar(require("@solana/spl-token-v2"));
const web3_js_1 = require("@solana/web3.js");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const getOrCreateSwitchboardTokenAccount = async (program, switchboardMint, payer = (0, switchboard_v2_1.programWallet)(program)) => {
    const getAssociatedAddress = async (mint) => {
        const tokenAccount = await spl.getOrCreateAssociatedTokenAccount(program.provider.connection, payer, mint.address, payer.publicKey, undefined, undefined, undefined, spl.TOKEN_PROGRAM_ID, spl.ASSOCIATED_TOKEN_PROGRAM_ID);
        return tokenAccount.address;
    };
    let mint = switchboardMint;
    if (mint) {
        return getAssociatedAddress(mint);
    }
    const [programState] = switchboard_v2_1.ProgramStateAccount.fromSeed(program);
    mint = await programState.getTokenMint();
    if (mint) {
        return getAssociatedAddress(mint);
    }
    throw new Error(`failed to get associated token account`);
};
exports.getOrCreateSwitchboardTokenAccount = getOrCreateSwitchboardTokenAccount;
async function transferWrappedSol(connection, payerKeypair, amount) {
    const payerBalance = await connection.getBalance(payerKeypair.publicKey);
    if (payerBalance < amount) {
        throw new Error(`TransferWrappedSolError: Payer has insufficient funds, need ${amount}, have ${payerBalance}`);
    }
    const payerAssociatedWallet = (await spl.getOrCreateAssociatedTokenAccount(connection, payerKeypair, spl.NATIVE_MINT, payerKeypair.publicKey)).address;
    // create new account to temporarily hold wrapped funds
    const ephemeralAccount = web3_js_1.Keypair.generate();
    const ephemeralWallet = await spl.getAssociatedTokenAddress(spl.NATIVE_MINT, ephemeralAccount.publicKey, false);
    const tx = new web3_js_1.Transaction().add(spl.createAssociatedTokenAccountInstruction(payerKeypair.publicKey, ephemeralWallet, ephemeralAccount.publicKey, spl.NATIVE_MINT), web3_js_1.SystemProgram.transfer({
        fromPubkey: payerKeypair.publicKey,
        toPubkey: ephemeralWallet,
        lamports: amount,
    }), spl.createSyncNativeInstruction(ephemeralWallet), spl.createTransferInstruction(ephemeralWallet, payerAssociatedWallet, ephemeralAccount.publicKey, amount, [payerKeypair, ephemeralAccount]), spl.createCloseAccountInstruction(ephemeralWallet, payerKeypair.publicKey, ephemeralAccount.publicKey, [payerKeypair, ephemeralAccount]));
    const txn = await (0, web3_js_1.sendAndConfirmTransaction)(connection, tx, [
        payerKeypair,
        ephemeralAccount,
    ]);
    const finalBalance = await spl.getAccount(connection, payerAssociatedWallet);
    return Number(finalBalance.amount);
}
exports.transferWrappedSol = transferWrappedSol;
//# sourceMappingURL=token.js.map