{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../src/test/context.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable @typescript-eslint/no-var-requires */\nimport * as anchor from \"@project-serum/anchor\";\nimport * as spl from \"@solana/spl-token-v2\";\nimport { Keypair, PublicKey } from \"@solana/web3.js\";\nimport * as sbv2 from \"@switchboard-xyz/switchboard-v2\";\nimport Big from \"big.js\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { sleep } from \"../async.js\";\nimport { awaitOpenRound, createAggregator } from \"../feed.js\";\nimport { transferWrappedSol } from \"../token.js\";\n\nexport interface ISwitchboardTestContext {\n  program: anchor.Program;\n  mint: spl.Mint;\n  payerTokenWallet: PublicKey;\n  queue: sbv2.OracleQueueAccount;\n  oracle?: sbv2.OracleAccount;\n}\n\nexport class SwitchboardTestContext implements ISwitchboardTestContext {\n  program: anchor.Program;\n\n  mint: spl.Mint;\n\n  payerTokenWallet: PublicKey;\n\n  queue: sbv2.OracleQueueAccount;\n\n  oracle?: sbv2.OracleAccount;\n\n  constructor(ctx: ISwitchboardTestContext) {\n    this.program = ctx.program;\n    this.mint = ctx.mint;\n    this.payerTokenWallet = ctx.payerTokenWallet;\n    this.queue = ctx.queue;\n    this.oracle = ctx.oracle;\n  }\n\n  /** Load the associated token wallet for the given payer with a prefunded balance\n   * @param program anchor program\n   * @param mint the switchboard mint address\n   * @param tokenAmount number of tokens to populate in switchboard mint's associated token account\n   */\n  static async getOrCreateSwitchboardWallet(\n    program: anchor.Program,\n    mint: spl.Mint,\n    tokenAmount: number\n  ): Promise<PublicKey> {\n    const payerKeypair = sbv2.programWallet(program);\n\n    if (tokenAmount <= 0) {\n      return spl.getAssociatedTokenAddress(\n        mint.address,\n        payerKeypair.publicKey\n      );\n    }\n\n    const associatedTokenAccount = await spl.getOrCreateAssociatedTokenAccount(\n      program.provider.connection,\n      payerKeypair,\n      mint.address,\n      payerKeypair.publicKey\n    );\n\n    if (tokenAmount <= associatedTokenAccount.amount) {\n      return associatedTokenAccount.address;\n    }\n\n    const amountNeeded = tokenAmount - Number(associatedTokenAccount.amount);\n    if (amountNeeded <= 0) {\n      return associatedTokenAccount.address;\n    }\n\n    const balance = await program.provider.connection.getBalance(\n      payerKeypair.publicKey\n    );\n\n    if (amountNeeded > balance) {\n      throw new Error(\n        `Payer account does not enough balance to fund new token account, need ${amountNeeded}, have ${balance}`\n      );\n    }\n\n    const finalBalance = await transferWrappedSol(\n      program.provider.connection,\n      payerKeypair,\n      amountNeeded\n    );\n\n    return associatedTokenAccount.address;\n  }\n\n  /** Load SwitchboardTestContext using a specified queue\n   * @param provider anchor Provider containing connection and payer Keypair\n   * @param queueKey the oracle queue to load\n   * @param tokenAmount number of tokens to populate in switchboard mint's associated token account\n   */\n  static async loadDevnetQueue(\n    provider: anchor.AnchorProvider,\n    queueKey = \"F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy\",\n    tokenAmount = 0\n  ) {\n    const payerKeypair = (provider.wallet as sbv2.AnchorWallet).payer;\n\n    const balance = await provider.connection.getBalance(\n      payerKeypair.publicKey\n    );\n    if (!balance) {\n      try {\n        await provider.connection.requestAirdrop(\n          payerKeypair.publicKey,\n          1_000_000_000\n        );\n      } catch {}\n    }\n\n    let program: anchor.Program;\n    try {\n      program = await sbv2.loadSwitchboardProgram(\n        \"devnet\",\n        provider.connection,\n        payerKeypair\n      );\n    } catch (error: any) {\n      throw new Error(\n        `Failed to load the SBV2 program for the given cluster, ${error.message}`\n      );\n    }\n    let queue: sbv2.OracleQueueAccount;\n    let queueData: any;\n    try {\n      queue = new sbv2.OracleQueueAccount({\n        program,\n        publicKey: new PublicKey(queueKey),\n      });\n      queueData = await queue.loadData();\n      if (queueData.queue.length < 1) {\n        throw new Error(`OracleQueue has no active oracles heartbeating`);\n      }\n    } catch (error: any) {\n      throw new Error(\n        `Failed to load the SBV2 queue for the given cluster, ${error.message}`\n      );\n    }\n    let mint: spl.Mint;\n    try {\n      mint = await queue.loadMint();\n    } catch (error: any) {\n      throw new Error(\n        `Failed to load the SBV2 mint for the given cluster, ${error.message}`\n      );\n    }\n\n    const payerTokenWallet =\n      await SwitchboardTestContext.getOrCreateSwitchboardWallet(\n        program,\n        mint,\n        tokenAmount\n      );\n\n    return new SwitchboardTestContext({\n      program,\n      queue,\n      mint,\n      payerTokenWallet,\n    });\n  }\n\n  /** Recursively loop through directories and return the filepath of switchboard.env\n   * @param envFileName alternative filename to search for. defaults to switchboard.env\n   * @returns the filepath for a switchboard env file to load\n   */\n  public static findSwitchboardEnv(envFileName = \"switchboard.env\"): string {\n    const NotFoundError = new Error(\n      \"failed to find switchboard.env file in current directory recursively\"\n    );\n    let retryCount = 5;\n\n    let currentDirectory = process.cwd();\n    while (retryCount > 0) {\n      // look for switchboard.env\n      try {\n        const currentPath = path.join(currentDirectory, envFileName);\n        if (fs.existsSync(currentPath)) {\n          return currentPath;\n        }\n      } catch {}\n\n      // look for .switchboard directory\n      try {\n        const localSbvPath = path.join(currentDirectory, \".switchboard\");\n        if (fs.existsSync(localSbvPath)) {\n          const localSbvEnvPath = path.join(localSbvPath, envFileName);\n          if (fs.existsSync(localSbvEnvPath)) {\n            return localSbvEnvPath;\n          }\n        }\n      } catch {}\n\n      currentDirectory = path.join(currentDirectory, \"../\");\n\n      --retryCount;\n    }\n\n    throw NotFoundError;\n  }\n\n  /** Load SwitchboardTestContext from an env file containing $SWITCHBOARD_PROGRAM_ID, $ORACLE_QUEUE, $AGGREGATOR\n   * @param provider anchor Provider containing connection and payer Keypair\n   * @param filePath filesystem path to env file\n   * @param tokenAmount number of tokens to populate in switchboard mint's associated token account\n   */\n  public static async loadFromEnv(\n    provider: anchor.AnchorProvider,\n    filePath = SwitchboardTestContext.findSwitchboardEnv(),\n    tokenAmount = 0\n  ): Promise<SwitchboardTestContext> {\n    require(\"dotenv\").config({ path: filePath });\n    if (!process.env.SWITCHBOARD_PROGRAM_ID) {\n      throw new Error(`your env file must have $SWITCHBOARD_PROGRAM_ID set`);\n    }\n\n    const payerKeypair = (provider.wallet as sbv2.AnchorWallet).payer;\n\n    const balance = await provider.connection.getBalance(\n      payerKeypair.publicKey\n    );\n    if (!balance) {\n      try {\n        const airdropSignature = await provider.connection.requestAirdrop(\n          payerKeypair.publicKey,\n          1_000_000_000\n        );\n        await provider.connection.confirmTransaction(airdropSignature);\n      } catch {}\n    }\n\n    const SWITCHBOARD_PID = new PublicKey(process.env.SWITCHBOARD_PROGRAM_ID);\n    const switchboardIdl = await anchor.Program.fetchIdl(\n      SWITCHBOARD_PID,\n      provider\n    );\n    if (!switchboardIdl) {\n      throw new Error(`failed to load Switchboard IDL`);\n    }\n    const switchboardProgram = new anchor.Program(\n      switchboardIdl,\n      SWITCHBOARD_PID,\n      provider\n    );\n\n    if (!process.env.ORACLE_QUEUE) {\n      throw new Error(`your env file must have $ORACLE_QUEUE set`);\n    }\n    const SWITCHBOARD_QUEUE = new PublicKey(process.env.ORACLE_QUEUE);\n    const queue = new sbv2.OracleQueueAccount({\n      program: switchboardProgram,\n      publicKey: SWITCHBOARD_QUEUE,\n    });\n\n    const oracle = process.env.ORACLE\n      ? new sbv2.OracleAccount({\n          program: switchboardProgram,\n          publicKey: new PublicKey(process.env.ORACLE),\n        })\n      : undefined;\n\n    let mint: spl.Mint;\n    try {\n      mint = await queue.loadMint();\n    } catch (error: any) {\n      throw new Error(\n        `Failed to load the SBV2 mint for the given cluster, ${error.message}`\n      );\n    }\n\n    const payerTokenWallet =\n      await SwitchboardTestContext.getOrCreateSwitchboardWallet(\n        switchboardProgram,\n        mint,\n        tokenAmount\n      );\n\n    const context: ISwitchboardTestContext = {\n      program: switchboardProgram,\n      mint: mint,\n      payerTokenWallet,\n      queue,\n      oracle,\n    };\n\n    return new SwitchboardTestContext(context);\n  }\n\n  /** Create a static data feed that resolves to an expected value */\n  public async createStaticFeed(\n    value: number,\n    timeout = 30\n  ): Promise<sbv2.AggregatorAccount> {\n    const payerKeypair = sbv2.programWallet(this.program);\n\n    const staticJob = await sbv2.JobAccount.create(this.program, {\n      name: Buffer.from(`Value ${value}`),\n      authority: this.payerTokenWallet,\n      data: Buffer.from(\n        sbv2.OracleJob.encodeDelimited(\n          sbv2.OracleJob.create({\n            tasks: [\n              sbv2.OracleJob.Task.create({\n                valueTask: sbv2.OracleJob.ValueTask.create({\n                  value,\n                }),\n              }),\n            ],\n          })\n        ).finish()\n      ),\n    });\n\n    const aggregatorAccount = await createAggregator(\n      this.program,\n      this.queue,\n      {\n        batchSize: 1,\n        minRequiredJobResults: 1,\n        minRequiredOracleResults: 1,\n        minUpdateDelaySeconds: 5,\n        queueAccount: this.queue,\n        authorWallet: this.payerTokenWallet,\n        authority: payerKeypair.publicKey,\n      },\n      [[staticJob, 1]]\n    );\n\n    const aggValue = await awaitOpenRound(\n      aggregatorAccount,\n      this.queue,\n      this.payerTokenWallet,\n      new Big(value),\n      timeout\n    );\n\n    return aggregatorAccount;\n  }\n\n  /** Update a feed to a single job that resolves to a new expected value\n   * @param aggregatorAccount the aggregator to change a job definition for\n   * @param value the new expected value\n   * @param timeout how long to wait for the oracle to update the aggregator's latestRound result\n   */\n  public async updateStaticFeed(\n    aggregatorAccount: sbv2.AggregatorAccount,\n    value: number,\n    timeout = 30\n  ): Promise<void> {\n    const payerKeypair = sbv2.programWallet(this.program);\n    const aggregator = await aggregatorAccount.loadData();\n    const expectedValue = new Big(value);\n\n    const queue = await this.queue.loadData();\n\n    // remove all existing jobs\n    const existingJobs: sbv2.JobAccount[] = aggregator.jobPubkeysData\n      // eslint-disable-next-line array-callback-return\n      .filter((jobKey: PublicKey) => {\n        if (!jobKey.equals(PublicKey.default)) {\n          return jobKey;\n        }\n        return undefined;\n      })\n      .filter((item: PublicKey | undefined) => item !== undefined)\n      .map(\n        (jobKey: PublicKey) =>\n          new sbv2.JobAccount({\n            program: this.program,\n            publicKey: jobKey,\n          })\n      );\n    await Promise.all(\n      existingJobs.map((job) => aggregatorAccount.removeJob(job, payerKeypair))\n    );\n\n    // add new static job\n    const staticJob = await sbv2.JobAccount.create(this.program, {\n      name: Buffer.from(`Value ${value}`),\n      authority: Keypair.generate().publicKey,\n      data: Buffer.from(\n        sbv2.OracleJob.encodeDelimited(\n          sbv2.OracleJob.create({\n            tasks: [\n              sbv2.OracleJob.Task.create({\n                valueTask: sbv2.OracleJob.ValueTask.create({\n                  value,\n                }),\n              }),\n            ],\n          })\n        ).finish()\n      ),\n    });\n    await aggregatorAccount.addJob(staticJob, payerKeypair);\n\n    const aggValue = await awaitOpenRound(\n      aggregatorAccount,\n      this.queue,\n      this.payerTokenWallet,\n      expectedValue,\n      timeout\n    );\n  }\n\n  /** Checks whether the queue has any active oracles heartbeating */\n  public async isQueueReady(): Promise<boolean> {\n    const queueData = await this.queue.loadData();\n    return queueData.queue.length > 0;\n  }\n\n  /** Awaits the specified timeout for an oracle to start heartbeating on the queue\n   * @param timeout number of seconds to wait for an oracle to start heartbeating\n   */\n  public async oracleHeartbeat(timeout = 30): Promise<void> {\n    const delay = Math.ceil(timeout / 10) * 1000;\n    let retryCount = 10;\n    while (retryCount) {\n      try {\n        if (await this.isQueueReady()) {\n          return;\n        }\n      } catch (error) {\n        if (\n          !(error instanceof Error) ||\n          !error.toString().includes(\"connection refused\")\n        ) {\n          throw error;\n        }\n      }\n      await sleep(delay);\n      --retryCount;\n    }\n    if (timeout <= 0) {\n      throw new Error(\n        `Timed out waiting for the OracleQueue to have an active oracle heartbeating`\n      );\n    }\n  }\n}\n"]}