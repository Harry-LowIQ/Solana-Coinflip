{"version":3,"file":"env.js","sourceRoot":"","sources":["../../../src/test/env.ts"],"names":[],"mappings":"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","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl, Connection, Keypair, PublicKey } from \"@solana/web3.js\";\nimport * as sbv2 from \"@switchboard-xyz/switchboard-v2\";\nimport {\n  CrankAccount,\n  OracleAccount,\n  PermissionAccount,\n  ProgramStateAccount,\n} from \"@switchboard-xyz/switchboard-v2\";\nimport chalk from \"chalk\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { getIdlAddress, getProgramDataAddress } from \"../anchor.js\";\nimport { anchorBNtoDateString } from \"../date.js\";\nimport { createQueue } from \"../queue.js\";\nimport { getOrCreateSwitchboardTokenAccount } from \"../token.js\";\n\nexport const LATEST_DOCKER_VERSION = \"dev-v2-07-18-22\";\n\nexport interface ISwitchboardTestEnvironment {\n  programId: PublicKey;\n  programDataAddress: PublicKey;\n  idlAddress: PublicKey;\n  programState: PublicKey;\n  switchboardVault: PublicKey;\n  switchboardMint: PublicKey;\n  tokenWallet: PublicKey;\n  queue: PublicKey;\n  queueAuthority: PublicKey;\n  queueBuffer: PublicKey;\n  crank: PublicKey;\n  crankBuffer: PublicKey;\n  oracle: PublicKey;\n  oracleAuthority: PublicKey;\n  oracleEscrow: PublicKey;\n  oraclePermissions: PublicKey;\n  payerKeypairPath: string;\n\n  // allow a map of public keys to include in clone script\n  additionalClonedAccounts?: Record<string, PublicKey>;\n}\n\n/** Contains all of the necessary devnet Switchboard accounts to clone to localnet */\nexport class SwitchboardTestEnvironment implements ISwitchboardTestEnvironment {\n  programId: PublicKey;\n\n  programDataAddress: PublicKey;\n\n  idlAddress: PublicKey;\n\n  programState: PublicKey;\n\n  switchboardVault: PublicKey;\n\n  switchboardMint: PublicKey;\n\n  tokenWallet: PublicKey;\n\n  queue: PublicKey;\n\n  queueAuthority: PublicKey;\n\n  queueBuffer: PublicKey;\n\n  crank: PublicKey;\n\n  crankBuffer: PublicKey;\n\n  oracle: PublicKey;\n\n  oracleAuthority: PublicKey;\n\n  oracleEscrow: PublicKey;\n\n  oraclePermissions: PublicKey;\n\n  payerKeypairPath: string;\n\n  additionalClonedAccounts: Record<string, PublicKey>;\n\n  constructor(ctx: ISwitchboardTestEnvironment) {\n    this.programId = ctx.programId;\n    this.programDataAddress = ctx.programDataAddress;\n    this.idlAddress = ctx.idlAddress;\n    this.programState = ctx.programState;\n    this.switchboardVault = ctx.switchboardVault;\n    this.switchboardMint = ctx.switchboardMint;\n    this.tokenWallet = ctx.tokenWallet;\n    this.queue = ctx.queue;\n    this.queueAuthority = ctx.queueAuthority;\n    this.queueBuffer = ctx.queueBuffer;\n    this.crank = ctx.crank;\n    this.crankBuffer = ctx.crankBuffer;\n    this.oracle = ctx.oracle;\n    this.oracleAuthority = ctx.oracleAuthority;\n    this.oracleEscrow = ctx.oracleEscrow;\n    this.oraclePermissions = ctx.oraclePermissions;\n    this.payerKeypairPath = ctx.payerKeypairPath;\n    this.additionalClonedAccounts = ctx.additionalClonedAccounts ?? {};\n  }\n\n  private getAccountCloneString(): string {\n    const accounts = Object.keys(this).map((key) => {\n      // iterate over additionalClonedAccounts and collect pubkeys\n      if (typeof this[key] === \"string\") {\n        return;\n      }\n      if (key === \"additionalClonedAccounts\" && this[key]) {\n        const additionalPubkeys = Object.values(this.additionalClonedAccounts);\n        const cloneStrings = additionalPubkeys.map(\n          (pubkey) => `--clone ${pubkey.toBase58()} \\`# ${key}\\``\n        );\n        return cloneStrings.join(`\\\\\\n`);\n      }\n\n      return `--clone ${(this[key] as PublicKey).toBase58()} \\`# ${key}\\` `;\n    });\n\n    return accounts.filter(Boolean).join(`\\\\\\n`);\n  }\n\n  public toJSON(): ISwitchboardTestEnvironment {\n    return {\n      programId: this.programId,\n      programDataAddress: this.programDataAddress,\n      idlAddress: this.idlAddress,\n      programState: this.programState,\n      switchboardVault: this.switchboardVault,\n      switchboardMint: this.switchboardMint,\n      tokenWallet: this.tokenWallet,\n      queue: this.queue,\n      queueAuthority: this.queueAuthority,\n      queueBuffer: this.queueBuffer,\n      crank: this.crank,\n      crankBuffer: this.crankBuffer,\n      oracle: this.oracle,\n      oracleAuthority: this.oracleAuthority,\n      oracleEscrow: this.oracleEscrow,\n      oraclePermissions: this.oraclePermissions,\n      payerKeypairPath: this.payerKeypairPath,\n      additionalClonedAccounts: this.additionalClonedAccounts,\n    };\n  }\n\n  /** Write switchboard test environment to filesystem */\n  public writeAll(outputDir: string): void {\n    fs.mkdirSync(outputDir, { recursive: true });\n    this.writeEnv(outputDir);\n    this.writeJSON(outputDir);\n    this.writeScripts(outputDir);\n    this.writeDockerCompose(outputDir);\n    this.writeAnchorToml(outputDir);\n  }\n\n  /** Write the env file to filesystem */\n  public writeEnv(filePath: string): void {\n    const ENV_FILE_PATH = path.join(filePath, \"switchboard.env\");\n    let fileStr = \"\";\n    fileStr += `SWITCHBOARD_PROGRAM_ID=\"${this.programId.toBase58()}\"\\n`;\n    fileStr += `SWITCHBOARD_PROGRAM_DATA_ADDRESS=\"${this.programDataAddress.toBase58()}\"\\n`;\n    fileStr += `SWITCHBOARD_IDL_ADDRESS=\"${this.idlAddress.toBase58()}\"\\n`;\n    fileStr += `SWITCHBOARD_PROGRAM_STATE=\"${this.programState.toBase58()}\"\\n`;\n    fileStr += `SWITCHBOARD_VAULT=\"${this.switchboardVault.toBase58()}\"\\n`;\n    fileStr += `SWITCHBOARD_MINT=\"${this.switchboardMint.toBase58()}\"\\n`;\n    fileStr += `TOKEN_WALLET=\"${this.tokenWallet.toBase58()}\"\\n`;\n    fileStr += `ORACLE_QUEUE=\"${this.queue.toBase58()}\"\\n`;\n    fileStr += `ORACLE_QUEUE_AUTHORITY=\"${this.queueAuthority.toBase58()}\"\\n`;\n    fileStr += `ORACLE_QUEUE_BUFFER=\"${this.queueBuffer.toBase58()}\"\\n`;\n    fileStr += `CRANK=\"${this.crank.toBase58()}\"\\n`;\n    fileStr += `CRANK_BUFFER=\"${this.crankBuffer.toBase58()}\"\\n`;\n    fileStr += `ORACLE=\"${this.oracle.toBase58()}\"\\n`;\n    fileStr += `ORACLE_AUTHORITY=\"${this.oracleAuthority.toBase58()}\"\\n`;\n    fileStr += `ORACLE_ESCROW=\"${this.oracleEscrow.toBase58()}\"\\n`;\n    fileStr += `ORACLE_PERMISSIONS=\"${this.oraclePermissions.toBase58()}\"\\n`;\n    // fileStr += `SWITCHBOARD_ACCOUNTS=\"${this.getAccountCloneString()}\"\\n`;\n    // TODO: Write additionalClonedAccounts to env file\n    fs.writeFileSync(ENV_FILE_PATH, fileStr);\n    console.log(\n      `${chalk.green(\"Env File saved to:\")} ${ENV_FILE_PATH.replace(\n        process.cwd(),\n        \".\"\n      )}`\n    );\n  }\n\n  public writeJSON(outputDir: string): void {\n    const JSON_FILE_PATH = path.join(outputDir, \"switchboard.json\");\n    fs.writeFileSync(\n      JSON_FILE_PATH,\n      JSON.stringify(\n        this.toJSON(),\n        (key, value) => {\n          if (value instanceof PublicKey) {\n            return value.toBase58();\n          }\n          return value;\n        },\n        2\n      )\n    );\n  }\n\n  public writeScripts(outputDir: string): void {\n    const LOCAL_VALIDATOR_SCRIPT = path.join(\n      outputDir,\n      \"start-local-validator.sh\"\n    );\n    // create bash script to startup local validator with appropriate accounts cloned\n    const baseValidatorCommand = `solana-test-validator -r --ledger .anchor/test-ledger --mint ${this.oracleAuthority.toBase58()} --bind-address 0.0.0.0 --url ${clusterApiUrl(\n      \"devnet\"\n    )} --rpc-port 8899 `;\n    const cloneAccountsString = this.getAccountCloneString();\n    const startValidatorCommand = `${baseValidatorCommand} ${cloneAccountsString}`;\n    fs.writeFileSync(\n      LOCAL_VALIDATOR_SCRIPT,\n\n      `#!/bin/bash\\n\\nmkdir -p .anchor/test-ledger\\n\\n${startValidatorCommand}`\n    );\n    fs.chmodSync(LOCAL_VALIDATOR_SCRIPT, \"755\");\n    console.log(\n      `${chalk.green(\"Bash script saved to:\")} ${LOCAL_VALIDATOR_SCRIPT.replace(\n        process.cwd(),\n        \".\"\n      )}`\n    );\n\n    // create bash script to start local oracle\n    const ORACLE_SCRIPT = path.join(outputDir, \"start-oracle.sh\");\n    // const startOracleCommand = `docker-compose -f docker-compose.switchboard.yml up`;\n    fs.writeFileSync(\n      ORACLE_SCRIPT,\n      `#!/usr/bin/env bash\n\nscript_dir=$( cd -- \"$( dirname -- \"\\${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\n\ndocker-compose -f  \"$script_dir\"/docker-compose.switchboard.yml up\n      `\n      // `#!/bin/bash\\n\\n${startOracleCommand}`\n    );\n    fs.chmodSync(ORACLE_SCRIPT, \"755\");\n    console.log(\n      `${chalk.green(\"Bash script saved to:\")} ${ORACLE_SCRIPT.replace(\n        process.cwd(),\n        \".\"\n      )}`\n    );\n  }\n\n  public writeDockerCompose(outputDir: string): void {\n    const DOCKER_COMPOSE_FILEPATH = path.join(\n      outputDir,\n      \"docker-compose.switchboard.yml\"\n    );\n    const dockerComposeString = `version: \"3.3\"\nservices:\n  oracle:\n    image: \"switchboardlabs/node:\\${SBV2_ORACLE_VERSION:-${LATEST_DOCKER_VERSION}}\" # https://hub.docker.com/r/switchboardlabs/node/tags\n    network_mode: host\n    restart: always\n    secrets:\n      - PAYER_SECRETS\n    environment:\n      - VERBOSE=1\n      - LIVE=1\n      - CLUSTER=\\${CLUSTER:-localnet}\n      - HEARTBEAT_INTERVAL=30 # Seconds\n      - ORACLE_KEY=${this.oracle.toBase58()}\n    #  - RPC_URL=\\${RPC_URL}\nsecrets:\n  PAYER_SECRETS:\n    file: ${this.payerKeypairPath}\n`;\n    fs.writeFileSync(DOCKER_COMPOSE_FILEPATH, dockerComposeString);\n    console.log(\n      `${chalk.green(\n        \"Docker-Compose saved to:\"\n      )} ${DOCKER_COMPOSE_FILEPATH.replace(process.cwd(), \".\")}`\n    );\n  }\n\n  public writeAnchorToml(outputDir: string): void {\n    const ANCHOR_TOML_FILEPATH = path.join(\n      outputDir,\n      \"Anchor.switchboard.toml\"\n    );\n    const anchorTomlString = `[provider]\ncluster = \"localnet\"\nwallet = \"${this.payerKeypairPath}\"\n\n[test]\nstartup_wait = 10000\n\n[test.validator]\nurl = \"https://devnet.genesysgo.net/\"\n\n[[test.validator.clone]] # programID\naddress = \"${this.programId}\"\n\n[[test.validator.clone]] # idlAddress\naddress = \"${this.idlAddress}\"\n\n[[test.validator.clone]] # programState\naddress = \"${this.programState}\"\n\n[[test.validator.clone]] # switchboardVault\naddress = \"${this.switchboardVault}\"\n\n[[test.validator.clone]] # tokenWallet\naddress = \"${this.tokenWallet}\"\n\n[[test.validator.clone]] # queue\naddress = \"${this.queue}\"\n\n[[test.validator.clone]] # queueAuthority\naddress = \"${this.queueAuthority}\"\n\n[[test.validator.clone]] # queueBuffer\naddress = \"${this.queueBuffer}\"\n\n[[test.validator.clone]] # crank\naddress = \"${this.crank}\"\n\n[[test.validator.clone]] # crankBuffer\naddress = \"${this.crankBuffer}\"\n\n[[test.validator.clone]] # oracle\naddress = \"${this.oracle}\"\n\n[[test.validator.clone]] # oracleAuthority\naddress = \"${this.oracleAuthority}\"\n\n[[test.validator.clone]] # oracleEscrow\naddress = \"${this.oracleEscrow}\"\n\n[[test.validator.clone]] # oraclePermissions\naddress = \"${this.oraclePermissions}\"\n`;\n\n    fs.writeFileSync(ANCHOR_TOML_FILEPATH, anchorTomlString);\n    console.log(\n      `${chalk.green(\"Anchor.toml saved to:\")} ${ANCHOR_TOML_FILEPATH.replace(\n        process.cwd(),\n        \".\"\n      )}`\n    );\n  }\n\n  /** Build a devnet environment to later clone to localnet */\n  static async create(\n    payerKeypairPath: string,\n    additionalClonedAccounts?: Record<string, PublicKey>,\n    alternateProgramId?: PublicKey\n  ): Promise<SwitchboardTestEnvironment> {\n    const fullKeypairPath =\n      payerKeypairPath.charAt(0) === \"/\"\n        ? payerKeypairPath\n        : path.join(process.cwd(), payerKeypairPath);\n    if (!fs.existsSync(fullKeypairPath)) {\n      throw new Error(\"Failed to find payer keypair path\");\n    }\n    const payerKeypair = Keypair.fromSecretKey(\n      new Uint8Array(\n        JSON.parse(\n          fs.readFileSync(fullKeypairPath, {\n            encoding: \"utf-8\",\n          })\n        )\n      )\n    );\n    const connection = new Connection(clusterApiUrl(\"devnet\"), {\n      commitment: \"confirmed\",\n    });\n\n    const programId = alternateProgramId ?? sbv2.getSwitchboardPid(\"devnet\");\n    const wallet = new sbv2.AnchorWallet(payerKeypair);\n    const provider = new anchor.AnchorProvider(connection, wallet, {});\n\n    const anchorIdl = await anchor.Program.fetchIdl(programId, provider);\n    if (!anchorIdl) {\n      throw new Error(`failed to read idl for ${programId}`);\n    }\n\n    const switchboardProgram = new anchor.Program(\n      anchorIdl,\n      programId,\n      provider\n    );\n\n    const programDataAddress = getProgramDataAddress(\n      switchboardProgram.programId\n    );\n    const idlAddress = await getIdlAddress(switchboardProgram.programId);\n\n    const queueResponse = await createQueue(\n      switchboardProgram,\n      {\n        authority: payerKeypair.publicKey,\n        name: \"Test Queue\",\n        metadata: `created ${anchorBNtoDateString(\n          new anchor.BN(Math.floor(Date.now() / 1000))\n        )}`,\n        minStake: new anchor.BN(0),\n        reward: new anchor.BN(0),\n        crankSize: 10,\n        oracleTimeout: 180,\n        numOracles: 1,\n        unpermissionedFeeds: true,\n        unpermissionedVrf: true,\n        enableBufferRelayers: true,\n      },\n      10\n    );\n\n    const queueAccount = queueResponse.queueAccount;\n    const queue = await queueAccount.loadData();\n\n    const [programStateAccount, stateBump] =\n      ProgramStateAccount.fromSeed(switchboardProgram);\n    const programState = await programStateAccount.loadData();\n\n    const mint = await queueAccount.loadMint();\n\n    const payerSwitchboardWallet = await getOrCreateSwitchboardTokenAccount(\n      switchboardProgram,\n      mint\n    );\n\n    const crankAccount = new CrankAccount({\n      program: switchboardProgram,\n      publicKey: queueResponse.crankPubkey,\n    });\n    const crank = await crankAccount.loadData();\n\n    const oracleAccount = new OracleAccount({\n      program: switchboardProgram,\n      publicKey: queueResponse.oracles[0],\n    });\n    const oracle = await oracleAccount.loadData();\n\n    const [permissionAccount] = PermissionAccount.fromSeed(\n      switchboardProgram,\n      queue.authority,\n      queueAccount.publicKey,\n      oracleAccount.publicKey\n    );\n    const permission = await permissionAccount.loadData();\n\n    const ctx: ISwitchboardTestEnvironment = {\n      programId: switchboardProgram.programId,\n      programDataAddress,\n      idlAddress,\n      programState: programStateAccount.publicKey,\n      switchboardVault: programState.tokenVault,\n      switchboardMint: mint.address,\n      tokenWallet: payerSwitchboardWallet,\n      queue: queueResponse.queueAccount.publicKey,\n      queueAuthority: queue.authority,\n      queueBuffer: queue.dataBuffer,\n      crank: crankAccount.publicKey,\n      crankBuffer: crank.dataBuffer,\n      oracle: oracleAccount.publicKey,\n      oracleAuthority: oracle.oracleAuthority,\n      oracleEscrow: oracle.tokenAccount,\n      oraclePermissions: permissionAccount.publicKey,\n      payerKeypairPath: fullKeypairPath,\n      additionalClonedAccounts,\n    };\n\n    return new SwitchboardTestEnvironment(ctx);\n  }\n}\n"]}