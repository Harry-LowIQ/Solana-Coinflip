{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../src/transaction.ts"],"names":[],"mappings":"AASA,OAAO,EACL,gBAAgB,EAChB,gBAAgB,GACjB,MAAM,iCAAiC,CAAC;AAEzC,MAAM,CAAC,KAAK,UAAU,WAAW,CAC/B,OAAuB,EACvB,WAAoE,EACpE,OAAkB,EAClB,QAAmB;IAEnB,MAAM,UAAU,GAAoC,EAAE,CAAC;IAEvD,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,WAAW,EAAE;QACrC,MAAM,EAAE,SAAS,EAAE,GACjB,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,kBAAkB,EAAE,CAAC;QAEzD,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,KAAK,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;QACxE,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;QACzE,MAAM,SAAS,GAAG,MAChB,OAAO,CAAC,QACT,CAAC,MAAM,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC;QAEjD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,kBAAkB,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACrD,MAAM,EAAE,GAAG,SAAS,CAAC,CAAC,CAAE,CAAC;YACzB,MAAM,KAAK,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;YAC7B,UAAU,CAAC,IAAI,CACb,4BAA4B,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,EAAE;gBAC/D,UAAU,EAAE,EAAE;gBACd,UAAU,EAAE,WAAW;aACxB,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gBACjB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACrB,MAAM,KAAK,CAAC;YACd,CAAC,CAAC,CACH,CAAC;SACH;QAED,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;KAC/B;IAED,OAAO,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AACjC,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAChD,UAAsB,EACtB,cAAsB,EACtB,OAAuB;IAEvB,MAAM,WAAW,GAAG,OAAO,IAAI;QAC7B,aAAa,EAAE,OAAO,CAAC,aAAa;QACpC,mBAAmB,EAAE,OAAO,CAAC,mBAAmB,IAAI,OAAO,CAAC,UAAU;KACvE,CAAC;IACF,MAAM,SAAS,GAAyB,MAAM,UAAU,CAAC,kBAAkB,CACzE,cAAc,EACd,WAAW,CACZ,CAAC;IACF,MAAM,MAAM,GAAG,CACb,MAAM,UAAU,CAAC,kBAAkB,CACjC,SAAgB,EAChB,OAAO,CAAC,UAAU,IAAI,KAAK,CAC5B,CACF,CAAC,KAAK,CAAC;IAER,IAAI,MAAM,CAAC,GAAG,EAAE;QACd,MAAM,IAAI,KAAK,CACb,mBAAmB,SAAS,YAAY,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAClE,CAAC;KACH;IAED,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport {\n  ConfirmOptions,\n  Connection,\n  Keypair,\n  PublicKey,\n  TransactionInstruction,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport {\n  packInstructions,\n  signTransactions,\n} from \"@switchboard-xyz/switchboard-v2\";\n\nexport async function packAndSend(\n  program: anchor.Program,\n  ixnsBatches: (TransactionInstruction | TransactionInstruction[])[][],\n  signers: Keypair[],\n  feePayer: PublicKey\n): Promise<TransactionSignature[]> {\n  const signatures: Promise<TransactionSignature>[] = [];\n\n  for await (const batch of ixnsBatches) {\n    const { blockhash } =\n      await program.provider.connection.getLatestBlockhash();\n\n    const packedTransactions = packInstructions(batch, feePayer, blockhash);\n    const signedTransactions = signTransactions(packedTransactions, signers);\n    const signedTxs = await (\n      program.provider as anchor.AnchorProvider\n    ).wallet.signAllTransactions(signedTransactions);\n\n    for (let k = 0; k < packedTransactions.length; k += 1) {\n      const tx = signedTxs[k]!;\n      const rawTx = tx.serialize();\n      signatures.push(\n        sendAndConfirmRawTransaction(program.provider.connection, rawTx, {\n          maxRetries: 10,\n          commitment: \"processed\",\n        }).catch((error) => {\n          console.error(error);\n          throw error;\n        })\n      );\n    }\n\n    await Promise.all(signatures);\n  }\n\n  return Promise.all(signatures);\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options: ConfirmOptions\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n  const signature: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions\n  );\n  const status = (\n    await connection.confirmTransaction(\n      signature as any,\n      options.commitment || \"max\"\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`\n    );\n  }\n\n  return signature;\n}\n"]}