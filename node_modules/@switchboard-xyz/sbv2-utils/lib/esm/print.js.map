{"version":3,"file":"print.js","sourceRoot":"","sources":["../../src/print.ts"],"names":[],"mappings":"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","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport { AccountMeta, PublicKey, TokenAmount } from \"@solana/web3.js\";\nimport {\n  AggregatorAccount,\n  BufferRelayerAccount,\n  CrankAccount,\n  CrankRow,\n  JobAccount,\n  LeaseAccount,\n  OracleAccount,\n  OracleJob,\n  OracleQueueAccount,\n  PermissionAccount,\n  ProgramStateAccount,\n  SwitchboardDecimal,\n  SwitchboardPermissionValue,\n  VrfAccount,\n} from \"@switchboard-xyz/switchboard-v2\";\nimport Big from \"big.js\";\nimport chalk from \"chalk\";\nimport { getIdlAddress, getProgramDataAddress } from \"./anchor.js\";\nimport { anchorBNtoDateTimeString } from \"./date.js\";\nimport type { SwitchboardAccountType } from \"./switchboard.js\";\n\nexport const chalkString = (\n  label: string,\n  value: string | number | boolean | PublicKey | Big | anchor.BN,\n  padding = 16\n): string => {\n  let valueString = \"\";\n  if (typeof value === \"string\") {\n    valueString = value;\n  } else if (typeof value === \"number\") {\n    valueString = value.toString();\n  } else if (typeof value === \"boolean\") {\n    valueString = value.toString();\n  } else if (value instanceof PublicKey) {\n    if (PublicKey.default.equals(value)) {\n      valueString = \"N/A\";\n    } else {\n      valueString = value.toString();\n    }\n  } else if (value !== undefined) {\n    valueString = value.toString();\n  }\n  return `${chalk.blue(label.padEnd(padding, \" \"))}${chalk.yellow(\n    valueString\n  )}`;\n};\n\n// JSON.stringify: Object => String\nexport const pubKeyConverter = (key: any, value: any): any => {\n  if (value instanceof PublicKey || key.toLowerCase().endsWith(\"publickey\")) {\n    return value.toString() ?? \"\";\n  }\n  if (value instanceof Uint8Array) {\n    return `[${value.toString()}]`;\n  }\n  if (value instanceof anchor.BN) {\n    return value.toString();\n  }\n  if (value instanceof Big) {\n    return value.toString();\n  }\n  if (value instanceof SwitchboardDecimal) {\n    return new Big(value.mantissa.toString())\n      .div(new Big(10).pow(value.scale))\n      .toString();\n  }\n  return value;\n};\n\nexport const tokenAmountString = (value: TokenAmount): string => {\n  return `${value.uiAmountString ?? \"\"} (${value.amount})`;\n};\n\n/* eslint-disable no-control-regex */\nexport const buffer2string = (buf: Buffer | string | ArrayBuffer): string => {\n  return Buffer.from(buf as any)\n    .toString(\"utf8\")\n    .replace(/\\u0000/g, \"\"); // removes padding from onchain fixed sized buffers\n};\n\nexport const toPermissionString = (\n  permission: SwitchboardPermissionValue\n): string => {\n  switch (permission) {\n    case SwitchboardPermissionValue.PERMIT_ORACLE_HEARTBEAT:\n      return \"PERMIT_ORACLE_HEARTBEAT\";\n    case SwitchboardPermissionValue.PERMIT_ORACLE_QUEUE_USAGE:\n      return \"PERMIT_ORACLE_QUEUE_USAGE\";\n    case SwitchboardPermissionValue.PERMIT_VRF_REQUESTS:\n      return \"PERMIT_VRF_REQUESTS\";\n    default:\n      return \"NONE\";\n  }\n};\n\nexport type VrfStatusString =\n  | \"\"\n  | \"StatusNone\"\n  | \"StatusRequesting\"\n  | \"StatusVerifying\"\n  | \"StatusVerified\"\n  | \"StatusCallbackSuccess\"\n  | \"StatusVerifyFailure\";\n\nexport const toVrfStatusString = (\n  status: Record<string, unknown>\n): VrfStatusString => {\n  try {\n    if (\"statusNone\" in status) {\n      return \"StatusNone\";\n    }\n    if (\"statusRequesting\" in status) {\n      return \"StatusRequesting\";\n    }\n    if (\"statusVerifying\" in status) {\n      return \"StatusVerifying\";\n    }\n    if (\"statusVerified\" in status) {\n      return \"StatusVerified\";\n    }\n    if (\"statusCallbackSuccess\" in status) {\n      return \"StatusCallbackSuccess\";\n    }\n    if (\"statusVerifyFailure\" in status) {\n      return \"StatusVerifyFailure\";\n    }\n  } catch {}\n  return \"\";\n};\n\nexport async function prettyPrintProgramState(\n  programState: ProgramStateAccount,\n  accountData?: any,\n  printIdlAddress = false,\n  printDataAddress = false,\n  SPACING = 24\n): Promise<string> {\n  const data = accountData ?? (await programState.loadData());\n\n  let outputString = \"\";\n  outputString += chalk.underline(\n    chalkString(\"## SbState\", programState.publicKey, SPACING) + \"\\r\\n\"\n  );\n  outputString += chalkString(\"authority\", data.authority, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"tokenMint\", data.tokenMint, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"tokenVault\", data.tokenVault, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"daoMint\", data.daoMint, SPACING);\n\n  if (printIdlAddress) {\n    const idlAddress = await getIdlAddress(programState.program.programId);\n    outputString += \"\\r\\n\" + chalkString(\"idlAddress\", idlAddress, SPACING);\n  }\n  if (printDataAddress) {\n    const dataAddress = getProgramDataAddress(programState.program.programId);\n    outputString +=\n      \"\\r\\n\" + chalkString(\"programDataAddress\", dataAddress, SPACING);\n  }\n\n  return outputString;\n}\n\nexport async function prettyPrintOracle(\n  oracleAccount: OracleAccount,\n  accountData?: any,\n  printPermissions = false,\n  SPACING = 24\n): Promise<string> {\n  const data = accountData ?? (await oracleAccount.loadData());\n  const oracleTokenAmount =\n    await oracleAccount.program.provider.connection.getTokenAccountBalance(\n      data.tokenAccount\n    );\n\n  let outputString = \"\";\n\n  outputString += chalk.underline(\n    chalkString(\"## Oracle\", oracleAccount.publicKey, SPACING) + \"\\r\\n\"\n  );\n  outputString +=\n    chalkString(\"name\", buffer2string(data.name as any), SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"metadata\", buffer2string(data.metadata as any), SPACING) +\n    \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"balance\",\n      tokenAmountString(oracleTokenAmount.value),\n      SPACING\n    ) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"oracleAuthority\", data.oracleAuthority, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"tokenAccount\", data.tokenAccount, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"queuePubkey\", data.queuePubkey, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"lastHeartbeat\",\n      anchorBNtoDateTimeString(data.lastHeartbeat),\n      SPACING\n    ) + \"\\r\\n\";\n  outputString += chalkString(\"numInUse\", data.numInUse, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\n    \"metrics\",\n    JSON.stringify(data.metrics, undefined, 2),\n    SPACING\n  );\n\n  if (printPermissions) {\n    let permissionAccount: PermissionAccount;\n    try {\n      const queueAccount = new OracleQueueAccount({\n        program: oracleAccount.program,\n        publicKey: data.queuePubkey,\n      });\n      const queue = await queueAccount.loadData();\n      [permissionAccount] = PermissionAccount.fromSeed(\n        oracleAccount.program,\n        queue.authority,\n        queueAccount.publicKey,\n        oracleAccount.publicKey\n      );\n      const permissionData = await permissionAccount.loadData();\n      outputString +=\n        \"\\r\\n\" +\n        (await prettyPrintPermissions(permissionAccount, permissionData));\n    } catch {\n      outputString += `\\r\\nFailed to load permission account. Has it been created yet?`;\n    }\n  }\n\n  return outputString;\n}\n\nexport async function prettyPrintPermissions(\n  permissionAccount: PermissionAccount,\n  accountData?: any,\n  SPACING = 24\n): Promise<string> {\n  const data = accountData ?? (await permissionAccount.loadData());\n\n  let outputString = \"\";\n\n  outputString += chalk.underline(\n    chalkString(\"## Permission\", permissionAccount.publicKey, SPACING) + \"\\r\\n\"\n  );\n  outputString += chalkString(\"authority\", data.authority, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"permissions\", toPermissionString(data.permissions), SPACING) +\n    \"\\r\\n\";\n  outputString += chalkString(\"granter\", data.granter, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"grantee\", data.grantee, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\n    \"expiration\",\n    anchorBNtoDateTimeString(data.expiration),\n    SPACING\n  );\n  return outputString;\n}\n\nexport async function prettyPrintQueue(\n  queueAccount: OracleQueueAccount,\n  accountData?: any,\n  printOracles = false,\n  SPACING = 30\n): Promise<string> {\n  const data = accountData ?? (await queueAccount.loadData());\n\n  const varianceToleranceMultiplier = SwitchboardDecimal.from(\n    data.varianceToleranceMultiplier\n  ).toBig();\n\n  let outputString = \"\";\n\n  outputString += chalk.underline(\n    chalkString(\"## Queue\", queueAccount.publicKey, SPACING) + \"\\r\\n\"\n  );\n  outputString +=\n    chalkString(\"name\", buffer2string(data.name as any), SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"metadata\", buffer2string(data.metadata as any), SPACING) +\n    \"\\r\\n\";\n  outputString +=\n    chalkString(\"oracleBuffer\", data.dataBuffer, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"authority\", data.authority, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"oracleTimeout\", data.oracleTimeout, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"reward\", data.reward, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"minStake\", data.minStake, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"slashingEnabled\", data.slashingEnabled, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"consecutiveFeedFailureLimit\",\n      data.consecutiveFeedFailureLimit.toString(),\n      SPACING\n    ) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"consecutiveOracleFailureLimit\",\n      data.consecutiveOracleFailureLimit.toString(),\n      SPACING\n    ) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"varianceToleranceMultiplier\",\n      varianceToleranceMultiplier,\n      SPACING\n    ) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"feedProbationPeriod\",\n      data.feedProbationPeriod.toString(),\n      SPACING\n    ) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"unpermissionedFeedsEnabled\",\n      data.unpermissionedFeedsEnabled.toString(),\n      SPACING\n    ) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"unpermissionedVrfEnabled\",\n      data.unpermissionedVrfEnabled.toString(),\n      SPACING\n    ) + \"\\r\\n\";\n  outputString += chalkString(\n    \"enableBufferRelayers\",\n    data.enableBufferRelayers?.toString() ?? \"\",\n    SPACING\n  );\n\n  if (printOracles && data.queue) {\n    outputString += chalk.underline(\n      chalkString(\"\\r\\n## Oracles\", \" \".repeat(32), SPACING) + \"\\r\\n\"\n    );\n    outputString += (data.queue as PublicKey[])\n      .filter((pubkey) => !PublicKey.default.equals(pubkey))\n      .map((pubkey) => pubkey.toString())\n      .join(\"\\n\");\n\n    // (data.queue as PublicKey[]).forEach(\n    //   (row, index) =>\n    //     (outputString +=\n    //       chalkString(`# ${index + 1},`, row.toString(), SPACING) + \"\\r\\n\")\n    // );\n  }\n\n  return outputString;\n}\n\nexport async function prettyPrintLease(\n  leaseAccount: LeaseAccount,\n  accountData?: any,\n  SPACING = 24\n): Promise<string> {\n  const data = accountData ?? (await leaseAccount.loadData());\n\n  const escrowTokenAmount =\n    await leaseAccount.program.provider.connection.getTokenAccountBalance(\n      data.escrow\n    );\n  const balance = Number.parseInt(escrowTokenAmount.value.amount, 10);\n\n  let outputString = \"\";\n\n  outputString += chalk.underline(\n    chalkString(\"## Lease\", leaseAccount.publicKey, SPACING) + \"\\r\\n\"\n  );\n  outputString += chalkString(\"escrow\", data.escrow, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"escrowBalance\",\n      tokenAmountString(escrowTokenAmount.value),\n      SPACING\n    ) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"withdrawAuthority\", data.withdrawAuthority, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"queue\", data.queue, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"aggregator\", data.aggregator, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"isActive\", data.isActive, SPACING);\n\n  return outputString;\n}\n\nexport async function prettyPrintJob(\n  jobAccount: JobAccount,\n  accountData?: any,\n  SPACING = 24\n): Promise<string> {\n  const data = accountData ?? (await jobAccount.loadData());\n\n  let outputString = \"\";\n\n  outputString += chalk.underline(\n    chalkString(\"## Job\", jobAccount.publicKey, SPACING) + \"\\r\\n\"\n  );\n  outputString +=\n    chalkString(\"name\", buffer2string(data.name as any), SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"metadata\", buffer2string(data.metadata as any), SPACING) +\n    \"\\r\\n\";\n  outputString += chalkString(\"authority\", data.authority, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"expiration\", data.expiration, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\n    \"tasks\",\n    JSON.stringify(OracleJob.decodeDelimited(data.data).tasks, undefined, 2),\n    SPACING\n  );\n\n  return outputString;\n}\n\n// TODO: Add rest of fields\nexport async function prettyPrintAggregator(\n  aggregatorAccount: AggregatorAccount,\n  accountData?: any,\n  printPermissions = false,\n  printLease = false,\n  printJobs = false,\n  SPACING = 24\n): Promise<string> {\n  const data = accountData ?? (await aggregatorAccount.loadData());\n\n  const result = SwitchboardDecimal.from(data.latestConfirmedRound.result)\n    .toBig()\n    .toString();\n\n  const resultTimestamp = anchorBNtoDateTimeString(\n    data.latestConfirmedRound.roundOpenTimestamp ?? new anchor.BN(0)\n  );\n\n  const varianceThreshold = parseFloat(\n    SwitchboardDecimal.from(data.varianceThreshold).toBig().toString()\n  ).toFixed(2);\n\n  let outputString = \"\";\n  outputString += chalk.underline(\n    chalkString(\n      \"## Aggregator\",\n      aggregatorAccount.publicKey ?? PublicKey.default,\n      SPACING\n    ) + \"\\r\\n\"\n  );\n\n  outputString +=\n    chalkString(\n      \"latestResult\",\n      `${result} (${resultTimestamp ?? \"\"})`,\n      SPACING\n    ) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"name\", buffer2string(data.name as any), SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"metadata\", buffer2string(data.metadata as any), SPACING) +\n    \"\\r\\n\";\n  outputString += chalkString(\"authority\", data.authority, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"queuePubkey\", data.queuePubkey, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"crankPubkey\", data.crankPubkey, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"historyBufferPublicKey\", data.historyBuffer, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"authorWallet\",\n      data.authorWallet ?? PublicKey.default,\n      SPACING\n    ) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"minUpdateDelaySeconds\", data.minUpdateDelaySeconds, SPACING) +\n    \"\\r\\n\";\n  outputString +=\n    chalkString(\"jobPubkeysSize\", data.jobPubkeysSize, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"minJobResults\", data.minJobResults, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"oracleRequestBatchSize\",\n      data.oracleRequestBatchSize,\n      SPACING\n    ) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"minOracleResults\", data.minOracleResults, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"varianceThreshold\", `${varianceThreshold} %`, SPACING) +\n    \"\\r\\n\";\n  outputString +=\n    chalkString(\"forceReportPeriod\", data.forceReportPeriod, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"isLocked\", data.isLocked, SPACING);\n\n  if (printPermissions) {\n    let permissionAccount: PermissionAccount;\n    try {\n      const queueAccount = new OracleQueueAccount({\n        program: aggregatorAccount.program,\n        publicKey: data.queuePubkey,\n      });\n      const queue = await queueAccount.loadData();\n      [permissionAccount] = PermissionAccount.fromSeed(\n        aggregatorAccount.program,\n        queue.authority,\n        queueAccount.publicKey,\n        aggregatorAccount.publicKey ?? PublicKey.default\n      );\n      const permissionData = await permissionAccount.loadData();\n      outputString +=\n        \"\\r\\n\" +\n        (await prettyPrintPermissions(permissionAccount, permissionData));\n    } catch {\n      outputString += `\\r\\nFailed to load permission account. Has it been created yet?`;\n    }\n  }\n\n  if (printLease) {\n    let leaseAccount: LeaseAccount;\n    try {\n      const queueAccount = new OracleQueueAccount({\n        program: aggregatorAccount.program,\n        publicKey: data.queuePubkey,\n      });\n      const { authority } = await queueAccount.loadData();\n      [leaseAccount] = LeaseAccount.fromSeed(\n        aggregatorAccount.program,\n        queueAccount,\n        aggregatorAccount\n      );\n      const leaseData = await leaseAccount.loadData();\n      outputString +=\n        \"\\r\\n\" + (await prettyPrintLease(leaseAccount, leaseData));\n    } catch {\n      outputString += `\\r\\nFailed to load lease account. Has it been created yet?`;\n    }\n  }\n\n  if (printJobs) {\n    const jobKeys: PublicKey[] = (data.jobPubkeysData as PublicKey[]).filter(\n      (pubkey) => !PublicKey.default.equals(pubkey)\n    );\n    for await (const jobKey of jobKeys) {\n      const jobAccount = new JobAccount({\n        program: aggregatorAccount.program,\n        publicKey: jobKey,\n      });\n      outputString += \"\\r\\n\" + (await prettyPrintJob(jobAccount));\n    }\n  }\n\n  return outputString;\n}\n\nexport async function prettyPrintVrf(\n  vrfAccount: VrfAccount,\n  accountData?: any,\n  printPermissions = false,\n  SPACING = 24\n): Promise<string> {\n  const data = accountData ?? (await vrfAccount.loadData());\n  const escrowTokenAmount =\n    await vrfAccount.program.provider.connection.getTokenAccountBalance(\n      data.escrow\n    );\n\n  let outputString = \"\";\n  outputString += chalk.underline(\n    chalkString(\"## VRF\", vrfAccount.publicKey, SPACING) + \"\\r\\n\"\n  );\n  outputString += chalkString(\"authority\", data.authority, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"oracleQueue\", data.oracleQueue, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"escrow\", data.escrow, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"escrowBalance\",\n      tokenAmountString(escrowTokenAmount.value),\n      SPACING\n    ) + \"\\r\\n\";\n\n  outputString += chalkString(\"batchSize\", data.batchSize, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"callback\",\n      JSON.stringify(\n        {\n          ...data.callback,\n          accounts: data.callback.accounts.filter(\n            (a: AccountMeta) => !a.pubkey.equals(PublicKey.default)\n          ),\n          ixData: `[${data.callback.ixData\n            .slice(0, data.callback.ixDataLen)\n            .map((n) => n.toString())\n            .join(\",\")}]`,\n        },\n        undefined,\n        2\n      ),\n      SPACING\n    ) + \"\\r\\n\";\n  outputString += chalkString(\"counter\", data.counter, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"status\", toVrfStatusString(data.status), SPACING) + \"\\r\\n\";\n  outputString += chalkString(\n    \"latestResult\",\n    JSON.stringify(\n      {\n        status: toVrfStatusString(data.builders[0]?.status) ?? \"\",\n        verified: data.builders[0]?.verified ?? \"\",\n        txRemaining: data.builders[0]?.txRemaining ?? \"\",\n        producer: data.builders[0]?.producer.toString() ?? \"\",\n        reprProof: data.builders[0].reprProof\n          ? `[${data.builders[0].reprProof.map((value) => value.toString())}]`\n          : \"\",\n        reprProofHex: data.builders[0].reprProof\n          ? Buffer.from(data.builders[0].reprProof).toString(\"hex\")\n          : \"\",\n        currentRound: {\n          result: data.currentRound.result\n            ? `[${data.currentRound.result.map((value) => value.toString())}]`\n            : \"\",\n          alpha: data.currentRound.alpha\n            ? `[${data.currentRound.alpha.map((value) => value.toString())}]`\n            : \"\",\n          alphaHex: Buffer.from(data.currentRound.alpha).toString(\"hex\"),\n          requestSlot: data.currentRound?.requestSlot?.toString() ?? \"\",\n          requestTimestamp: anchorBNtoDateTimeString(\n            data.currentRound.requestTimestamp\n          ),\n          numVerified: data.currentRound.numVerified.toString(),\n        },\n      },\n      undefined,\n      2\n    ),\n    SPACING\n  );\n\n  if (printPermissions) {\n    let permissionAccount: PermissionAccount;\n    try {\n      const queueAccount = new OracleQueueAccount({\n        program: vrfAccount.program,\n        publicKey: data.oracleQueue,\n      });\n      const queue = await queueAccount.loadData();\n      [permissionAccount] = PermissionAccount.fromSeed(\n        vrfAccount.program,\n        queue.authority,\n        queueAccount.publicKey,\n        vrfAccount.publicKey\n      );\n      const permissionData = await permissionAccount.loadData();\n      outputString +=\n        \"\\r\\n\" +\n        (await prettyPrintPermissions(permissionAccount, permissionData));\n    } catch {\n      outputString += `\\r\\nFailed to load permission account. Has it been created yet?`;\n    }\n  }\n\n  return outputString;\n}\n\nexport async function prettyPrintCrank(\n  crankAccount: CrankAccount,\n  accountData?: any,\n  printRows = false,\n  SPACING = 24\n): Promise<string> {\n  const data = accountData ?? (await crankAccount.loadData());\n\n  let outputString = \"\";\n\n  outputString += chalk.underline(\n    chalkString(\"## Crank\", crankAccount.publicKey, SPACING) + \"\\r\\n\"\n  );\n  outputString +=\n    chalkString(\"name\", buffer2string(data.name as any), SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"metadata\", buffer2string(data.metadata as any), SPACING) +\n    \"\\r\\n\";\n  outputString +=\n    chalkString(\"queuePubkey\", data.queuePubkey, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"dataBuffer\", data.dataBuffer, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"Size\",\n      `${(data.pqData as CrankRow[]).length\n        .toString()\n        .padStart(4)} / ${data.maxRows.toString().padEnd(4)}`,\n      SPACING\n    ) + \"\\r\\n\";\n\n  if (printRows) {\n    outputString += chalk.underline(\n      chalkString(\"## Crank Buffer\", data.dataBuffer, SPACING) + \"\\r\\n\"\n    );\n    const rowStrings = data.pqData.map((row) => {\n      return `${anchorBNtoDateTimeString(row.nextTimestamp as anchor.BN).padEnd(\n        16\n      )} - ${(row.pubkey as PublicKey).toString()}`;\n    });\n    outputString = outputString.concat(...rowStrings.join(\"\\n\"));\n\n    // const feedNames: string[] = [];\n    // for await (const row of data.pqData) {\n    //   const agg = new AggregatorAccount({\n    //     program: crankAccount.program,\n    //     publicKey: row.pubkey,\n    //   });\n    //   const aggData = await agg.loadData();\n    //   const aggName = buffer2string(aggData.name as any);\n    //   feedNames.push(`${(row.pubkey as PublicKey).toString()} # ${aggName}`);\n    // }\n\n    // outputString = outputString.concat(\"\\n\", ...feedNames.join(\"\\n\"));\n  }\n  return outputString;\n}\n\nexport async function prettyPrintBufferRelayer(\n  bufferRelayerAccount: BufferRelayerAccount,\n  accountData?: any,\n  printJob = false,\n  SPACING = 24\n): Promise<string> {\n  const data = accountData ?? (await bufferRelayerAccount.loadData());\n\n  let outputString = \"\";\n\n  outputString += chalk.underline(\n    chalkString(\"## BufferRelayer\", bufferRelayerAccount.publicKey, SPACING) +\n      \"\\r\\n\"\n  );\n  outputString +=\n    chalkString(\"name\", buffer2string(data.name as any), SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"queuePubkey\", data.queuePubkey, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"escrow\", data.escrow, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"authority\", data.authority, SPACING) + \"\\r\\n\";\n  outputString += chalkString(\"jobPubkey\", data.jobPubkey, SPACING) + \"\\r\\n\";\n  outputString +=\n    chalkString(\"minUpdateDelaySeconds\", data.minUpdateDelaySeconds, SPACING) +\n    \"\\r\\n\";\n\n  const result = data.result as number[];\n  outputString +=\n    chalkString(\n      \"result\",\n      `[${result.map((r) => r.toString()).join(\",\")}]`,\n      SPACING\n    ) + \"\\r\\n\";\n  outputString +=\n    chalkString(\n      \"currentRound\",\n      JSON.stringify(data.currentRound, pubKeyConverter, 2),\n      SPACING\n    ) + \"\\r\\n\";\n\n  if (printJob) {\n    const jobAccount = new JobAccount({\n      program: bufferRelayerAccount.program,\n      publicKey: data.jobPubkey,\n    });\n    outputString += \"\\r\\n\" + (await prettyPrintJob(jobAccount));\n  }\n\n  return outputString;\n}\n\nexport async function prettyPrintSwitchboardAccount(\n  program: anchor.Program,\n  publicKey: PublicKey,\n  accountType: SwitchboardAccountType\n): Promise<string> {\n  switch (accountType) {\n    case \"JobAccountData\": {\n      const job = new JobAccount({ program, publicKey });\n      return prettyPrintJob(job);\n    }\n    case \"AggregatorAccountData\": {\n      const aggregator = new AggregatorAccount({ program, publicKey });\n      return prettyPrintAggregator(aggregator, undefined);\n    }\n    case \"OracleAccountData\": {\n      const oracle = new OracleAccount({ program, publicKey });\n      return prettyPrintOracle(oracle, undefined);\n    }\n    case \"PermissionAccountData\": {\n      const permission = new PermissionAccount({ program, publicKey });\n      return prettyPrintPermissions(permission, undefined);\n    }\n    case \"LeaseAccountData\": {\n      const lease = new LeaseAccount({ program, publicKey });\n      return prettyPrintLease(lease, undefined);\n    }\n    case \"OracleQueueAccountData\": {\n      const queue = new OracleQueueAccount({ program, publicKey });\n      return prettyPrintQueue(queue, undefined);\n    }\n    case \"CrankAccountData\": {\n      const crank = new CrankAccount({ program, publicKey });\n      return prettyPrintCrank(crank, undefined);\n    }\n    case \"SbState\":\n    case \"ProgramStateAccountData\": {\n      const [programState] = ProgramStateAccount.fromSeed(program);\n      return prettyPrintProgramState(programState);\n    }\n    case \"VrfAccountData\": {\n      const vrfAccount = new VrfAccount({ program, publicKey });\n      return prettyPrintVrf(vrfAccount, undefined);\n    }\n    case \"BufferRelayerAccountData\": {\n      const bufferRelayerAccount = new BufferRelayerAccount({\n        program,\n        publicKey,\n      });\n      return prettyPrintBufferRelayer(bufferRelayerAccount, undefined);\n    }\n    case \"BUFFERxx\": {\n      return `Found buffer account but dont know which one`;\n    }\n  }\n}\n"]}