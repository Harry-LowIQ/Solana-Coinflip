import { packInstructions, signTransactions, } from "@switchboard-xyz/switchboard-v2";
export async function packAndSend(program, ixnsBatches, signers, feePayer) {
    const signatures = [];
    for await (const batch of ixnsBatches) {
        const { blockhash } = await program.provider.connection.getLatestBlockhash();
        const packedTransactions = packInstructions(batch, feePayer, blockhash);
        const signedTransactions = signTransactions(packedTransactions, signers);
        const signedTxs = await program.provider.wallet.signAllTransactions(signedTransactions);
        for (let k = 0; k < packedTransactions.length; k += 1) {
            const tx = signedTxs[k];
            const rawTx = tx.serialize();
            signatures.push(sendAndConfirmRawTransaction(program.provider.connection, rawTx, {
                maxRetries: 10,
                commitment: "processed",
            }).catch((error) => {
                console.error(error);
                throw error;
            }));
        }
        await Promise.all(signatures);
    }
    return Promise.all(signatures);
}
/**
 * Send and confirm a raw transaction
 *
 * If `commitment` option is not specified, defaults to 'max' commitment.
 */
export async function sendAndConfirmRawTransaction(connection, rawTransaction, options) {
    const sendOptions = options && {
        skipPreflight: options.skipPreflight,
        preflightCommitment: options.preflightCommitment || options.commitment,
    };
    const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);
    const status = (await connection.confirmTransaction(signature, options.commitment || "max")).value;
    if (status.err) {
        throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);
    }
    return signature;
}
//# sourceMappingURL=transaction.js.map