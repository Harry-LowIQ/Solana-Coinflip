{"version":3,"file":"token.js","sourceRoot":"","sources":["../../src/token.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as anchor from \"@project-serum/anchor\";\nimport * as spl from \"@solana/spl-token-v2\";\nimport {\n  Connection,\n  Keypair,\n  PublicKey,\n  sendAndConfirmTransaction,\n  SystemProgram,\n  Transaction,\n} from \"@solana/web3.js\";\nimport {\n  ProgramStateAccount,\n  programWallet,\n} from \"@switchboard-xyz/switchboard-v2\";\n\nexport const getOrCreateSwitchboardTokenAccount = async (\n  program: anchor.Program,\n  switchboardMint?: spl.Mint,\n  payer = programWallet(program)\n): Promise<PublicKey> => {\n  const getAssociatedAddress = async (mint: spl.Mint): Promise<PublicKey> => {\n    const tokenAccount = await spl.getOrCreateAssociatedTokenAccount(\n      program.provider.connection,\n      payer,\n      mint.address,\n      payer.publicKey,\n      undefined,\n      undefined,\n      undefined,\n      spl.TOKEN_PROGRAM_ID,\n      spl.ASSOCIATED_TOKEN_PROGRAM_ID\n    );\n    return tokenAccount.address;\n  };\n\n  let mint = switchboardMint;\n  if (mint) {\n    return getAssociatedAddress(mint);\n  }\n  const [programState] = ProgramStateAccount.fromSeed(program);\n  mint = await programState.getTokenMint();\n  if (mint) {\n    return getAssociatedAddress(mint);\n  }\n\n  throw new Error(`failed to get associated token account`);\n};\n\nexport async function transferWrappedSol(\n  connection: Connection,\n  payerKeypair: Keypair,\n  amount: number\n): Promise<number> {\n  const payerBalance = await connection.getBalance(payerKeypair.publicKey);\n  if (payerBalance < amount) {\n    throw new Error(\n      `TransferWrappedSolError: Payer has insufficient funds, need ${amount}, have ${payerBalance}`\n    );\n  }\n  const payerAssociatedWallet = (\n    await spl.getOrCreateAssociatedTokenAccount(\n      connection,\n      payerKeypair,\n      spl.NATIVE_MINT,\n      payerKeypair.publicKey\n    )\n  ).address;\n\n  // create new account to temporarily hold wrapped funds\n  const ephemeralAccount = Keypair.generate();\n  const ephemeralWallet = await spl.getAssociatedTokenAddress(\n    spl.NATIVE_MINT,\n    ephemeralAccount.publicKey,\n    false\n  );\n\n  const tx = new Transaction().add(\n    spl.createAssociatedTokenAccountInstruction(\n      payerKeypair.publicKey,\n      ephemeralWallet,\n      ephemeralAccount.publicKey,\n      spl.NATIVE_MINT\n    ),\n    SystemProgram.transfer({\n      fromPubkey: payerKeypair.publicKey,\n      toPubkey: ephemeralWallet,\n      lamports: amount,\n    }),\n    spl.createSyncNativeInstruction(ephemeralWallet),\n    spl.createTransferInstruction(\n      ephemeralWallet,\n      payerAssociatedWallet,\n      ephemeralAccount.publicKey,\n      amount,\n      [payerKeypair, ephemeralAccount]\n    ),\n    spl.createCloseAccountInstruction(\n      ephemeralWallet,\n      payerKeypair.publicKey,\n      ephemeralAccount.publicKey,\n      [payerKeypair, ephemeralAccount]\n    )\n  );\n\n  const txn = await sendAndConfirmTransaction(connection, tx, [\n    payerKeypair,\n    ephemeralAccount,\n  ]);\n\n  const finalBalance = await spl.getAccount(connection, payerAssociatedWallet);\n  return Number(finalBalance.amount);\n}\n"]}