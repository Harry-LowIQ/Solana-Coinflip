import * as anchor from "@project-serum/anchor";
import { PublicKey } from "@solana/web3.js";
import { promiseWithTimeout } from "./async.js";
export async function awaitOpenRound(vrfAccount, counter, timeout = 30) {
    // call open round and wait for new value
    const accountsCoder = new anchor.BorshAccountsCoder(vrfAccount.program.idl);
    let accountWs;
    const awaitUpdatePromise = new Promise((resolve) => {
        var _a;
        accountWs = vrfAccount.program.provider.connection.onAccountChange((_a = vrfAccount === null || vrfAccount === void 0 ? void 0 : vrfAccount.publicKey) !== null && _a !== void 0 ? _a : PublicKey.default, async (accountInfo) => {
            const vrf = accountsCoder.decode("VrfAccountData", accountInfo.data);
            if (!counter.eq(vrf.counter)) {
                return;
            }
            if (vrf.result.every((val) => val === 0)) {
                return;
            }
            resolve(vrf.result);
        });
    });
    const updatedValuePromise = promiseWithTimeout(timeout * 1000, awaitUpdatePromise, new Error(`vrf failed to update in ${timeout} seconds`)).finally(() => {
        if (accountWs) {
            vrfAccount.program.provider.connection.removeAccountChangeListener(accountWs);
        }
    });
    const result = await updatedValuePromise;
    if (!result) {
        throw new Error(`failed to update VRF`);
    }
    return result;
}
//# sourceMappingURL=vrf.js.map