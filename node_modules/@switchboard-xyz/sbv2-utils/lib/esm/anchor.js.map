{"version":3,"file":"anchor.js","sourceRoot":"","sources":["../../src/anchor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\n/*eslint-disable import/extensions */\nimport { findProgramAddressSync } from \"@project-serum/anchor/dist/cjs/utils/pubkey.js\";\nimport {\n  Cluster,\n  clusterApiUrl,\n  Connection,\n  Keypair,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { AnchorWallet } from \"@switchboard-xyz/switchboard-v2\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport toml from \"toml\";\nimport { DEFAULT_KEYPAIR } from \"./const.js\";\nimport { NoPayerKeypairProvided } from \"./errors.js\";\n\nexport function programWallet(program: anchor.Program): Keypair {\n  return ((program.provider as anchor.AnchorProvider).wallet as AnchorWallet)\n    .payer;\n}\n\n/** Return the default anchor.AnchorProvider that will fail if a transaction is sent. This is used to avoid accidentally loading a\n * valid keypair from the anchor environment defaults.\n * @param connection a Solana connection object for a given Solana cluster and endpoint\n * @return the anchor.AnchorProvider object\n * */\nexport const getDefaultProvider = (\n  connection: Connection\n): anchor.AnchorProvider => {\n  return new anchor.AnchorProvider(\n    connection,\n    new AnchorWallet(DEFAULT_KEYPAIR),\n    anchor.AnchorProvider.defaultOptions()\n  );\n};\n\n/** Get the program data address for a given programId\n * @param programId the programId for a given on-chain program\n * @return the publicKey of the address holding the upgradeable program buffer\n */\nexport const getProgramDataAddress = (programId: PublicKey): PublicKey => {\n  return findProgramAddressSync(\n    [programId.toBytes()],\n    new PublicKey(\"BPFLoaderUpgradeab1e11111111111111111111111\")\n  )[0];\n};\n\n/** Get the IDL address for a given programId\n * @param programId the programId for a given on-chain program\n * @return the publicKey of the IDL address\n */\nexport const getIdlAddress = async (\n  programId: PublicKey\n): Promise<PublicKey> => {\n  const base = (await PublicKey.findProgramAddress([], programId))[0];\n  return PublicKey.createWithSeed(base, \"anchor:idl\", programId);\n};\n\nexport const programHasPayer = (program: anchor.Program): boolean => {\n  const payer = programWallet(program);\n  return !payer.publicKey.equals(DEFAULT_KEYPAIR.publicKey);\n};\n\nexport const getProgramPayer = (program: anchor.Program): Keypair => {\n  const wallet = programWallet(program);\n  if (programHasPayer(program)) {\n    return wallet;\n  }\n  throw new NoPayerKeypairProvided();\n};\n\nexport const verifyProgramHasPayer = (program: anchor.Program): void => {\n  if (programHasPayer(program)) {\n    return;\n  }\n  throw new NoPayerKeypairProvided();\n};\n\nexport function getAnchorWalletPath(parsedToml?: any): string {\n  let tomlData: any;\n  if (parsedToml) {\n    tomlData = parsedToml;\n  } else {\n    const tomlPath = path.join(process.cwd(), \"Anchor.toml\");\n    if (!fs.existsSync(tomlPath)) {\n      throw new Error(`failed to find Anchor.toml`);\n    }\n    tomlData = toml.parse(fs.readFileSync(tomlPath, \"utf8\"));\n  }\n\n  const walletPath = tomlData.provider.wallet;\n  if (!walletPath) {\n    throw new Error(`Failed to read wallet path`);\n  }\n  return walletPath;\n}\n\nexport function getAnchorCluster(parsedToml?: any): string {\n  let tomlData: any;\n  if (parsedToml) {\n    tomlData = parsedToml;\n  } else {\n    const tomlPath = path.join(process.cwd(), \"Anchor.toml\");\n    if (!fs.existsSync(tomlPath)) {\n      throw new Error(`failed to find Anchor.toml`);\n    }\n    tomlData = toml.parse(fs.readFileSync(tomlPath, \"utf8\"));\n  }\n\n  const cluster = tomlData.provider.cluster;\n  if (!cluster) {\n    throw new Error(`Failed to read Anchor.toml cluster`);\n  }\n  return cluster;\n}\n\nexport function loadPid(programKeypairPath: string): PublicKey {\n  if (!fs.existsSync(programKeypairPath)) {\n    console.log(programKeypairPath);\n    throw new Error(`Could not find keypair. Have you run 'anchor build'?`);\n  }\n  const programKeypair = Keypair.fromSecretKey(\n    new Uint8Array(JSON.parse(fs.readFileSync(programKeypairPath, \"utf8\")))\n  );\n  return programKeypair.publicKey;\n}\n\nexport function getWorkspace(\n  programName: string,\n  programPath: string\n): anchor.Program {\n  const tomlPath = path.join(programPath, \"Anchor.toml\");\n  if (!fs.existsSync(tomlPath)) {\n    throw new Error(`failed to find Anchor.toml`);\n  }\n  const tomlData = toml.parse(fs.readFileSync(tomlPath, \"utf8\"));\n\n  const cluster: Cluster | \"localnet\" = tomlData.provider.cluster;\n  const wallet = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(\n        fs.readFileSync(tomlData.provider.wallet, {\n          encoding: \"utf-8\",\n        })\n      )\n    )\n  );\n  const programKeypairPath = path.join(\n    programPath,\n    `target/deploy/${programName.replace(\"-\", \"_\")}-keypair.json`\n  );\n\n  let programId: PublicKey;\n  switch (cluster) {\n    case \"localnet\":\n      programId = new PublicKey(tomlData.programs.localnet[programName]);\n      break;\n    case \"devnet\":\n      programId = new PublicKey(tomlData.programs.devnet[programName]);\n      break;\n    case \"mainnet-beta\":\n      programId = new PublicKey(tomlData.programs.mainnet[programName]);\n      break;\n    default:\n      programId = loadPid(programKeypairPath);\n  }\n\n  const programIdlPath = path.join(\n    programPath,\n    `target/idl/${programName.replace(\"-\", \"_\")}.json`\n  );\n\n  const idl: anchor.Idl = JSON.parse(fs.readFileSync(programIdlPath, \"utf-8\"));\n  const url =\n    cluster === \"localnet\" ? \"http://localhost:8899\" : clusterApiUrl(cluster);\n  const provider = new anchor.AnchorProvider(\n    new Connection(url, { commitment: \"confirmed\" }),\n    new AnchorWallet(wallet),\n    { commitment: \"confirmed\" }\n  );\n  return new anchor.Program(idl, programId, provider);\n}\n"]}