{"version":3,"file":"nonce.js","sourceRoot":"","sources":["../../src/nonce.ts"],"names":[],"mappings":"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","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport {\n  AccountInfo,\n  NonceAccount,\n  NONCE_ACCOUNT_LENGTH,\n  PublicKey,\n  SystemProgram,\n} from \"@solana/web3.js\";\nimport type { OracleAccount } from \"@switchboard-xyz/switchboard-v2\";\nimport assert from \"assert\";\nimport crypto from \"crypto\";\n\nexport interface OracleNonceAccounts {\n  heartbeatNonce?: PublicKey;\n  unwrapStakeNonce?: PublicKey;\n  queueNonces: PublicKey[];\n}\n\nexport function getNoncePubkeyFromSeed(\n  oracleAccount: OracleAccount,\n  authority: PublicKey,\n  baseSeed: string\n): [PublicKey, string] {\n  const seed = `${baseSeed}-${oracleAccount.publicKey.toBase58()}`;\n  const seedHashBuffer = crypto.createHash(\"sha256\").update(seed).digest();\n  assert(seedHashBuffer.byteLength === 32);\n  const seedHashString = seedHashBuffer.toString(\"hex\").slice(0, 32);\n  const derivedPubkey = anchor.utils.publicKey.createWithSeedSync(\n    authority,\n    seedHashString,\n    SystemProgram.programId\n  );\n  return [derivedPubkey, seedHashString];\n}\n\nexport function nonceAccountExists(accountInfo?: AccountInfo<Buffer>): boolean {\n  if (accountInfo && accountInfo.data) {\n    const nonceAccount = decodeNonceAccount(accountInfo);\n    if (nonceAccount.nonce) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport async function getOracleHeartbeatNonceAccount(\n  oracleAccount: OracleAccount,\n  authority: PublicKey\n): Promise<PublicKey | null> {\n  const [heartbeatNoncePubkey, heartbeatNonceSeed] = getNoncePubkeyFromSeed(\n    oracleAccount,\n    authority,\n    \"OracleHeartbeat\"\n  );\n  const accountInfo =\n    await oracleAccount.program.provider.connection.getAccountInfo(\n      heartbeatNoncePubkey\n    );\n  if (nonceAccountExists(accountInfo ?? undefined)) {\n    return heartbeatNoncePubkey;\n  }\n  return null;\n}\n\nexport async function getOracleStakeUnwrapNonceAccount(\n  oracleAccount: OracleAccount,\n  authority: PublicKey\n): Promise<PublicKey | null> {\n  const [heartbeatNoncePubkey, heartbeatNonceSeed] = getNoncePubkeyFromSeed(\n    oracleAccount,\n    authority,\n    \"UnwrapStakeAccount\"\n  );\n  const accountInfo =\n    await oracleAccount.program.provider.connection.getAccountInfo(\n      heartbeatNoncePubkey\n    );\n  if (nonceAccountExists(accountInfo ?? undefined)) {\n    return heartbeatNoncePubkey;\n  }\n  return null;\n}\n\nexport async function getOracleNonceQueueAccounts(\n  oracleAccount: OracleAccount,\n  authority: PublicKey,\n  queueSize = 1000\n): Promise<PublicKey[]> {\n  // const queueBaseSeeds: string[] = Array.from(Array(queueSize).keys()).map(\n  //   (n) => `NonceQueue-${n.toString().padStart(5, \"0\")}`\n  // );\n  // const noncePubkeyWithSeeds: [PublicKey, string][] = queueBaseSeeds.map(\n  //   (seed) => getNoncePubkeyFromSeed(oracleAccount, authority, seed)\n  // );\n  // const pubkeyChunks: [PublicKey, string][][] = sliceIntoChunks(\n  //   noncePubkeyWithSeeds,\n  //   100\n  // );\n  // const nonceAccountInfos: {\n  //   accountInfo: AccountInfo<Buffer>;\n  //   pubkey: PublicKey;\n  //   baseSeed: string;\n  // }[] = (\n  //   await Promise.all(\n  //     pubkeyChunks.map(async (chunk) => {\n  //       const accountInfos =\n  //         await oracleAccount.program.provider.connection.getMultipleAccountsInfo(\n  //           chunk.map((i) => i[0])\n  //         );\n  //       return accountInfos.map((accountInfo, idx) => {\n  //         return {\n  //           accountInfo,\n  //           pubkey: chunk[idx][0],\n  //           baseSeed: chunk[idx][1],\n  //         };\n  //       });\n  //     })\n  //   )\n  // ).flat();\n\n  const queueBaseSeeds: string[] = Array.from(Array(queueSize).keys()).map(\n    (n) => `NonceQueue-${n.toString().padStart(5, \"0\")}`\n  );\n\n  // [derivedPubkey, fullSeed, baseSeed]\n  const noncePubkeyWithSeeds: {\n    pubkey: PublicKey;\n    fullSeed: string;\n    baseSeed: string;\n  }[] = queueBaseSeeds.map((baseSeed) => {\n    const [derivedPubkey, fullSeed] = getNoncePubkeyFromSeed(\n      oracleAccount,\n      authority,\n      baseSeed\n    );\n    return {\n      pubkey: derivedPubkey,\n      fullSeed,\n      baseSeed,\n    };\n  });\n\n  const pubkeyChunks: {\n    pubkey: PublicKey;\n    fullSeed: string;\n    baseSeed: string;\n  }[][] = sliceIntoChunks(noncePubkeyWithSeeds, 100);\n\n  const nonceAccountInfos: {\n    accountInfo: AccountInfo<Buffer>;\n    pubkey?: PublicKey;\n    fullSeed?: string;\n    baseSeed?: string;\n  }[] = (\n    await Promise.all(\n      pubkeyChunks.map(async (chunk, chunkIdx) => {\n        const accountInfos = (\n          await oracleAccount.program.provider.connection.getMultipleAccountsInfo(\n            chunk.map((i) => i.pubkey).filter(Boolean) as PublicKey[]\n          )\n        ).filter(Boolean) as AccountInfo<Buffer>[];\n        return accountInfos.map((accountInfo, idx) => {\n          return {\n            ...chunk[idx],\n            accountInfo,\n          };\n        });\n      })\n    )\n  ).flat();\n\n  const nonceQueuePubkeys = nonceAccountInfos\n    .map((nonce, i) => {\n      if (nonceAccountExists(nonce.accountInfo ?? undefined)) {\n        return nonce.pubkey;\n      }\n      return undefined;\n    })\n    .filter(Boolean) as PublicKey[];\n  return nonceQueuePubkeys;\n}\n\nexport async function getOracleNonceAccounts(\n  oracleAccount: OracleAccount\n): Promise<OracleNonceAccounts> {\n  const oracle = await oracleAccount.loadData();\n  const heartbeatNonce = await getOracleHeartbeatNonceAccount(\n    oracleAccount,\n    oracle.oracleAuthority\n  );\n  const unwrapStakeNonce = await getOracleStakeUnwrapNonceAccount(\n    oracleAccount,\n    oracle.oracleAuthority\n  );\n  const queueNonces = await getOracleNonceQueueAccounts(\n    oracleAccount,\n    oracle.oracleAuthority\n  );\n\n  return {\n    heartbeatNonce: heartbeatNonce ?? undefined,\n    unwrapStakeNonce: unwrapStakeNonce ?? undefined,\n    queueNonces,\n  };\n}\n\n// slice an array into chunks with a max size\nfunction sliceIntoChunks<T>(arr: Array<T>, chunkSize: number): T[][] {\n  const res: T[][] = [[]];\n  for (let i = 0; i < arr.length; i += chunkSize) {\n    const chunk = arr.slice(i, i + chunkSize);\n    res.push(chunk);\n  }\n  return res;\n}\n\nexport function decodeNonceAccount(info: AccountInfo<Buffer>): NonceAccount {\n  if (info === null) {\n    throw new Error(\"FAILED_TO_FIND_ACCOUNT\");\n  }\n  if (!info.owner.equals(SystemProgram.programId)) {\n    throw new Error(\"INVALID_ACCOUNT_OWNER\");\n  }\n  if (info.data.length != NONCE_ACCOUNT_LENGTH) {\n    throw new Error(`Invalid account size`);\n  }\n\n  const data = Buffer.from(info.data);\n  return NonceAccount.fromAccountData(data);\n}\n"]}