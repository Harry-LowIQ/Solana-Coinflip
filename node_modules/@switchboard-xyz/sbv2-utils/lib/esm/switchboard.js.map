{"version":3,"file":"switchboard.js","sourceRoot":"","sources":["../../src/switchboard.ts"],"names":[],"mappings":"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","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport { ACCOUNT_DISCRIMINATOR_SIZE } from \"@project-serum/anchor\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport {\n  AggregatorAccount,\n  BufferRelayerAccount,\n  CrankAccount,\n  JobAccount,\n  LeaseAccount,\n  OracleAccount,\n  OracleQueueAccount,\n  PermissionAccount,\n  ProgramStateAccount,\n  VrfAccount,\n} from \"@switchboard-xyz/switchboard-v2\";\nimport { InvalidSwitchboardAccount } from \"./errors.js\";\n\nexport const SWITCHBOARD_ACCOUNT_TYPES = [\n  \"JobAccountData\",\n  \"AggregatorAccountData\",\n  \"OracleAccountData\",\n  \"OracleQueueAccountData\",\n  \"PermissionAccountData\",\n  \"LeaseAccountData\",\n  \"ProgramStateAccountData\",\n  \"VrfAccountData\",\n  \"SbState\",\n  \"BUFFERxx\",\n  \"CrankAccountData\",\n  \"BufferRelayerAccountData\",\n] as const;\n\nexport type SwitchboardAccount =\n  | JobAccount\n  | AggregatorAccount\n  | OracleAccount\n  | OracleQueueAccount\n  | PermissionAccount\n  | LeaseAccount\n  | ProgramStateAccount\n  | VrfAccount\n  | CrankAccount\n  | BufferRelayerAccount;\n\nexport type SwitchboardAccountType = typeof SWITCHBOARD_ACCOUNT_TYPES[number];\n\nexport const SWITCHBOARD_DISCRIMINATOR_MAP = new Map<\n  SwitchboardAccountType,\n  Buffer\n>(\n  SWITCHBOARD_ACCOUNT_TYPES.map((accountType) => [\n    accountType,\n    anchor.BorshAccountsCoder.accountDiscriminator(accountType),\n  ])\n);\n\n// should also check if pubkey is a token account\nexport const findAccountType = async (\n  program: anchor.Program,\n  publicKey: PublicKey\n): Promise<SwitchboardAccountType> => {\n  const account = await program.provider.connection.getAccountInfo(publicKey);\n  if (!account) {\n    throw new Error(`failed to fetch account info for ${publicKey}`);\n  }\n\n  const accountDiscriminator = account.data.slice(\n    0,\n    ACCOUNT_DISCRIMINATOR_SIZE\n  );\n\n  for (const [name, discriminator] of SWITCHBOARD_DISCRIMINATOR_MAP.entries()) {\n    if (Buffer.compare(accountDiscriminator, discriminator) === 0) {\n      return name;\n    }\n  }\n\n  throw new InvalidSwitchboardAccount();\n};\n\nexport const loadSwitchboardAccount = async (\n  program: anchor.Program,\n  publicKey: PublicKey\n): Promise<[SwitchboardAccountType, SwitchboardAccount]> => {\n  const accountType = await findAccountType(program, publicKey);\n  switch (accountType) {\n    case \"JobAccountData\": {\n      return [accountType, new JobAccount({ program, publicKey })];\n    }\n    case \"AggregatorAccountData\": {\n      return [accountType, new AggregatorAccount({ program, publicKey })];\n    }\n    case \"OracleAccountData\": {\n      return [accountType, new OracleAccount({ program, publicKey })];\n    }\n    case \"PermissionAccountData\": {\n      return [accountType, new PermissionAccount({ program, publicKey })];\n    }\n    case \"LeaseAccountData\": {\n      return [accountType, new LeaseAccount({ program, publicKey })];\n    }\n    case \"OracleQueueAccountData\": {\n      return [accountType, new OracleQueueAccount({ program, publicKey })];\n    }\n    case \"CrankAccountData\": {\n      return [accountType, new CrankAccount({ program, publicKey })];\n    }\n    case \"SbState\":\n    case \"ProgramStateAccountData\": {\n      return [accountType, new ProgramStateAccount({ program, publicKey })];\n    }\n    case \"VrfAccountData\": {\n      return [accountType, new VrfAccount({ program, publicKey })];\n    }\n    case \"BufferRelayerAccountData\": {\n      return [accountType, new BufferRelayerAccount({ program, publicKey })];\n    }\n  }\n\n  throw new InvalidSwitchboardAccount();\n};\n"]}