"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const web3_js_1 = require("@solana/web3.js");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
const utils_1 = require("../../utils");
class PermissionSet extends BaseCommand_1.default {
    async run() {
        const { args, flags } = await this.parse(PermissionSet);
        (0, utils_1.verifyProgramHasPayer)(this.program);
        const permissionAccount = new switchboard_v2_1.PermissionAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.permissionKey),
        });
        const permission = await permissionAccount.loadData();
        // check and load granters account type
        const [granterAccountType, granter] = await (0, utils_1.loadSwitchboardAccount)(this.program, permission.granter);
        let authorityKey;
        switch (granterAccountType) {
            case "OracleQueueAccountData": {
                const data = await granter.loadData();
                authorityKey = data.authority;
                break;
            }
            default: {
                throw new Error(`Granter should be a OracleQueueAccount, received ${granterAccountType}`);
            }
        }
        const authority = await this.loadAuthority(flags.authority, authorityKey);
        // check and load grantees account type, and assign permissions based on type
        let assignedPermission;
        const [granteeAccountType, grantee] = await (0, utils_1.loadSwitchboardAccount)(this.program, permission.grantee);
        switch (granteeAccountType) {
            case "OracleAccountData":
                assignedPermission = switchboard_v2_1.SwitchboardPermission.PERMIT_ORACLE_HEARTBEAT;
                break;
            case "AggregatorAccountData":
                assignedPermission = switchboard_v2_1.SwitchboardPermission.PERMIT_ORACLE_QUEUE_USAGE;
                break;
            case "VrfAccountData":
                assignedPermission = switchboard_v2_1.SwitchboardPermission.PERMIT_VRF_REQUESTS;
                break;
            default:
                throw new Error(`Grantee must be an AggregatorAccount, OracleAccount, or VrfAccount, received ${granteeAccountType}`);
        }
        // set the permission
        const txn = await permissionAccount.set({
            authority,
            enable: !flags.disable,
            permission: assignedPermission,
        });
        if (this.silent) {
            console.log(txn);
        }
        else {
            this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Permissions set successfully`)}`);
            this.logger.log(`https://explorer.solana.com/tx/${txn}?cluster=${this.cluster}`);
        }
    }
    async catch(error) {
        super.catch(error, "failed to set permissions");
    }
}
exports.default = PermissionSet;
PermissionSet.description = "permit a grantee to use a granters resources";
PermissionSet.flags = {
    ...BaseCommand_1.default.flags,
    authority: core_1.Flags.string({
        char: "a",
        description: "alternate keypair that is the granters authority",
    }),
    disable: core_1.Flags.boolean({
        description: "disable permissions",
    }),
};
PermissionSet.args = [
    {
        name: "permissionKey",
        description: "public key of the permission account",
    },
];
