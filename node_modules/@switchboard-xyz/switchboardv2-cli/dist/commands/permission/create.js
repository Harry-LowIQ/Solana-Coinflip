"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
const utils_1 = require("../../utils");
class PermissionCreate extends BaseCommand_1.default {
    async run() {
        const { args } = await this.parse(PermissionCreate);
        (0, utils_1.verifyProgramHasPayer)(this.program);
        const granter = new web3_js_1.PublicKey(args.granter);
        const grantee = new web3_js_1.PublicKey(args.grantee);
        // assuming granter is an oracle queue, will need to fix
        const queueAccount = new switchboard_v2_1.OracleQueueAccount({
            program: this.program,
            publicKey: granter,
        });
        const queue = await queueAccount.loadData();
        // Check if permission account already exists
        let permissionAccount;
        try {
            [permissionAccount] = switchboard_v2_1.PermissionAccount.fromSeed(this.program, queue.authority, granter, grantee);
            const permData = await permissionAccount.loadData();
            if (!this.silent) {
                this.logger.log(`Permission Account already existed ${permissionAccount.publicKey}`);
            }
        }
        catch {
            permissionAccount = await switchboard_v2_1.PermissionAccount.create(this.program, {
                granter: granter,
                grantee: grantee,
                authority: queue.authority,
            });
        }
        if (this.silent) {
            console.log(permissionAccount.publicKey.toString());
        }
        else {
            this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Permission account created successfully`)}`);
            console.log(await (0, sbv2_utils_1.prettyPrintPermissions)(permissionAccount));
        }
    }
    async catch(error) {
        super.catch(error, "failed to create permission account");
    }
}
exports.default = PermissionCreate;
PermissionCreate.description = "create a permission account";
PermissionCreate.flags = {
    ...BaseCommand_1.default.flags,
};
PermissionCreate.args = [
    {
        name: "granter",
        description: "public key of the account granting permission",
    },
    {
        name: "grantee",
        description: "public key of the account getting permissions",
    },
];
