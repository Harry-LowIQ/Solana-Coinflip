"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../../BaseCommand"));
const utils_1 = require("../../../utils");
class JobCreate extends BaseCommand_1.default {
    async run() {
        (0, utils_1.verifyProgramHasPayer)(this.program);
        const { args, flags } = await this.parse(JobCreate);
        const payerKeypair = (0, switchboard_v2_1.programWallet)(this.program);
        const authority = await this.loadAuthority(flags.authority);
        const jobDefinitionPath = args.jobDefinition.startsWith("/")
            ? args.jobDefinition
            : path_1.default.join(process.cwd(), args.jobDefinition);
        if (!fs_1.default.existsSync(jobDefinitionPath)) {
            throw new Error(`jobDefinitionPath does not exist, ${jobDefinitionPath}`);
        }
        const oracleJob = switchboard_v2_1.OracleJob.create(JSON.parse(fs_1.default
            .readFileSync(jobDefinitionPath, "utf-8")
            .replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/g, "")));
        const jobAccount = await switchboard_v2_1.JobAccount.create(this.program, {
            authority: authority.publicKey,
            name: flags.name ? Buffer.from(flags.name) : Buffer.from(""),
            data: Buffer.from(switchboard_v2_1.OracleJob.encodeDelimited(oracleJob).finish()),
        });
        if (this.silent) {
            this.logger.info(jobAccount.publicKey.toString());
            return;
        }
        const jobData = await jobAccount.loadData();
        this.logger.info(await (0, sbv2_utils_1.prettyPrintJob)(jobAccount, jobData));
    }
    async catch(error) {
        super.catch(error, "failed to create job account");
    }
}
exports.default = JobCreate;
JobCreate.description = "create a job account";
JobCreate.flags = {
    ...BaseCommand_1.default.flags,
    authority: core_1.Flags.string({
        char: "a",
        description: "alternate keypair that will be the account authority",
    }),
    name: core_1.Flags.string({
        char: "n",
        description: "name of the buffer account",
    }),
};
JobCreate.args = [
    {
        name: "jobDefinition",
        required: true,
        description: "filesystem path to job definition",
    },
];
