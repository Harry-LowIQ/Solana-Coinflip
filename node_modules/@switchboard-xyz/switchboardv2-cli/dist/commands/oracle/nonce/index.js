"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const BaseCommand_1 = tslib_1.__importDefault(require("../../../BaseCommand"));
class OracleNonce extends BaseCommand_1.default {
    async run() {
        var _a, _b;
        const { args } = await this.parse(OracleNonce);
        const oracleAccount = new switchboard_v2_1.OracleAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.oracleKey),
        });
        const oracleNonceAccounts = await (0, sbv2_utils_1.getOracleNonceAccounts)(oracleAccount);
        console.log((0, sbv2_utils_1.chalkString)("Heartbeat Nonce", (_a = oracleNonceAccounts === null || oracleNonceAccounts === void 0 ? void 0 : oracleNonceAccounts.heartbeatNonce) !== null && _a !== void 0 ? _a : "", 20));
        console.log((0, sbv2_utils_1.chalkString)("Unwrap Stake Nonce", (_b = oracleNonceAccounts === null || oracleNonceAccounts === void 0 ? void 0 : oracleNonceAccounts.unwrapStakeNonce) !== null && _b !== void 0 ? _b : "", 20));
        console.log((0, sbv2_utils_1.chalkString)("Nonce Queue Size", oracleNonceAccounts.queueNonces.length, 20));
        let numberNonces = 0;
        if (oracleNonceAccounts === null || oracleNonceAccounts === void 0 ? void 0 : oracleNonceAccounts.heartbeatNonce) {
            numberNonces++;
        }
        if (oracleNonceAccounts === null || oracleNonceAccounts === void 0 ? void 0 : oracleNonceAccounts.unwrapStakeNonce) {
            numberNonces++;
        }
        numberNonces += oracleNonceAccounts.queueNonces.length;
        const nonceRentExemption = await this.program.provider.connection.getMinimumBalanceForRentExemption(web3_js_1.NONCE_ACCOUNT_LENGTH);
        const totalCost = (numberNonces * nonceRentExemption) / web3_js_1.LAMPORTS_PER_SOL;
        console.log((0, sbv2_utils_1.chalkString)("Total Cost (SOL)", totalCost, 20));
        // if (this.silent) {
        //   console.log(balance.value.amount);
        // } else {
        //   this.logger.log(
        //     chalkString(
        //       "Oracle Balance:",
        //       `${balance.value.uiAmountString} (${balance.value.amount})`,
        //       12
        //     )
        //   );
        // }
    }
    async catch(error) {
        super.catch(error, "failed to get oracle token balance");
    }
}
exports.default = OracleNonce;
OracleNonce.description = "view an oracles nonce accounts";
OracleNonce.flags = {
    ...BaseCommand_1.default.flags,
};
OracleNonce.args = [
    {
        name: "oracleKey",
        description: "public key of the oracle to check token balance",
    },
];
