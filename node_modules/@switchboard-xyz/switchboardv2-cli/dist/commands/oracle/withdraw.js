"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const anchor = tslib_1.__importStar(require("@project-serum/anchor"));
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
const utils_1 = require("../../utils");
class OracleWithdraw extends BaseCommand_1.default {
    async run() {
        (0, utils_1.verifyProgramHasPayer)(this.program);
        const { args, flags } = await this.parse(OracleWithdraw);
        const payer = (0, switchboard_v2_1.programWallet)(this.program);
        const amount = this.getTokenAmount(flags.amount);
        // get oracle account
        const oracleAccount = new switchboard_v2_1.OracleAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.oracleKey),
        });
        const oracle = await oracleAccount.loadData();
        // verify authority
        const authority = await this.loadAuthority(flags.authority, oracle.oracleAuthority);
        // load queue
        const queueAccount = new switchboard_v2_1.OracleQueueAccount({
            program: this.program,
            publicKey: oracle.queuePubkey,
        });
        const queue = await queueAccount.loadData();
        const mint = await queueAccount.loadMint();
        // check permission account has been initialized
        const [permissionAccount] = switchboard_v2_1.PermissionAccount.fromSeed(this.program, queue.authority, queueAccount.publicKey, oracleAccount.publicKey);
        try {
            const permissions = await permissionAccount.loadData();
        }
        catch {
            this.logger.error(`Need to create a permission account before withdrawing`);
            return;
        }
        // check final token balance isnt less than queue's minStake
        const initialTokenBalance = new anchor.BN((await this.program.provider.connection.getTokenAccountBalance(oracle.tokenAccount)).value.amount);
        const finalTokenBalance = initialTokenBalance.sub(amount);
        if (!flags.force && finalTokenBalance.lt(queue.minStake)) {
            throw new Error(`Final oracle token balance is less than the queue's minStake`);
        }
        let withdrawAccount;
        if (flags.withdrawAccount) {
            try {
                withdrawAccount = new web3_js_1.PublicKey(flags.withdrawAccount);
            }
            catch {
                try {
                    const withdrawKeypair = await (0, utils_1.loadKeypair)(flags.withdrawAccount);
                    withdrawAccount = await (0, sbv2_utils_1.getOrCreateSwitchboardTokenAccount)(this.program, mint, withdrawKeypair);
                }
                catch {
                    throw new Error(`failed to parse withdrawAccount flag ${flags.withdrawAccount}`);
                }
            }
        }
        else {
            withdrawAccount = await (0, sbv2_utils_1.getOrCreateSwitchboardTokenAccount)(this.program, mint);
        }
        const txn = await oracleAccount.withdraw({
            amount,
            oracleAuthority: authority,
            withdrawAccount,
        });
        if (this.silent) {
            console.log(txn);
        }
        else {
            this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Withdrew ${amount} tokens from oracle account`)}`);
            this.logger.log(`https://explorer.solana.com/tx/${txn}?cluster=${this.cluster}`);
            const finalTokenBalance = (await this.program.provider.connection.getTokenAccountBalance(oracle.tokenAccount)).value;
            this.logger.log((0, sbv2_utils_1.chalkString)("New Oracle Token Balance", `${finalTokenBalance.uiAmountString} (${finalTokenBalance.amount})`));
        }
    }
    async catch(error) {
        super.catch(error, "failed to withdraw tokens from oracle token account");
    }
}
exports.default = OracleWithdraw;
OracleWithdraw.description = "withdraw tokens from an oracle's token wallet";
OracleWithdraw.flags = {
    ...BaseCommand_1.default.flags,
    force: core_1.Flags.boolean({
        char: "f",
        description: "skip minStake balance check. your oracle may be removed from the queue",
    }),
    withdrawAccount: core_1.Flags.string({
        char: "w",
        required: false,
        description: "optional solana pubkey or keypair filesystem path to withdraw funds to. default destination is oracle authority's token wallet",
    }),
    authority: core_1.Flags.string({
        char: "a",
        description: "keypair delegated as the authority for managing the oracle account",
    }),
    amount: core_1.Flags.string({
        required: true,
        description: "token amount to withdraw from oracle escrow. If decimals provided, amount will be normalized to raw tokenAmount",
    }),
};
OracleWithdraw.args = [
    {
        name: "oracleKey",
        description: "public key of the oracle to withdraw from",
    },
];
OracleWithdraw.examples = [
    "$ sbv2 oracle:withdraw 6kPsQoufdugtHLjM4fH7Z2fNv7jLt5pgvwKHt5JvRhQ6 2500 --keypair ../oracle-keypair.json",
    "$ sbv2 oracle:withdraw 6kPsQoufdugtHLjM4fH7Z2fNv7jLt5pgvwKHt5JvRhQ6 2500 --keypair ../payer-keypair.json --authority ../oracle-keypair.json -w ByJs8E29jxvqf2KFLwfyiE2gUh5fivaS7aShcRMAsnzg",
];
