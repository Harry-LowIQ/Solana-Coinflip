"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const anchor = tslib_1.__importStar(require("@project-serum/anchor"));
const spl = tslib_1.__importStar(require("@solana/spl-token-v2"));
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
const utils_1 = require("../../utils");
class OracleDeposit extends BaseCommand_1.default {
    async run() {
        (0, utils_1.verifyProgramHasPayer)(this.program);
        const { args, flags } = await this.parse(OracleDeposit);
        const payer = (0, switchboard_v2_1.programWallet)(this.program);
        const amount = this.getTokenAmount(flags.amount);
        if (amount.lte(new anchor.BN(0))) {
            throw new Error("amount to deposit must be greater than 0");
        }
        const oracleAccount = new switchboard_v2_1.OracleAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.oracleKey),
        });
        const oracle = await oracleAccount.loadData();
        const queueAccount = new switchboard_v2_1.OracleQueueAccount({
            program: this.program,
            publicKey: oracle.queuePubkey,
        });
        const mint = await queueAccount.loadMint();
        const initialTokenBalance = new anchor.BN((await this.program.provider.connection.getTokenAccountBalance(oracle.tokenAccount)).value.amount);
        const funderTokenAddress = await (0, sbv2_utils_1.getOrCreateSwitchboardTokenAccount)(this.program, mint);
        const funderTokenBalance = new anchor.BN((await this.program.provider.connection.getTokenAccountBalance(funderTokenAddress)).value.amount);
        if (amount.gt(funderTokenBalance)) {
            throw new Error(`deposit amount ${amount} must be less than current token balance ${funderTokenBalance}`);
        }
        const txn = await spl.transfer(this.program.provider.connection, payer, funderTokenAddress, oracle.tokenAccount, payer, amount.toNumber(), undefined, undefined, spl.TOKEN_PROGRAM_ID);
        if (this.silent) {
            console.log(txn);
        }
        else {
            this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Deposited ${amount} tokens into oracle account`)}`);
            this.logger.log(`https://explorer.solana.com/tx/${txn}?cluster=${this.cluster}`);
            const finalTokenBalance = (await this.program.provider.connection.getTokenAccountBalance(oracle.tokenAccount)).value;
            this.logger.log((0, sbv2_utils_1.chalkString)("New Oracle Token Balance", `${finalTokenBalance.uiAmountString} (${finalTokenBalance.amount})`));
        }
    }
    async catch(error) {
        super.catch(error, "failed to deposit into oracle token account");
    }
}
exports.default = OracleDeposit;
OracleDeposit.description = "deposit tokens into an oracle's token wallet";
OracleDeposit.flags = {
    ...BaseCommand_1.default.flags,
    amount: core_1.Flags.string({
        required: true,
        description: "token amount to load into the oracle escrow. If decimals provided, amount will be normalized to raw tokenAmount",
    }),
};
OracleDeposit.args = [
    {
        name: "oracleKey",
        description: "public key of the oracle to deposit funds into",
    },
];
OracleDeposit.examples = [
    "$ sbv2 oracle:deposit 6kPsQoufdugtHLjM4fH7Z2fNv7jLt5pgvwKHt5JvRhQ6 2500 --keypair ../payer-keypair.json",
];
