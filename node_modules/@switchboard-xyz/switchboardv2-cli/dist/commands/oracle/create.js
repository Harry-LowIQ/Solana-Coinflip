"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const anchor = tslib_1.__importStar(require("@project-serum/anchor"));
const spl = tslib_1.__importStar(require("@solana/spl-token-v2"));
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
const utils_1 = require("../../utils");
class OracleCreate extends BaseCommand_1.default {
    async run() {
        var _a;
        const { args, flags } = await this.parse(OracleCreate);
        (0, utils_1.verifyProgramHasPayer)(this.program);
        const payerKeypair = (0, sbv2_utils_1.programWallet)(this.program);
        const signers = [payerKeypair];
        const authorityKeypair = await this.loadAuthority(flags.authority);
        // if (!payerKeypair.publicKey.equals(authorityKeypair.publicKey)) {
        //   signers.push(authorityKeypair);
        // }
        const queueAuthority = flags.queueAuthority
            ? await (0, utils_1.loadKeypair)(flags.queueAuthority)
            : payerKeypair;
        if (!payerKeypair.publicKey.equals(queueAuthority.publicKey)) {
            signers.push(queueAuthority);
        }
        const queueAccount = new switchboard_v2_1.OracleQueueAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.queueKey),
        });
        const queue = await queueAccount.loadData();
        const mint = await queueAccount.loadMint();
        const [programStateAccount, stateBump] = switchboard_v2_1.ProgramStateAccount.fromSeed(this.program);
        const tokenWalletKeypair = anchor.web3.Keypair.generate();
        signers.push(tokenWalletKeypair);
        const [oracleAccount, oracleBump] = switchboard_v2_1.OracleAccount.fromSeed(this.program, queueAccount, tokenWalletKeypair.publicKey);
        this.logger.debug((0, sbv2_utils_1.chalkString)("Oracle", oracleAccount.publicKey));
        const [permissionAccount, permissionBump] = switchboard_v2_1.PermissionAccount.fromSeed(this.program, queue.authority, queueAccount.publicKey, oracleAccount.publicKey);
        this.logger.debug((0, sbv2_utils_1.chalkString)(`Permission`, permissionAccount.publicKey));
        const createOracleTxn = new web3_js_1.Transaction();
        createOracleTxn.add(web3_js_1.SystemProgram.createAccount({
            fromPubkey: payerKeypair.publicKey,
            newAccountPubkey: tokenWalletKeypair.publicKey,
            lamports: await this.program.provider.connection.getMinimumBalanceForRentExemption(spl.AccountLayout.span),
            space: spl.AccountLayout.span,
            programId: spl.TOKEN_PROGRAM_ID,
        }), spl.createInitializeAccountInstruction(tokenWalletKeypair.publicKey, mint.address, programStateAccount.publicKey, spl.TOKEN_PROGRAM_ID), await this.program.methods
            .oracleInit({
            name: Buffer.from((_a = flags.name) !== null && _a !== void 0 ? _a : "").slice(0, 32),
            metadata: Buffer.from("").slice(0, 128),
            stateBump,
            oracleBump,
        })
            .accounts({
            oracle: oracleAccount.publicKey,
            oracleAuthority: authorityKeypair.publicKey,
            queue: queueAccount.publicKey,
            wallet: tokenWalletKeypair.publicKey,
            programState: programStateAccount.publicKey,
            systemProgram: web3_js_1.SystemProgram.programId,
            payer: payerKeypair.publicKey,
        })
            .instruction(), await this.program.methods
            .permissionInit({})
            .accounts({
            permission: permissionAccount.publicKey,
            authority: queue.authority,
            granter: queueAccount.publicKey,
            grantee: oracleAccount.publicKey,
            payer: payerKeypair.publicKey,
            systemProgram: web3_js_1.SystemProgram.programId,
        })
            .instruction());
        if (flags.enable) {
            if (!queueAuthority.publicKey.equals(queue.authority)) {
                throw new Error(`Invalid queue authority, received ${queueAuthority.publicKey}, expected ${queue.authority}`);
            }
            createOracleTxn.add(await this.program.methods
                .permissionSet({
                // eslint-disable-next-line unicorn/no-null
                permission: { permitOracleHeartbeat: null },
                enable: true,
            })
                .accounts({
                permission: permissionAccount.publicKey,
                authority: queue.authority,
            })
                .instruction());
        }
        const signature = await this.program.provider.sendAndConfirm(createOracleTxn, signers);
        const oracleData = await oracleAccount.loadData();
        if (this.silent) {
            console.log(oracleAccount.publicKey.toString());
            return;
        }
        this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Oracle account created successfully`)}`);
        this.logger.info(await (0, sbv2_utils_1.prettyPrintOracle)(oracleAccount, oracleData, true));
    }
    async catch(error) {
        super.catch(error, "failed to create oracle account");
    }
}
exports.default = OracleCreate;
OracleCreate.description = "create a new oracle account for a given queue";
OracleCreate.flags = {
    ...BaseCommand_1.default.flags,
    name: core_1.Flags.string({
        char: "n",
        description: "name of the oracle for easier identification",
        default: "",
    }),
    authority: core_1.Flags.string({
        char: "a",
        description: "keypair to delegate authority to for managing the oracle account",
    }),
    enable: core_1.Flags.boolean({
        description: "enable oracle heartbeat permissions",
    }),
    queueAuthority: core_1.Flags.string({
        description: "alternative keypair to use for queue authority",
    }),
};
OracleCreate.args = [
    {
        name: "queueKey",
        description: "public key of the oracle queue to join",
    },
];
OracleCreate.examples = [
    "$ sbv2 oracle:create GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --keypair ../payer-and-authority-keypair.json",
    "$ sbv2 oracle:create GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --name=oracle-1  --keypair ../payer-and-authority-keypair.json",
    "$ sbv2 oracle:create GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --keypair ../payer-keypair.json --authority ../oracle-keypair.json",
];
