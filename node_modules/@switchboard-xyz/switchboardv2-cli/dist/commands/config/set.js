"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
class ConfigSet extends BaseCommand_1.default {
    constructor() {
        super(...arguments);
        this.hidden = true;
    }
    async run() {
        const { args, flags } = await this.parse(ConfigSet);
        this.setConfig(args.param, flags.reset ? undefined : args.value);
    }
    async catch(error) {
        super.catch(error, "failed to set config option");
    }
}
exports.default = ConfigSet;
ConfigSet.description = "set a configuration option";
ConfigSet.flags = {
    ...BaseCommand_1.default.flags,
    reset: core_1.Flags.boolean({
        char: "r",
        description: "remove value or set to default rpc",
    }),
};
ConfigSet.args = [
    {
        name: "param",
        options: ["devnet-rpc", "mainnet-rpc"],
        description: "configuration parameter to set",
    },
    {
        name: "value",
        required: false,
        description: "value of the param to set",
    },
];
