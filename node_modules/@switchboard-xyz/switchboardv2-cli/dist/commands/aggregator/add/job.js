"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const anchor = tslib_1.__importStar(require("@project-serum/anchor"));
const web3_js_1 = require("@solana/web3.js");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../../BaseCommand"));
const utils_1 = require("../../../utils");
class AggregatorAddJob extends BaseCommand_1.default {
    async run() {
        const { args, flags } = await this.parse(AggregatorAddJob);
        const aggregatorAccount = new switchboard_v2_1.AggregatorAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.aggregatorKey),
        });
        const aggregatorData = await aggregatorAccount.loadData();
        const authority = await this.loadAuthority(flags.authority, aggregatorData.authority);
        let jobAccount;
        if (flags.jobDefinition) {
            const jobJson = JSON.parse(fs_1.default
                .readFileSync(flags.jobDefinition.startsWith("/")
                ? flags.jobDefinition
                : path_1.default.join(process.cwd(), flags.jobDefinition), "utf8")
                .replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/g, ""));
            if (!jobJson || !("tasks" in jobJson)) {
                throw new Error("job definition missing tasks");
            }
            const jobKeypair = anchor.web3.Keypair.generate();
            const data = Buffer.from(switchboard_v2_1.OracleJob.encodeDelimited(switchboard_v2_1.OracleJob.create({
                tasks: jobJson.tasks,
            })).finish());
            jobAccount = await switchboard_v2_1.JobAccount.create(this.program, {
                data,
                keypair: jobKeypair,
                authority: authority.publicKey,
            });
        }
        if (flags.jobKey) {
            jobAccount = new switchboard_v2_1.JobAccount({
                program: this.program,
                publicKey: new web3_js_1.PublicKey(flags.jobKey),
            });
        }
        if (!jobAccount) {
            throw new Error(`Failed to load JobAccount`);
        }
        const txn = await aggregatorAccount.addJob(jobAccount, authority, 1);
        if (this.silent) {
            console.log(txn);
        }
        this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Job successfully added to aggregator account`)}`);
        this.logger.log(`https://explorer.solana.com/tx/${txn}?cluster=${this.cluster}`);
    }
    async catch(error) {
        super.catch(error, "failed to add job to aggregator account");
    }
}
exports.default = AggregatorAddJob;
AggregatorAddJob.description = "add a job to an aggregator";
AggregatorAddJob.flags = {
    ...BaseCommand_1.default.flags,
    jobDefinition: core_1.Flags.string({
        description: "filesystem path of job json definition file",
        exclusive: ["jobKey"],
    }),
    jobKey: core_1.Flags.string({
        description: "public key of an existing job account to add to an aggregator",
        exclusive: ["jobDefinition"],
    }),
    authority: core_1.Flags.string({
        char: "a",
        description: "alternate keypair that is the authority for the aggregator",
    }),
};
AggregatorAddJob.args = [
    {
        name: "aggregatorKey",
        description: "public key of the aggregator account",
    },
];
AggregatorAddJob.examples = ["$ sbv2 aggregator:add:job"];
