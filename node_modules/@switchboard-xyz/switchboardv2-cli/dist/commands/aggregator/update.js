"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
const types_1 = require("../../types");
const utils_1 = require("../../utils");
class AggregatorUpdate extends BaseCommand_1.default {
    async run() {
        const { args } = await this.parse(AggregatorUpdate);
        const aggregatorAccount = new switchboard_v2_1.AggregatorAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.aggregatorKey),
        });
        const aggregator = await aggregatorAccount.loadData();
        const oracleQueueAccount = new switchboard_v2_1.OracleQueueAccount({
            program: this.program,
            publicKey: aggregator.queuePubkey,
        });
        const queue = await oracleQueueAccount.loadData();
        const mint = await oracleQueueAccount.loadMint();
        const payoutWallet = await (0, sbv2_utils_1.getOrCreateSwitchboardTokenAccount)(this.program, mint);
        const aggregatorUpdateTxn = await aggregatorAccount.openRound({
            oracleQueueAccount,
            payoutWallet,
        });
        if (this.silent) {
            console.log(aggregatorUpdateTxn);
        }
        else {
            this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Aggregator update request sent to oracles`)}`);
            this.logger.log(`https://explorer.solana.com/tx/${aggregatorUpdateTxn}?cluster=${this.cluster}`);
        }
    }
    async catch(error) {
        if (error instanceof types_1.AggregatorIllegalRoundOpenCall ||
            error.toString().includes("0x177d")) {
            this.context.logger.info(error.toString());
            this.exit(0);
        }
        super.catch(error, "failed to open a new aggregator update round");
    }
}
exports.default = AggregatorUpdate;
AggregatorUpdate.description = "request a new aggregator result from a set of oracles";
AggregatorUpdate.flags = {
    ...BaseCommand_1.default.flags,
};
AggregatorUpdate.args = [
    {
        name: "aggregatorKey",
        description: "public key of the aggregator account to deserialize",
    },
];
AggregatorUpdate.examples = [
    "$ sbv2 aggregator:update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json",
];
