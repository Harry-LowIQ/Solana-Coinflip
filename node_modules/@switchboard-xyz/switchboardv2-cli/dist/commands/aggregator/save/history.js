"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const OutputFileBaseCommand_1 = tslib_1.__importDefault(require("../../../OutputFileBaseCommand"));
class AggregatorUpdate extends OutputFileBaseCommand_1.default {
    async run() {
        const { args, flags } = await this.parse(AggregatorUpdate);
        const aggregatorAccount = new switchboard_v2_1.AggregatorAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.aggregatorKey),
        });
        const aggregator = await aggregatorAccount.loadData();
        const history = await aggregatorAccount.loadHistory();
        this.save(history.map((r) => {
            return {
                timestamp: Number.parseInt(r.timestamp.toString(10)),
                datetime: `"${new Date(r.timestamp.toNumber() * 1000).toUTCString()}"`,
                value: r.value,
            };
        }), ["timestamp", "datetime", "value"]);
        if (this.silent) {
            return;
        }
        else {
            this.logger.log(`Files saved`);
        }
    }
    async catch(error) {
        // if (
        //   error instanceof AggregatorIllegalRoundOpenCall ||
        //   error.toString().includes("0x177d")
        // ) {
        //   this.context.logger.info(error.toString());
        //   this.exit(0);
        // }
        super.catch(error, "failed to save aggregator history");
    }
}
exports.default = AggregatorUpdate;
AggregatorUpdate.description = "request a new aggregator result from a set of oracles";
AggregatorUpdate.flags = {
    ...OutputFileBaseCommand_1.default.flags,
};
AggregatorUpdate.args = [
    {
        name: "aggregatorKey",
        description: "public key of the aggregator account to deserialize",
    },
];
AggregatorUpdate.examples = [
    "$ sbv2 aggregator:save:history --outputFile ../aggregator-history.json --csv",
];
