"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const big_js_1 = tslib_1.__importDefault(require("big.js"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../../BaseCommand"));
const utils_1 = require("../../../utils");
class AggregatorSet extends BaseCommand_1.default {
    async run() {
        const { args, flags } = await this.parse(AggregatorSet);
        (0, sbv2_utils_1.verifyProgramHasPayer)(this.program);
        const payerKeypair = (0, switchboard_v2_1.programWallet)(this.program);
        const aggregatorAccount = new switchboard_v2_1.AggregatorAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.aggregatorKey),
        });
        const aggregator = await aggregatorAccount.loadData();
        const authority = await this.loadAuthority(flags.authority, aggregator.authority);
        const txn = new web3_js_1.Transaction({ feePayer: payerKeypair.publicKey });
        // batch size
        // if (flags.batchSize) {
        //   const batchSize = Number.parseInt(args.batchSize, 10);
        //   //   if (batchSize <= 0 || batchSize > 16) {
        //   //     throw new Error(`Invalid batch size (1 - 16), ${batchSize}`);
        //   //   }
        //   //   if (flags.minOracles && Number.parseInt(flags.minOracles) > batchSize) {
        //   //     throw new Error(
        //   //       `Batch size ${batchSize} must be greater than minOracleResults ${flags.minOracles}`
        //   //     );
        //   //   }
        //   //   if (
        //   //     flags.minOracles === undefined &&
        //   //     Number.parseInt(aggregator.minOracleResults) > batchSize
        //   //   ) {
        //   //     throw new Error(
        //   //       `Batch size ${batchSize} must be greater than minOracleResults ${aggregator.minOracleResults}`
        //   //     );
        //   //   }
        //   txn.add(
        //     await this.program.methods
        //       .aggregatorSetBatchSize({
        //         batchSize: batchSize,
        //       })
        //       .accounts({
        //         aggregator: aggregatorAccount.publicKey,
        //         authority: authority.publicKey,
        //       })
        //       .instruction()
        //   );
        // }
        // min oracles responses
        if (flags.minOracles) {
            const minOracles = Number.parseInt(flags.minOracles, 10);
            txn.add(await this.program.methods
                .aggregatorSetMinOracles({
                minOracleResults: minOracles,
            })
                .accounts({
                aggregator: aggregatorAccount.publicKey,
                authority: authority.publicKey,
            })
                .instruction());
        }
        // min job responses
        if (flags.minJobs) {
            const minJobs = Number.parseInt(flags.minJobs, 10);
            txn.add(await this.program.methods
                .aggregatorSetMinJobs({
                minJobResults: minJobs,
            })
                .accounts({
                aggregator: aggregatorAccount.publicKey,
                authority: authority.publicKey,
            })
                .instruction());
        }
        // oracle queue
        if (flags.newQueue) {
            const queueAccount = new switchboard_v2_1.OracleQueueAccount({
                program: this.program,
                publicKey: new web3_js_1.PublicKey(flags.newQueue),
            });
            txn.add(await this.program.methods
                .aggregatorSetQueue({})
                .accounts({
                aggregator: aggregatorAccount.publicKey,
                authority: authority.publicKey,
                queue: queueAccount.publicKey,
            })
                .instruction());
        }
        // force report period
        if (flags.forceReportPeriod) {
            txn.add(await this.program.methods
                .aggregatorSetForceReportPeriod({
                forceReportPeriod: Number.parseInt(flags.forceReportPeriod, 10),
            })
                .accounts({
                aggregator: aggregatorAccount.publicKey,
                authority: authority.publicKey,
            })
                .instruction());
        }
        // variance threshold
        if (flags.varianceThreshold) {
            const varianceThreshold = new big_js_1.default(flags.varianceThreshold);
            txn.add(await this.program.methods
                .aggregatorSetVarianceThreshold({
                varianceThreshold: switchboard_v2_1.SwitchboardDecimal.fromBig(varianceThreshold),
            })
                .accounts({
                aggregator: aggregatorAccount.publicKey,
                authority: authority.publicKey,
            })
                .instruction());
        }
        // update interval
        if (flags.updateInterval) {
            const updateInterval = Number.parseInt(flags.updateInterval, 10);
            txn.add(await this.program.methods
                .aggregatorSetUpdateInterval({
                newInterval: updateInterval,
            })
                .accounts({
                aggregator: aggregatorAccount.publicKey,
                authority: authority.publicKey,
            })
                .instruction());
        }
        const signature = await this.program.provider.sendAndConfirm(txn, [
            payerKeypair,
            authority,
        ]);
        if (this.silent) {
            console.log(signature);
        }
        else {
            this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Aggregator force report period set successfully`)}`);
            this.logger.log(`https://explorer.solana.com/tx/${signature}?cluster=${this.cluster}`);
        }
    }
    async catch(error) {
        super.catch(error, "failed to set aggregator's config");
    }
}
exports.default = AggregatorSet;
AggregatorSet.description = "set an aggregator's config";
AggregatorSet.aliases = ["set:aggregator"];
AggregatorSet.flags = {
    ...BaseCommand_1.default.flags,
    authority: core_1.Flags.string({
        char: "a",
        description: "alternate keypair that is the authority for the aggregator",
    }),
    forceReportPeriod: core_1.Flags.string({
        description: "Number of seconds for which, even if the variance threshold is not passed, accept new responses from oracles.",
    }),
    // batchSize: Flags.string({
    //   description: "number of oracles requested for each open round call",
    // }),
    minJobs: core_1.Flags.string({
        description: "number of jobs that must respond before an oracle responds",
    }),
    minOracles: core_1.Flags.string({
        description: "number of oracles that must respond before a value is accepted on-chain",
    }),
    newQueue: core_1.Flags.string({
        description: "public key of the new oracle queue",
    }),
    updateInterval: core_1.Flags.string({
        description: "set an aggregator's minimum update delay",
    }),
    varianceThreshold: core_1.Flags.string({
        description: "percentage change between a previous accepted result and the next round before an oracle reports a value on-chain. Used to conserve lease cost during low volatility",
    }),
};
AggregatorSet.args = [
    {
        name: "aggregatorKey",
        description: "public key of the aggregator",
    },
];
AggregatorSet.examples = [
    "$ sbv2 aggregator:set GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --updateInterval 300 --minOracles 3 --keypair ../payer-keypair.json",
];
