"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const web3_js_1 = require("@solana/web3.js");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../../BaseCommand"));
const utils_1 = require("../../../utils");
class AggregatorSetBatchSize extends BaseCommand_1.default {
    //   static examples = ["$ sbv2 aggregator:set:authority"];
    async run() {
        const { args, flags } = await this.parse(AggregatorSetBatchSize);
        (0, utils_1.verifyProgramHasPayer)(this.program);
        const batchSize = Number.parseInt(args.batchSize, 10);
        if (batchSize <= 0 || batchSize > 16) {
            throw new Error(`Invalid batch size (1 - 16), ${batchSize}`);
        }
        const aggregatorAccount = new switchboard_v2_1.AggregatorAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.aggregatorKey),
        });
        const aggregator = await aggregatorAccount.loadData();
        if (aggregator.minOracleResults > batchSize) {
            throw new Error(`Batch size ${batchSize} must be greater than minOracleResults ${aggregator.minOracleResults}`);
        }
        const authority = await this.loadAuthority(flags.authority, aggregator.authority);
        const txn = await aggregatorAccount.setBatchSize({
            authority,
            batchSize,
        });
        if (this.silent) {
            console.log(txn);
        }
        else {
            this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Aggregator batch size set successfully`)}`);
            this.logger.log(`https://explorer.solana.com/tx/${txn}?cluster=${this.cluster}`);
        }
    }
    async catch(error) {
        super.catch(error, "failed to set aggregator batch size");
    }
}
exports.default = AggregatorSetBatchSize;
AggregatorSetBatchSize.description = "set an aggregator's batch size";
AggregatorSetBatchSize.flags = {
    ...BaseCommand_1.default.flags,
    authority: core_1.Flags.string({
        char: "a",
        description: "alternate keypair that is the authority for the aggregator",
    }),
};
AggregatorSetBatchSize.args = [
    {
        name: "aggregatorKey",
        description: "public key of the aggregator account",
    },
    {
        name: "batchSize",
        required: true,
        description: "number of oracles requested for each open round call",
    },
];
