"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
const utils_1 = require("../../utils");
class CrankPop extends BaseCommand_1.default {
    async run() {
        const { args } = await this.parse(CrankPop);
        (0, utils_1.verifyProgramHasPayer)(this.program);
        const crankAccount = new switchboard_v2_1.CrankAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.crankKey),
        });
        const crank = await crankAccount.loadData();
        const oracleQueueAccount = new switchboard_v2_1.OracleQueueAccount({
            program: this.program,
            publicKey: crank.queuePubkey,
        });
        const queue = await oracleQueueAccount.loadData();
        const mint = await oracleQueueAccount.loadMint();
        const payoutWallet = await (0, sbv2_utils_1.getOrCreateSwitchboardTokenAccount)(this.program, mint);
        const txn = await crankAccount.pop({
            payoutWallet,
            queuePubkey: oracleQueueAccount.publicKey,
            queueAuthority: queue.authority,
            crank,
            queue,
            tokenMint: mint.address,
        });
        if (this.silent) {
            console.log(txn);
        }
        else {
            this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Crank pop successful`)}`);
            this.logger.log(`https://explorer.solana.com/tx/${txn}?cluster=${this.cluster}`);
        }
    }
    async catch(error) {
        super.catch(error, "failed to pop the crank");
    }
}
exports.default = CrankPop;
CrankPop.description = "pop the crank";
CrankPop.flags = {
    ...BaseCommand_1.default.flags,
};
CrankPop.args = [
    {
        name: "crankKey",
        description: "public key of the crank",
    },
];
