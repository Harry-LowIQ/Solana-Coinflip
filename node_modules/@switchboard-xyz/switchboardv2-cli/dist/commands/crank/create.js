"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const anchor = tslib_1.__importStar(require("@project-serum/anchor"));
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
const utils_1 = require("../../utils");
class QueueAddCrank extends BaseCommand_1.default {
    async run() {
        const { args, flags } = await this.parse(QueueAddCrank);
        (0, sbv2_utils_1.verifyProgramHasPayer)(this.program);
        const payerKeypair = (0, switchboard_v2_1.programWallet)(this.program);
        if (flags.maxRows < 0) {
            throw new Error("max rows must be a positive number");
        }
        const maxRows = flags.maxRows;
        const queueAccount = new switchboard_v2_1.OracleQueueAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.queueKey),
        });
        const queue = await queueAccount.loadData();
        const queueAuthority = await this.loadAuthority(flags.queueAuthority, queue.authority);
        const crankKeypair = anchor.web3.Keypair.generate();
        const bufferKeypair = anchor.web3.Keypair.generate();
        const crankSize = this.program.account.crankAccountData.size;
        const bufferSize = maxRows * 40 + 8;
        const signature = await this.program.methods
            .crankInit({
            name: (flags.name ? Buffer.from(flags.name) : Buffer.from("")).slice(0, 32),
            metadata: Buffer.from("").slice(0, 64),
            crankSize: maxRows,
        })
            .accounts({
            crank: crankKeypair.publicKey,
            queue: queueAccount.publicKey,
            buffer: bufferKeypair.publicKey,
            systemProgram: web3_js_1.SystemProgram.programId,
            payer: payerKeypair.publicKey,
        })
            .signers([crankKeypair, bufferKeypair])
            .preInstructions([
            anchor.web3.SystemProgram.createAccount({
                fromPubkey: payerKeypair.publicKey,
                newAccountPubkey: bufferKeypair.publicKey,
                space: bufferSize,
                lamports: await this.program.provider.connection.getMinimumBalanceForRentExemption(bufferSize),
                programId: this.program.programId,
            }),
        ])
            .rpc();
        const crankAccount = new switchboard_v2_1.CrankAccount({
            program: this.program,
            publicKey: crankKeypair.publicKey,
        });
        if (this.silent) {
            console.log(crankKeypair.publicKey.toString());
        }
        else {
            this.logger.log(await (0, sbv2_utils_1.prettyPrintCrank)(crankAccount));
            this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Crank created successfully\r\n`)}`);
        }
    }
    async catch(error) {
        super.catch(error, "failed to create crank");
    }
}
exports.default = QueueAddCrank;
QueueAddCrank.description = "add a crank to an existing oracle queue";
QueueAddCrank.alias = ["queue:add:crank"];
QueueAddCrank.flags = {
    ...BaseCommand_1.default.flags,
    name: core_1.Flags.string({
        char: "n",
        description: "name of the crank for easier identification",
    }),
    maxRows: core_1.Flags.integer({
        char: "r",
        default: 100,
        description: "maximum number of rows a crank can support",
    }),
    queueAuthority: core_1.Flags.string({
        description: "alternative keypair to use for queue authority",
    }),
};
QueueAddCrank.args = [
    {
        name: "queueKey",
        description: "public key of the oracle queue to create a crank on",
    },
];
QueueAddCrank.examples = [
    "$ sbv2 queue:add:crank 5aYuxRdcB9GpWrEXVMBQp2R5uf94uoBiFdMEBwcmHuU4 -k ../authority-keypair.json -n crank-1",
    // "$ sbv2 queue:add:crank 5aYuxRdcB9GpWrEXVMBQp2R5uf94uoBiFdMEBwcmHuU4 -k ../payer-keypair.json -a ../authority-keypair.json",
];
