"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const web3_js_1 = require("@solana/web3.js");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const fs = tslib_1.__importStar(require("fs"));
const path = tslib_1.__importStar(require("path"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
class CrankList extends BaseCommand_1.default {
    async run() {
        const { args, flags } = await this.parse(CrankList);
        const outputFile = flags.outputFile
            ? path.join(process.cwd(), flags.outputFile)
            : undefined;
        if (outputFile && fs.existsSync(outputFile) && !flags.force) {
            throw new Error(`${outputFile} already exists, use the --force flag to overwrite`);
        }
        const crankAccount = new switchboard_v2_1.CrankAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.crankKey),
        });
        const crank = await crankAccount.loadData();
        const pqData = crank.pqData;
        const pqKeys = pqData.map((row) => row.pubkey.toString());
        if (outputFile) {
            if (outputFile.endsWith(".txt")) {
                fs.writeFileSync(outputFile, pqKeys.join("\n"));
            }
            else {
                fs.writeFileSync(outputFile, JSON.stringify({
                    crank: crankAccount.publicKey.toString(),
                    pubkeys: pqKeys,
                }, undefined, 2));
            }
        }
        if (!flags.silent) {
            this.logger.log(pqKeys.join("\n"));
        }
    }
    async catch(error) {
        super.catch(error, "failed to print the cranks pubkeys");
    }
}
exports.default = CrankList;
CrankList.description = "list the pubkeys currently on the crank";
CrankList.flags = {
    ...BaseCommand_1.default.flags,
    force: core_1.Flags.boolean({ description: "overwrite output file if exists" }),
    outputFile: core_1.Flags.string({
        char: "f",
        description: "output file to save aggregator pubkeys to",
    }),
};
CrankList.args = [
    {
        name: "crankKey",
        description: "public key of the crank",
    },
];
