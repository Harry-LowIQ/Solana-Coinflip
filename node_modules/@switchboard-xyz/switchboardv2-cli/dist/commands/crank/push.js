"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
const utils_1 = require("../../utils");
class CrankPush extends BaseCommand_1.default {
    async run() {
        const { args } = await this.parse(CrankPush);
        (0, utils_1.verifyProgramHasPayer)(this.program);
        const crankAccount = new switchboard_v2_1.CrankAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.crankKey),
        });
        const aggregatorAccount = new switchboard_v2_1.AggregatorAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.aggregatorKey),
        });
        const txn = await crankAccount.push({ aggregatorAccount });
        if (this.silent) {
            console.log(txn);
        }
        else {
            this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Aggregator pushed to crank successfully`)}`);
            this.logger.log(`https://explorer.solana.com/tx/${txn}?cluster=${this.cluster}`);
        }
    }
    async catch(error) {
        super.catch(error, "failed to push aggregator onto the crank");
    }
}
exports.default = CrankPush;
CrankPush.description = "push an aggregator onto a crank";
CrankPush.aliases = ["aggregator:add:crank", "crank:add:aggregator"];
CrankPush.flags = {
    ...BaseCommand_1.default.flags,
};
CrankPush.args = [
    {
        name: "crankKey",
        description: "public key of the crank",
    },
    {
        name: "aggregatorKey",
        description: "public key of the aggregator",
    },
];
