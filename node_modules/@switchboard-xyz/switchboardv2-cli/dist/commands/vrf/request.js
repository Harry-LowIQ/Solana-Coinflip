"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const spl = tslib_1.__importStar(require("@solana/spl-token-v2"));
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
const utils_1 = require("../../utils");
class VrfRequest extends BaseCommand_1.default {
    async run() {
        const { args, flags } = await this.parse(VrfRequest);
        (0, utils_1.verifyProgramHasPayer)(this.program);
        const payerKeypair = (0, switchboard_v2_1.programWallet)(this.program);
        const vrfAccount = new switchboard_v2_1.VrfAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.vrfKey),
        });
        const vrf = await vrfAccount.loadData();
        const queueAccount = new switchboard_v2_1.OracleQueueAccount({
            program: this.program,
            publicKey: vrf.oracleQueue,
        });
        const queue = await queueAccount.loadData();
        const mint = await queueAccount.loadMint();
        const [programStateAccount, stateBump] = switchboard_v2_1.ProgramStateAccount.fromSeed(this.program);
        const [permissionAccount, permissionBump] = switchboard_v2_1.PermissionAccount.fromSeed(this.program, queue.authority, queueAccount.publicKey, vrfAccount.publicKey);
        const authority = await this.loadAuthority(flags.authority, vrf.authority);
        const funderAuthority = flags.funderAuthority
            ? await (0, utils_1.loadKeypair)(flags.funderAuthority)
            : payerKeypair;
        const funderTokenWallet = await (0, sbv2_utils_1.getOrCreateSwitchboardTokenAccount)(this.program, mint);
        // const signature = await vrfAccount.requestRandomness({
        //   authority,
        //   payerAuthority: funderAuthority,
        //   payer: funderTokenWallet,
        // });
        const signature = await this.program.methods
            .vrfRequestRandomness({
            stateBump,
            permissionBump,
        })
            .accounts({
            authority: authority.publicKey,
            vrf: vrfAccount.publicKey,
            oracleQueue: queueAccount.publicKey,
            queueAuthority: queue.authority,
            dataBuffer: queue.dataBuffer,
            permission: permissionAccount.publicKey,
            escrow: vrf.escrow,
            payerWallet: funderTokenWallet,
            payerAuthority: funderAuthority.publicKey,
            recentBlockhashes: web3_js_1.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
            programState: programStateAccount.publicKey,
            tokenProgram: spl.TOKEN_PROGRAM_ID,
        })
            .signers([authority, funderAuthority])
            .rpc();
        if (this.silent) {
            console.log(signature);
            return;
        }
        await (0, utils_1.sleep)(1000);
        this.logger.log(`https://explorer.solana.com/tx/${signature}?cluster=${this.cluster}`);
    }
}
exports.default = VrfRequest;
VrfRequest.description = "request a new value for a VRF";
VrfRequest.examples = [
    'sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json --callbackPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --ixData "[145,72,9,94,61,97,126,106]" -a "{"pubkey": "HpQoFL5kxPp2JCFvjsVTvBd7navx4THLefUU68SXAyd6","isSigner": false,"isWritable": true}" -a "{"pubkey": "8VdBtS8ufkXMCa6Yr9E4KVCfX2inVZVwU4KGg2CL1q7P","isSigner": false,"isWritable": false}"',
];
VrfRequest.flags = {
    ...BaseCommand_1.default.flags,
    funderAuthority: core_1.Flags.string({
        description: "alternative keypair to pay for VRF request",
    }),
    authority: core_1.Flags.string({
        description: "alternative keypair that is the VRF authority",
    }),
};
VrfRequest.args = [
    {
        name: "vrfKey",
        description: "public key of the VRF account to request randomness for",
    },
];
