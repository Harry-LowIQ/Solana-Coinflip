"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const anchor = tslib_1.__importStar(require("@project-serum/anchor"));
const spl = tslib_1.__importStar(require("@solana/spl-token-v2"));
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const fs_1 = tslib_1.__importDefault(require("fs"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../../BaseCommand"));
const utils_1 = require("../../../utils");
class VrfCreate extends BaseCommand_1.default {
    async run() {
        const { args, flags } = await this.parse(VrfCreate);
        (0, sbv2_utils_1.verifyProgramHasPayer)(this.program);
        const payerKeypair = (0, switchboard_v2_1.programWallet)(this.program);
        let callback;
        if (flags.callback) {
            callback = JSON.parse(fs_1.default.readFileSync(flags.callback, "utf8"));
        }
        else if (flags.callbackPid && flags.accountMeta && flags.ixData) {
            const ixDataString = flags.ixData.startsWith("[") && flags.ixData.endsWith("]")
                ? flags.ixData.slice(1, -1)
                : flags.ixData;
            const ixDataArray = ixDataString.split(",");
            const ixData = ixDataArray.map((n) => Number.parseInt(n, 10));
            callback = {
                programId: new web3_js_1.PublicKey(flags.callbackPid),
                accounts: flags.accountMeta.map((a) => {
                    const parsedObject = JSON.parse(a);
                    return {
                        pubkey: new web3_js_1.PublicKey(parsedObject.pubkey),
                        isSigner: Boolean(parsedObject.isSigner),
                        isWritable: Boolean(parsedObject.isWritable),
                    };
                }),
                ixData: Buffer.from(ixData),
            };
        }
        else {
            throw new Error(`No callback provided`);
        }
        // load VRF params
        const vrfSecret = flags.vrfKeypair
            ? await (0, utils_1.loadKeypair)(flags.vrfKeypair)
            : anchor.web3.Keypair.generate();
        const authority = flags.authority
            ? await (0, utils_1.loadKeypair)(flags.authority)
            : payerKeypair;
        const queueAuthority = flags.queueAuthority
            ? await (0, utils_1.loadKeypair)(flags.queueAuthority)
            : payerKeypair;
        // load Switchboard accounts
        const [programStateAccount, stateBump] = switchboard_v2_1.ProgramStateAccount.fromSeed(this.program);
        const queueAccount = new switchboard_v2_1.OracleQueueAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.queueKey),
        });
        const queue = await queueAccount.loadData();
        const mint = await queueAccount.loadMint();
        const vrfEscrowPubkey = await spl.getAssociatedTokenAddress(mint.address, vrfSecret.publicKey, true, spl.TOKEN_PROGRAM_ID, spl.ASSOCIATED_TOKEN_PROGRAM_ID);
        const [permissionAccount, permissionBump] = switchboard_v2_1.PermissionAccount.fromSeed(this.program, queue.authority, queueAccount.publicKey, vrfSecret.publicKey);
        // create account txns
        const createTxn = new web3_js_1.Transaction();
        createTxn.add(spl.createAssociatedTokenAccountInstruction(payerKeypair.publicKey, vrfEscrowPubkey, vrfSecret.publicKey, mint.address, spl.TOKEN_PROGRAM_ID, spl.ASSOCIATED_TOKEN_PROGRAM_ID), spl.createSetAuthorityInstruction(vrfEscrowPubkey, vrfSecret.publicKey, spl.AuthorityType.AccountOwner, programStateAccount.publicKey, [payerKeypair, vrfSecret], spl.TOKEN_PROGRAM_ID), web3_js_1.SystemProgram.createAccount({
            fromPubkey: payerKeypair.publicKey,
            newAccountPubkey: vrfSecret.publicKey,
            space: this.program.account.vrfAccountData.size,
            lamports: await this.program.provider.connection.getMinimumBalanceForRentExemption(this.program.account.vrfAccountData.size),
            programId: this.program.programId,
        }), await this.program.methods
            .vrfInit({
            stateBump,
            callback: callback,
        })
            .accounts({
            vrf: vrfSecret.publicKey,
            escrow: vrfEscrowPubkey,
            authority: authority.publicKey,
            oracleQueue: queueAccount.publicKey,
            programState: programStateAccount.publicKey,
            tokenProgram: spl.TOKEN_PROGRAM_ID,
        })
            .instruction(), await this.program.methods
            .permissionInit({})
            .accounts({
            permission: permissionAccount.publicKey,
            authority: queue.authority,
            granter: queueAccount.publicKey,
            grantee: vrfSecret.publicKey,
            payer: payerKeypair.publicKey,
            systemProgram: web3_js_1.SystemProgram.programId,
        })
            .instruction());
        // if flag, enable permissions
        if (flags.enable) {
            if (!queueAuthority.publicKey.equals(queue.authority)) {
                throw new Error(`Invalid queue authority, received ${queueAuthority.publicKey}, expected ${queue.authority}`);
            }
            createTxn.add(await this.program.methods
                .permissionSet({
                permission: { permitVrfRequests: undefined },
                enable: true,
            })
                .accounts({
                permission: permissionAccount.publicKey,
                authority: queue.authority,
            })
                .instruction());
        }
        // send transaction
        const signature = await this.program.provider.sendAndConfirm(createTxn, [payerKeypair, vrfSecret, queueAuthority], { commitment: "finalized" });
        if (this.silent) {
            console.log(vrfSecret.publicKey.toString());
            return;
        }
        await (0, sbv2_utils_1.sleep)(2000);
        this.logger.log(`https://explorer.solana.com/tx/${signature}?cluster=${this.cluster}`);
        this.logger.log(await (0, sbv2_utils_1.prettyPrintVrf)(new switchboard_v2_1.VrfAccount({
            program: this.program,
            publicKey: vrfSecret.publicKey,
        }), undefined, true));
    }
}
exports.default = VrfCreate;
VrfCreate.description = "create a Switchboard VRF Account";
VrfCreate.flags = {
    ...BaseCommand_1.default.flags,
    vrfKeypair: core_1.Flags.string({
        description: "filesystem path of existing keypair to use for VRF Account",
    }),
    enable: core_1.Flags.boolean({
        description: "enable vrf permissions",
    }),
    authority: core_1.Flags.string({
        description: "alternative keypair to use for VRF authority",
    }),
    queueAuthority: core_1.Flags.string({
        description: "alternative keypair to use for queue authority",
    }),
    callback: core_1.Flags.string({
        description: "filesystem path to callback json",
        exclusive: ["accountMeta", "callbackPid", "ixData"],
    }),
    accountMeta: core_1.Flags.string({
        description: "account metas for VRF callback",
        multiple: true,
        exclusive: ["callback"],
        dependsOn: ["callbackPid", "ixData"],
    }),
    callbackPid: core_1.Flags.string({
        description: "callback program ID",
        exclusive: ["callback"],
        dependsOn: ["accountMeta", "ixData"],
    }),
    ixData: core_1.Flags.string({
        description: "serialized instruction data in bytes",
        exclusive: ["callback"],
        dependsOn: ["accountMeta", "callbackPid"],
    }),
};
VrfCreate.args = [
    {
        name: "queueKey",
        description: "public key of the oracle queue to create VRF account for",
    },
];
VrfCreate.examples = [
    'sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json --callbackPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --ixData "[145,72,9,94,61,97,126,106]" -a "{"pubkey": "HpQoFL5kxPp2JCFvjsVTvBd7navx4THLefUU68SXAyd6","isSigner": false,"isWritable": true}" -a "{"pubkey": "8VdBtS8ufkXMCa6Yr9E4KVCfX2inVZVwU4KGg2CL1q7P","isSigner": false,"isWritable": false}"',
    'sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority oracle-keypair.json --callbackPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --ixData "[145,72,9,94,61,97,126,106]" -a "{"pubkey": "HYKi1grticLXPe5vqapUHhm976brwqRob8vqRnWMKWL5","isSigner": false,"isWritable": true}" -a "{"pubkey": "6vG9QLMgSvsfjvSpDxWfZ2MGPYGzEYoBxviLG7cr4go","isSigner": false,"isWritable": false}"',
    "sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json --callback callback-example.json",
];
