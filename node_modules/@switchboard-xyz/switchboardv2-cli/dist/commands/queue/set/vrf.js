"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../../BaseCommand"));
const utils_1 = require("../../../utils");
class QueueSetVrf extends BaseCommand_1.default {
    constructor() {
        super(...arguments);
        this.queueAuthority = undefined;
    }
    async run() {
        var _a;
        const { args, flags } = await this.parse(QueueSetVrf);
        const queueAccount = new switchboard_v2_1.OracleQueueAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.queueKey),
        });
        const queue = await queueAccount.loadData();
        const queueAuthority = await this.loadAuthority(flags.authority, queue.authority);
        const setVrfTxn = await this.queueAccount.setVrfSettings({
            unpermissionedVrf: true,
            authority: (_a = this.queueAuthority) !== null && _a !== void 0 ? _a : (0, utils_1.getProgramPayer)(this.program),
        });
        if (this.silent) {
            console.log(setVrfTxn);
        }
        else {
            this.logger.log(await (0, sbv2_utils_1.prettyPrintQueue)(queueAccount, undefined, true));
            this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Queue VRF successfully set\r\n`)}`);
        }
    }
    async catch(error) {
        super.catch(error, "failed to set queue VRF settings");
    }
}
exports.default = QueueSetVrf;
QueueSetVrf.description = "set unpermissionedVrfEnabled";
QueueSetVrf.flags = {
    ...BaseCommand_1.default.flags,
    authority: core_1.Flags.string({
        char: "a",
        description: "alternate keypair that is the authority for oracle queue",
    }),
    disable: core_1.Flags.boolean({
        description: "disable unpermissionedVrfEnabled",
    }),
};
QueueSetVrf.args = [
    {
        name: "queueKey",
        description: "public key of the oracle queue to create a crank on",
    },
];
QueueSetVrf.examples = [
// "$ sbv2 queue:add:crank 5aYuxRdcB9GpWrEXVMBQp2R5uf94uoBiFdMEBwcmHuU4 -k ../authority-keypair.json -n crank-1",
// "$ sbv2 queue:add:crank 5aYuxRdcB9GpWrEXVMBQp2R5uf94uoBiFdMEBwcmHuU4 -k ../payer-keypair.json -a ../authority-keypair.json",
];
