"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
class WatchVrf extends BaseCommand_1.default {
    async run() {
        const { args } = await this.parse(WatchVrf);
        const vrfAccount = new switchboard_v2_1.VrfAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.vrfKey),
        });
        const vrfData = await vrfAccount.loadData();
        this.logger.log(chalk_1.default.underline((0, sbv2_utils_1.chalkString)(`## VRF`, vrfAccount.publicKey, 24) + "\r\n"));
        printVrf(vrfData);
        const watchWs = vrfAccount.onChange((vrf) => {
            printVrf(vrf);
        });
    }
    async catch(error) {
        super.catch(error, "failed to watch vrf account");
    }
}
exports.default = WatchVrf;
WatchVrf.description = "watch a vrf for a new value";
WatchVrf.flags = {
    ...BaseCommand_1.default.flags,
};
WatchVrf.args = [
    {
        name: "vrfKey",
        description: "public key of the vrf account to deserialize",
    },
];
WatchVrf.aliases = ["vrf:watch"];
WatchVrf.examples = [
    "$ sbv2 vrf:aggregator J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa",
];
function printVrf(vrf) {
    const counter = vrf.counter;
    const result = Uint8Array.from(vrf.currentRound.result);
    process.stdout.moveCursor(0, -1); // up one line
    process.stdout.clearLine(1); // from cursor to end
    process.stdout.write(`${chalk_1.default.green("#", counter.toString().padEnd(3, " "))}: ${chalk_1.default.blue("[")}${chalk_1.default.yellow(result.toString())}${chalk_1.default.blue("]")}\n`);
}
