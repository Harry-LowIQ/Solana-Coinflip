"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
class WatchAggregator extends BaseCommand_1.default {
    async run() {
        var _a;
        const { args } = await this.parse(WatchAggregator);
        const aggregatorAccount = new switchboard_v2_1.AggregatorAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.aggregatorKey),
        });
        const aggregator = await aggregatorAccount.loadData();
        const name = (_a = (0, sbv2_utils_1.buffer2string)(aggregator.name)) !== null && _a !== void 0 ? _a : "";
        this.logger.log(chalk_1.default.underline((0, sbv2_utils_1.chalkString)(`## Aggregator${name ? " (" + name + ")" : ""}`, aggregatorAccount.publicKey, 30) + "\r\n"));
        printAggregator(aggregator);
        const ws = aggregatorAccount.onChange((aggregator) => {
            printAggregator(aggregator);
        });
    }
    async catch(error) {
        super.catch(error, "failed to watch aggregator");
    }
}
exports.default = WatchAggregator;
WatchAggregator.description = "watch an aggregator for a new value";
WatchAggregator.flags = {
    ...BaseCommand_1.default.flags,
};
WatchAggregator.args = [
    {
        name: "aggregatorKey",
        description: "public key of the aggregator account to deserialize",
    },
];
WatchAggregator.aliases = ["aggregator:watch"];
WatchAggregator.examples = [
    "$ sbv2 watch:aggregator J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa",
];
function printAggregator(aggregator) {
    const result = switchboard_v2_1.SwitchboardDecimal.from(aggregator.latestConfirmedRound.result).toBig();
    const timestamp = (0, sbv2_utils_1.anchorBNtoDateTimeString)(aggregator.latestConfirmedRound.roundOpenTimestamp);
    process.stdout.moveCursor(0, -1); // up one line
    process.stdout.clearLine(1); // from cursor to end
    process.stdout.write((0, sbv2_utils_1.chalkString)(timestamp, result, 30) + "\r\n");
}
