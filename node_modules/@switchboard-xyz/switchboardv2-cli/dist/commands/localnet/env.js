"use strict";
/* eslint-disable unicorn/prevent-abbreviations */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const fs = tslib_1.__importStar(require("fs"));
const path = tslib_1.__importStar(require("path"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
const utils_1 = require("../../utils");
class LocalnetEnvironment extends BaseCommand_1.default {
    async run() {
        (0, utils_1.verifyProgramHasPayer)(this.program);
        const { flags } = await this.parse(LocalnetEnvironment);
        const payerKeypair = (0, switchboard_v2_1.programWallet)(this.program);
        const outputDir = flags.outputDir
            ? path.join(process.cwd(), flags.outputDir)
            : process.cwd();
        // TODO: Check paths and force flags
        if (!flags.force) {
            const files = [
                "switchboard.env",
                "switchboard.json",
                "start-local-validator.sh",
                "start-oracle.sh",
                "Anchor.switchboard.toml",
                "docker-compose.switchboard.yml",
            ];
            for (const file of files) {
                if (fs.existsSync(path.join(outputDir, file))) {
                    throw new Error(`${file} already exists, use --force to overwrite`);
                }
            }
        }
        // TODO: Add silent flag
        // TODO: Pass keypair path and add as env variable
        const testEnvironment = await sbv2_utils_1.SwitchboardTestEnvironment.create(flags.keypair, undefined, flags.programId ? this.program.programId : undefined);
        testEnvironment.writeAll(outputDir);
        console.log(chalk_1.default.blue(`\nYou may also copy the accounts from Anchor.switchboard.toml into your projects Anchor.toml and run the following command to create an oracle and run 'anchor test' with a local validator running:`));
        console.log(chalk_1.default.yellow(`\tsbv2 anchor test \\
  --keypair ${testEnvironment.payerKeypairPath} \\
  --oracleKey ${testEnvironment.oracle} \\
  --switchboardDir ${outputDir}`));
    }
    async catch(error) {
        super.catch(error, "Failed to start localnet environment");
    }
}
exports.default = LocalnetEnvironment;
LocalnetEnvironment.description = "create a localnet switchboard environment";
LocalnetEnvironment.flags = {
    ...BaseCommand_1.default.flags,
    force: core_1.Flags.boolean({
        description: "overwrite output file if existing",
        default: false,
    }),
    outputDir: core_1.Flags.string({
        char: "o",
        description: "output directory for scripts",
    }),
};
