"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const anchor = tslib_1.__importStar(require("@project-serum/anchor"));
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
const utils_1 = require("../../utils");
class LeaseCreate extends BaseCommand_1.default {
    async run() {
        const { args, flags } = await this.parse(LeaseCreate);
        (0, utils_1.verifyProgramHasPayer)(this.program);
        const payer = (0, switchboard_v2_1.programWallet)(this.program);
        // verify and normalize load amount
        let loadAmount = new anchor.BN(0);
        if (flags.amount) {
            loadAmount = this.getTokenAmount(flags.amount);
        }
        if (loadAmount.lt(new anchor.BN(0))) {
            throw new Error("amount to deposit must be greater than or equal to 0");
        }
        const aggregatorAccount = new switchboard_v2_1.AggregatorAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.aggregatorKey),
        });
        const aggregator = await aggregatorAccount.loadData();
        const oracleQueueAccount = new switchboard_v2_1.OracleQueueAccount({
            program: this.program,
            publicKey: aggregator.queuePubkey,
        });
        const mint = await oracleQueueAccount.loadMint();
        // check funder has enough balance for the request
        const funderTokenAddress = await (0, sbv2_utils_1.getOrCreateSwitchboardTokenAccount)(this.program, mint, payer);
        const funderBalanceResponse = await this.program.provider.connection.getTokenAccountBalance(funderTokenAddress);
        const funderBalance = new anchor.BN(funderBalanceResponse.value.amount);
        if (loadAmount.gt(funderBalance)) {
            throw new Error(`not enough token balance to load lease\nLoadAmount: ${loadAmount.toString()}\nBalance: ${funderBalance.toString()}`);
        }
        // verify lease account doesnt already exist
        let [leaseAccount] = switchboard_v2_1.LeaseAccount.fromSeed(this.program, oracleQueueAccount, aggregatorAccount);
        try {
            const least = await leaseAccount.loadData();
            throw new Error("lease account already exists");
        }
        catch (error) {
            if (error.message === "lease account already exists") {
                throw error;
            }
        }
        // create lease account
        leaseAccount = await switchboard_v2_1.LeaseAccount.create(this.program, {
            aggregatorAccount,
            oracleQueueAccount,
            funderAuthority: payer,
            withdrawAuthority: payer.publicKey,
            funder: funderTokenAddress,
            loadAmount,
        });
        if (this.silent) {
            console.log(leaseAccount.publicKey.toString());
        }
        else {
            this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON}Lease Account created successfully`)}`);
            this.logger.log(await (0, sbv2_utils_1.prettyPrintLease)(leaseAccount));
        }
    }
    async catch(error) {
        super.catch(error, "failed to create a lease account");
    }
}
exports.default = LeaseCreate;
LeaseCreate.description = "fund and re-enable an aggregator lease";
LeaseCreate.aliases = ["aggregator:lease:create"];
LeaseCreate.flags = {
    ...BaseCommand_1.default.flags,
    amount: core_1.Flags.string({
        required: false,
        description: "token amount to load into the lease escrow. If decimals provided, amount will be normalized to raw tokenAmount",
    }),
};
LeaseCreate.args = [
    {
        name: "aggregatorKey",
        description: "public key of the aggregator to extend a lease for",
    },
];
LeaseCreate.examples = [
    "$ sbv2 lease:create GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.5 --keypair ../payer-keypair.json",
];
