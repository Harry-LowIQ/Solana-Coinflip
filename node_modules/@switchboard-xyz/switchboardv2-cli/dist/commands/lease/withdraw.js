"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const anchor = tslib_1.__importStar(require("@project-serum/anchor"));
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
const utils_1 = require("../../utils");
class AggregatorLeaseWithdraw extends BaseCommand_1.default {
    async run() {
        const { args, flags } = await this.parse(AggregatorLeaseWithdraw);
        (0, sbv2_utils_1.verifyProgramHasPayer)(this.program);
        const aggregatorAccount = new switchboard_v2_1.AggregatorAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.aggregatorKey),
        });
        const aggregator = await aggregatorAccount.loadData();
        // verify authority
        const authority = await this.loadAuthority(flags.authority, aggregator.authority);
        // load queue
        const queueAccount = new switchboard_v2_1.OracleQueueAccount({
            program: this.program,
            publicKey: aggregator.queuePubkey,
        });
        const queue = await queueAccount.loadData();
        const mint = await queueAccount.loadMint();
        let withdrawAddress;
        if (flags.withdrawAddress) {
            try {
                withdrawAddress = new web3_js_1.PublicKey(flags.withdrawAddress);
            }
            catch {
                try {
                    const withdrawKeypair = await (0, utils_1.loadKeypair)(flags.withdrawAddress);
                    withdrawAddress = await (0, sbv2_utils_1.getOrCreateSwitchboardTokenAccount)(this.program, mint, withdrawKeypair);
                }
                catch {
                    throw new Error(`failed to parse withdrawAccount flag ${flags.withdrawAddress}`);
                }
            }
        }
        else {
            withdrawAddress = await (0, sbv2_utils_1.getOrCreateSwitchboardTokenAccount)(this.program, mint);
        }
        const [leaseAccount] = switchboard_v2_1.LeaseAccount.fromSeed(this.program, queueAccount, aggregatorAccount);
        try {
            const lease = await leaseAccount.loadData();
        }
        catch {
            throw new Error(`Failed to load lease account. Has it been created yet?`);
        }
        const lease = await leaseAccount.loadData();
        const escrow = lease.escrow;
        const amount = flags.amount
            ? this.getTokenAmount(flags.amount)
            : new anchor.BN((await this.program.provider.connection.getTokenAccountBalance(escrow)).value.amount);
        const txn = await leaseAccount.withdraw({
            amount: amount,
            withdrawAuthority: authority,
            withdrawWallet: withdrawAddress,
        });
        if (!this.silent) {
            const newBalance = await this.program.provider.connection.getTokenAccountBalance(escrow);
            this.logger.log((0, sbv2_utils_1.chalkString)("Final Lease Balance", newBalance.value.uiAmountString, 30));
        }
        if (this.silent) {
            console.log(txn);
        }
        else {
            this.logger.log(`${chalk_1.default.green(`${utils_1.CHECK_ICON} Withdrew ${amount} tokens from aggregator lease`)}`);
            this.logger.log(`https://explorer.solana.com/tx/${txn}?cluster=${this.cluster}`);
        }
    }
    async catch(error) {
        super.catch(error, "failed to withdraw from aggregator lease account");
    }
}
exports.default = AggregatorLeaseWithdraw;
AggregatorLeaseWithdraw.description = "withdraw funds from an aggregator lease";
AggregatorLeaseWithdraw.aliases = ["aggregator:lease:withdraw"];
AggregatorLeaseWithdraw.flags = {
    ...BaseCommand_1.default.flags,
    withdrawAddress: core_1.Flags.string({
        required: false,
        description: "tokenAccount to withdraw to. If not provided, payer associated token account will be used",
    }),
    amount: core_1.Flags.string({
        required: true,
        description: "token amount to withdraw from lease account. If decimals provided, amount will be normalized to raw tokenAmount",
    }),
    authority: core_1.Flags.string({
        char: "a",
        description: "keypair delegated as the authority for managing the oracle account",
    }),
};
AggregatorLeaseWithdraw.args = [
    {
        name: "aggregatorKey",
        description: "public key of the aggregator to extend a lease for",
    },
];
AggregatorLeaseWithdraw.examples = [
    "$ sbv2 aggregator:lease:withdraw GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json",
];
