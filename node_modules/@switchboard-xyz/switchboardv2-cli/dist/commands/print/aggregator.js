"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const BaseCommand_1 = tslib_1.__importDefault(require("../../BaseCommand"));
class AggregatorPrint extends BaseCommand_1.default {
    async run() {
        const { args, flags } = await this.parse(AggregatorPrint);
        const aggregatorAccount = new switchboard_v2_1.AggregatorAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.aggregatorKey),
        });
        const aggregator = await aggregatorAccount.loadData();
        if (flags.json) {
            const parsedAggregator = {
                ...aggregator,
                name: (0, sbv2_utils_1.buffer2string)(aggregator.name),
                metadata: (0, sbv2_utils_1.buffer2string)(aggregator.metadata),
                reserved1: undefined,
                jobPubkeysData: aggregator.jobPubkeysData.slice(0, aggregator.jobPubkeysSize),
                jobWeights: aggregator.jobWeights.slice(0, aggregator.jobPubkeysSize),
                // jobHashes: aggregator.jobHashes.slice(0, aggregator.jobPubkeysSize),
                jobHashes: undefined,
                jobsChecksum: undefined,
                currentRound: {
                    ...aggregator.currentRound,
                    mediansData: aggregator.currentRound.mediansData.slice(0, aggregator.oracleRequestBatchSize),
                    currentPayout: aggregator.currentRound.currentPayout.slice(0, aggregator.oracleRequestBatchSize),
                    mediansFulfilled: aggregator.currentRound.mediansFulfilled.slice(0, aggregator.oracleRequestBatchSize),
                    errorsFulfilled: aggregator.currentRound.errorsFulfilled.slice(0, aggregator.oracleRequestBatchSize),
                    oraclePubkeysData: aggregator.currentRound.oraclePubkeysData.filter((pubkey) => !web3_js_1.PublicKey.default.equals(pubkey)),
                },
                latestConfirmedRound: {
                    ...aggregator.latestConfirmedRound,
                    mediansData: aggregator.latestConfirmedRound.mediansData.slice(0, aggregator.oracleRequestBatchSize),
                    currentPayout: aggregator.latestConfirmedRound.currentPayout.slice(0, aggregator.oracleRequestBatchSize),
                    mediansFulfilled: aggregator.latestConfirmedRound.mediansFulfilled.slice(0, aggregator.oracleRequestBatchSize),
                    errorsFulfilled: aggregator.latestConfirmedRound.errorsFulfilled.slice(0, aggregator.oracleRequestBatchSize),
                    oraclePubkeysData: aggregator.latestConfirmedRound.oraclePubkeysData.filter((pubkey) => !web3_js_1.PublicKey.default.equals(pubkey)),
                },
            };
            return JSON.parse(JSON.stringify(parsedAggregator, sbv2_utils_1.jsonReplacers));
        }
        this.logger.log(await (0, sbv2_utils_1.prettyPrintAggregator)(aggregatorAccount, aggregator, true, true, flags.jobs));
        if (flags.oraclePubkeysData) {
            this.logger.log((0, sbv2_utils_1.chalkString)("oraclePubkeyData", "\n" +
                aggregator.currentRound.oraclePubkeysData
                    .filter((pubkey) => !web3_js_1.PublicKey.default.equals(pubkey))
                    .map((pubkey) => pubkey.toString())
                    .join("\n")));
        }
    }
    async catch(error) {
        super.catch(error, "failed to print aggregator account");
    }
}
exports.default = AggregatorPrint;
AggregatorPrint.enableJsonFlag = true;
AggregatorPrint.description = "Print the deserialized Switchboard aggregator account";
AggregatorPrint.aliases = ["aggregator:print"];
AggregatorPrint.flags = {
    ...BaseCommand_1.default.flags,
    jobs: core_1.Flags.boolean({
        description: "output job definitions",
        default: false,
    }),
    oraclePubkeysData: core_1.Flags.boolean({
        char: "o",
        description: "print the assigned oracles for the current round",
    }),
};
AggregatorPrint.args = [
    {
        name: "aggregatorKey",
        description: "public key of the aggregator account to deserialize",
    },
];
AggregatorPrint.examples = [
    "$ sbv2 aggregator:print GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR",
];
