"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const sbv2_utils_1 = require("@switchboard-xyz/sbv2-utils");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const BaseCommand_1 = tslib_1.__importDefault(require("../../../BaseCommand"));
class AggregatorPermissionPrint extends BaseCommand_1.default {
    async run() {
        const { args } = await this.parse(AggregatorPermissionPrint);
        const aggregatorAccount = new switchboard_v2_1.AggregatorAccount({
            program: this.program,
            publicKey: new web3_js_1.PublicKey(args.aggregatorKey),
        });
        const aggregator = await aggregatorAccount.loadData();
        const queueAccount = new switchboard_v2_1.OracleQueueAccount({
            program: this.program,
            publicKey: aggregator.queuePubkey,
        });
        const queue = await queueAccount.loadData();
        const [permissionAccount] = switchboard_v2_1.PermissionAccount.fromSeed(this.program, queue.authority, queueAccount.publicKey, aggregatorAccount.publicKey);
        try {
            const permission = await permissionAccount.loadData();
            this.logger.log(await (0, sbv2_utils_1.prettyPrintPermissions)(permissionAccount, permission));
        }
        catch {
            this.logger.error(`failed to find a permission account`);
        }
    }
    async catch(error) {
        super.catch(error, "failed to print aggregator permission account");
    }
}
exports.default = AggregatorPermissionPrint;
AggregatorPermissionPrint.description = "Print the permission account associated with a Switchboard aggregator account";
AggregatorPermissionPrint.aliases = [
    "aggregator:permission:print",
    "aggregator:print:permission",
];
AggregatorPermissionPrint.flags = {
    ...BaseCommand_1.default.flags,
};
AggregatorPermissionPrint.args = [
    {
        name: "aggregatorKey",
        description: "public key of the aggregator account to fetch permission account and deserialize",
    },
];
AggregatorPermissionPrint.examples = [
    "$ sbv2 aggregator:permission:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4",
];
