"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregatorIllegalRoundOpenCall = exports.InputFileNotFound = exports.OutputFileExistsNoForce = exports.InvalidKeypairFsPathProvided = exports.InvalidKeypairProvided = exports.AuthorityMismatch = exports.NoPayerKeypairProvided = void 0;
class NoPayerKeypairProvided extends Error {
    constructor() {
        super(`need to provide --keypair flag to pay for any onchain accounts`);
        Object.setPrototypeOf(this, NoPayerKeypairProvided.prototype);
    }
}
exports.NoPayerKeypairProvided = NoPayerKeypairProvided;
class AuthorityMismatch extends Error {
    constructor(message = "authority keypair does not match expected authority") {
        super(message);
        Object.setPrototypeOf(this, AuthorityMismatch.prototype);
    }
}
exports.AuthorityMismatch = AuthorityMismatch;
class InvalidKeypairProvided extends Error {
    constructor(keypairPath) {
        super(`failed to load keypair resource ${keypairPath}`);
        Object.setPrototypeOf(this, InvalidKeypairProvided.prototype);
    }
}
exports.InvalidKeypairProvided = InvalidKeypairProvided;
class InvalidKeypairFsPathProvided extends Error {
    constructor(keypairPath) {
        super(`no file found at ${keypairPath}`);
        Object.setPrototypeOf(this, InvalidKeypairFsPathProvided.prototype);
    }
}
exports.InvalidKeypairFsPathProvided = InvalidKeypairFsPathProvided;
class OutputFileExistsNoForce extends Error {
    constructor(fsPath) {
        super(`output file exists. Run the command with '--force' to overwrite it (${fsPath})`);
        Object.setPrototypeOf(this, OutputFileExistsNoForce.prototype);
    }
}
exports.OutputFileExistsNoForce = OutputFileExistsNoForce;
class InputFileNotFound extends Error {
    constructor(fsPath) {
        super(`failed to find input file (${fsPath})`);
        Object.setPrototypeOf(this, InputFileNotFound.prototype);
    }
}
exports.InputFileNotFound = InputFileNotFound;
class AggregatorIllegalRoundOpenCall extends Error {
    constructor(message = "") {
        super(`aggregator update round called too early: ${message}`);
        Object.setPrototypeOf(this, AggregatorIllegalRoundOpenCall.prototype);
    }
}
exports.AggregatorIllegalRoundOpenCall = AggregatorIllegalRoundOpenCall;
