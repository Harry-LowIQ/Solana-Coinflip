"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsProvider = void 0;
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const fs = tslib_1.__importStar(require("fs"));
const path = tslib_1.__importStar(require("path"));
const utils_1 = require("../../utils");
const logging_1 = require("./logging");
class FsProvider {
    constructor(dataDirectory, logger = logging_1.DEFAULT_LOGGER) {
        this.logger = logger;
        this.dataDir = dataDirectory;
        this.keypairPath = path.join(this.dataDir, ".keypairs");
        fs.mkdirSync(this.keypairPath, { recursive: true });
    }
    saveKeypair(keypair) {
        const keypairFullPath = path.join(this.keypairPath, `${keypair.publicKey}.json`);
        this.logger.debug(`${chalk_1.default.green("saved job keypair to:")} ${keypairFullPath}`);
        fs.writeFileSync(keypairFullPath, `[${keypair.secretKey}]`);
    }
    loadKeypair(publicKey) {
        const keypairFullPath = path.join(this.keypairPath, `${publicKey}.json`);
        if (fs.existsSync(keypairFullPath)) {
            const u8Array = new Uint8Array(JSON.parse(fs.readFileSync(keypairFullPath, "utf-8")));
            return web3_js_1.Keypair.fromSecretKey(u8Array);
        }
    }
    saveAccount(file, account) {
        fs.writeFileSync(file, JSON.stringify(account, utils_1.pubKeyConverter, 2));
    }
}
exports.FsProvider = FsProvider;
// export const Keypair.fromSeed(new Uint8Array(32).fill(1))_PROVIDER = new FsProvider(".");
