"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.packAndSend = void 0;
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
async function packAndSend(program, ixnsBatch, ixnsBatch2, signers, feePayer) {
    const signatures = [];
    const { blockhash } = await program.provider.connection.getLatestBlockhash();
    const packedTransactions = (0, switchboard_v2_1.packInstructions)(ixnsBatch, feePayer, blockhash);
    const signedTransactions = (0, switchboard_v2_1.signTransactions)(packedTransactions, signers);
    // const signedTxs = await (
    //   program.provider as anchor.AnchorProvider
    // ).wallet.signAllTransactions(signedTransactions);
    for (let k = 0; k < packedTransactions.length; k += 1) {
        const tx = signedTransactions[k];
        signatures.push(program.provider.connection.sendTransaction(tx, signers, {
            skipPreflight: true,
            maxRetries: 10,
        }));
    }
    await Promise.all(signatures);
    if (ixnsBatch2 && ixnsBatch2.length > 0) {
        const packedTransactions2 = (0, switchboard_v2_1.packInstructions)(ixnsBatch2, feePayer, blockhash);
        const signedTransactions2 = (0, switchboard_v2_1.signTransactions)(packedTransactions2, signers);
        const signedTxs2 = await program.provider.wallet.signAllTransactions(signedTransactions2);
        for (let k = 0; k < packedTransactions2.length; k += 1) {
            const tx = signedTxs2[k];
            const rawTx = tx.serialize();
            signatures.push(program.provider.connection.sendRawTransaction(rawTx, {
                skipPreflight: true,
                maxRetries: 10,
            }));
        }
    }
    return Promise.all(signatures);
}
exports.packAndSend = packAndSend;
