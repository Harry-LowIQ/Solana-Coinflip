"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyProgramHasPayer = exports.getProgramPayer = exports.programHasPayer = exports.getNewProgram = exports.loadAnchor = void 0;
const tslib_1 = require("tslib");
const anchor = tslib_1.__importStar(require("@project-serum/anchor"));
const web3_js_1 = require("@solana/web3.js");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
const types_1 = require("../types");
const loadAnchor = async (cluster, connection, authority) => {
    let PID;
    switch (cluster) {
        case "devnet": {
            PID = switchboard_v2_1.SBV2_DEVNET_PID;
            break;
        }
        case "mainnet-beta": {
            PID = switchboard_v2_1.SBV2_MAINNET_PID;
            break;
        }
        case "testnet": {
            throw new Error(`${cluster} PID not implemented yet`);
        }
    }
    const programId = new anchor.web3.PublicKey(PID);
    const keypair = authority
        ? authority
        : anchor.web3.Keypair.generate(); // no keypair provided, defaulting to dummy keypair
    const wallet = new anchor.Wallet(keypair);
    const provider = new anchor.AnchorProvider(connection, wallet, {
        commitment: "finalized",
        // preflightCommitment: "finalized",
    });
    const anchorIdl = await anchor.Program.fetchIdl(programId, provider);
    if (!anchorIdl)
        throw new Error(`failed to read idl for ${programId}`);
    // fs.writeFileSync(
    //   `${programId}.json`,
    //   JSON.stringify(anchorIdl, undefined, 2)
    // );
    const program = new anchor.Program(anchorIdl, programId, provider);
    return program;
};
exports.loadAnchor = loadAnchor;
const getNewProgram = (program, keypair) => {
    const wallet = new anchor.Wallet(keypair);
    const provider = new anchor.AnchorProvider(program.provider.connection, wallet, {
        commitment: "finalized",
        // preflightCommitment: "finalized",
    });
    const programId = program.programId;
    const anchorIdl = program.idl;
    if (!anchorIdl)
        throw new Error(`failed to read idl for ${programId}`);
    return new anchor.Program(anchorIdl, programId, provider);
};
exports.getNewProgram = getNewProgram;
const programHasPayer = (program) => {
    const payer = (0, switchboard_v2_1.programWallet)(program);
    return !payer.publicKey.equals(web3_js_1.Keypair.fromSeed(new Uint8Array(32).fill(1)).publicKey);
};
exports.programHasPayer = programHasPayer;
const getProgramPayer = (program) => {
    if ((0, exports.programHasPayer)(program))
        return (0, switchboard_v2_1.programWallet)(program);
    throw new types_1.NoPayerKeypairProvided();
};
exports.getProgramPayer = getProgramPayer;
const verifyProgramHasPayer = (program) => {
    if ((0, exports.programHasPayer)(program))
        return;
    throw new types_1.NoPayerKeypairProvided();
};
exports.verifyProgramHasPayer = verifyProgramHasPayer;
