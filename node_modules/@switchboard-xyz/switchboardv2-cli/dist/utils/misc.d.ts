/// <reference types="node" />
/// <reference types="bn.js" />
import * as anchor from "@project-serum/anchor";
import { PublicKey } from "@solana/web3.js";
import { AggregatorAccount, CrankAccount, JobAccount, LeaseAccount, OracleAccount, OracleQueueAccount, PermissionAccount, ProgramStateAccount, SwitchboardPermission, SwitchboardPermissionValue } from "@switchboard-xyz/switchboard-v2";
import Big from "big.js";
export declare const getArrayOfSizeN: (number_: number) => number[];
export declare const toPermissionString: (permission: SwitchboardPermissionValue) => string;
export declare enum VrfStatus {
    STATUS_NONE = "statusNone",
    STATUS_REQUESTING = "statusRequesting",
    STATUS_VERIFYING = "statusVerifying",
    STATUS_VERIFIED = "statusVerifying",
    STATUS_CALLBACK_SUCCESS = "statusCallbackSuccess",
    STATUS_VERIFY_FAILURE = "statusVerifyFailure"
}
export declare const toVrfStatus1: (status: object) => string;
export declare const toVrfStatus: (status: object) => VrfStatus | "NONE";
export declare const toPermission: (permissionString: string) => SwitchboardPermission | "NONE";
export declare const pubKeyConverter: (key: any, value: any) => any;
export declare const pubKeyReviver: (key: string, value: any) => any;
export declare const chalkString: (label: string, value: string | number | boolean | PublicKey | Big | anchor.BN, padding?: number) => string;
export declare const buffer2string: (buf: Buffer | string | ArrayBuffer) => string;
export declare function toDateString(d: Date | undefined): string;
export declare function anchorBNtoDateString(ts: anchor.BN): string;
export declare function toDateTimeString(d: Date | undefined): string;
export declare function anchorBNtoDateTimeString(ts: anchor.BN): string;
export declare const isJobAccount: (program: anchor.Program, publicKey: PublicKey) => Promise<JobAccount | undefined>;
export declare const isAggregatorAccount: (program: anchor.Program, publicKey: PublicKey) => Promise<AggregatorAccount | undefined>;
export declare const isOracleAccount: (program: anchor.Program, publicKey: PublicKey) => Promise<OracleAccount | undefined>;
export declare const isCrankAccount: (program: anchor.Program, publicKey: PublicKey) => Promise<CrankAccount | undefined>;
export declare const isOracleQueueAccount: (program: anchor.Program, publicKey: PublicKey) => Promise<OracleQueueAccount | undefined>;
export declare const isPermissionAccount: (program: anchor.Program, publicKey: PublicKey) => Promise<PermissionAccount | undefined>;
export declare const isLeaseAccount: (program: anchor.Program, publicKey: PublicKey) => Promise<LeaseAccount | undefined>;
export declare const isProgramStateAccount: (program: anchor.Program, publicKey: PublicKey) => Promise<ProgramStateAccount | undefined>;
