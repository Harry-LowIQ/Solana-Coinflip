"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadSwitchboardAccount = exports.findAccountType = exports.SWITCHBOARD_DISCRIMINATOR_MAP = exports.SWITCHBOARD_ACCOUNT_TYPES = exports.InvalidSwitchboardAccount = void 0;
const tslib_1 = require("tslib");
const anchor = tslib_1.__importStar(require("@project-serum/anchor"));
const anchor_1 = require("@project-serum/anchor");
const switchboard_v2_1 = require("@switchboard-xyz/switchboard-v2");
class InvalidSwitchboardAccount extends Error {
    constructor(message = "failed to match account type by discriminator") {
        super(message);
        Object.setPrototypeOf(this, InvalidSwitchboardAccount.prototype);
    }
}
exports.InvalidSwitchboardAccount = InvalidSwitchboardAccount;
exports.SWITCHBOARD_ACCOUNT_TYPES = [
    "JobAccountData",
    "AggregatorAccountData",
    "OracleAccountData",
    "OracleQueueAccountData",
    "PermissionAccountData",
    "LeaseAccountData",
    "ProgramStateAccountData",
    "VrfAccountData",
    "SbState",
    "BUFFERxx",
    "CrankAccountData",
];
exports.SWITCHBOARD_DISCRIMINATOR_MAP = new Map(exports.SWITCHBOARD_ACCOUNT_TYPES.map((accountType) => [
    accountType,
    anchor.BorshAccountsCoder.accountDiscriminator(accountType),
]));
// should also check if pubkey is a token account
const findAccountType = async (program, publicKey) => {
    const account = await program.provider.connection.getAccountInfo(publicKey);
    if (!account) {
        throw new Error(`failed to fetch account info for ${publicKey}`);
    }
    const accountDiscriminator = account.data.slice(0, anchor_1.ACCOUNT_DISCRIMINATOR_SIZE);
    for (const [name, discriminator] of exports.SWITCHBOARD_DISCRIMINATOR_MAP.entries()) {
        if (Buffer.compare(accountDiscriminator, discriminator) === 0) {
            return name;
        }
    }
    throw new InvalidSwitchboardAccount();
};
exports.findAccountType = findAccountType;
const loadSwitchboardAccount = async (program, publicKey) => {
    const accountType = await (0, exports.findAccountType)(program, publicKey);
    switch (accountType) {
        case "JobAccountData": {
            return [accountType, new switchboard_v2_1.JobAccount({ program, publicKey })];
        }
        case "AggregatorAccountData": {
            return [accountType, new switchboard_v2_1.AggregatorAccount({ program, publicKey })];
        }
        case "OracleAccountData": {
            return [accountType, new switchboard_v2_1.OracleAccount({ program, publicKey })];
        }
        case "PermissionAccountData": {
            return [accountType, new switchboard_v2_1.PermissionAccount({ program, publicKey })];
        }
        case "LeaseAccountData": {
            return [accountType, new switchboard_v2_1.LeaseAccount({ program, publicKey })];
        }
        case "OracleQueueAccountData": {
            return [accountType, new switchboard_v2_1.OracleQueueAccount({ program, publicKey })];
        }
        case "CrankAccountData": {
            return [accountType, new switchboard_v2_1.CrankAccount({ program, publicKey })];
        }
        case "SbState":
        case "ProgramStateAccountData": {
            return [accountType, new switchboard_v2_1.ProgramStateAccount({ program, publicKey })];
        }
        case "VrfAccountData": {
            return [accountType, new switchboard_v2_1.VrfAccount({ program, publicKey })];
        }
    }
    throw new InvalidSwitchboardAccount();
};
exports.loadSwitchboardAccount = loadSwitchboardAccount;
