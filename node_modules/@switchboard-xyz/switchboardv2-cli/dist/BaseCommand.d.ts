/// <reference types="bn.js" />
import { Command } from "@oclif/core";
import * as anchor from "@project-serum/anchor";
import { Cluster, Connection, Keypair, PublicKey } from "@solana/web3.js";
import { CliConfig, ConfigParameter } from "./config";
import { CommandContext } from "./types/context/context";
import { LogProvider } from "./types/context/logging";
declare abstract class BaseCommand extends Command {
    static flags: {
        verbose: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        silent: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        mainnetBeta: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        rpcUrl: import("@oclif/core/lib/interfaces").OptionFlag<string>;
        programId: import("@oclif/core/lib/interfaces").OptionFlag<string>;
        keypair: import("@oclif/core/lib/interfaces").OptionFlag<string>;
    };
    silent: boolean;
    verbose: boolean;
    cluster: Cluster;
    connection: Connection;
    cliConfig: CliConfig;
    logger: LogProvider;
    context: CommandContext;
    program: anchor.Program;
    payerKeypair: Keypair;
    init(): Promise<void>;
    catch(error: any, message?: string): Promise<void>;
    /** Load an authority from a CLI flag and optionally check if it matches the expected account authority */
    loadAuthority(authorityPath: string | unknown, expectedAuthority?: PublicKey): Promise<Keypair>;
    mainnetCheck(): void;
    loadConfig(): void;
    saveConfig(config: CliConfig): void;
    setConfig(parameter: ConfigParameter, value?: string): void;
    getRpcUrl(cluster: Cluster): string;
    getTokenAmount(value: string, decimals?: number): anchor.BN;
}
export default BaseCommand;
