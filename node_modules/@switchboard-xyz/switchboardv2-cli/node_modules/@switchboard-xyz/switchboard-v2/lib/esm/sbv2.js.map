{"version":3,"file":"sbv2.js","sourceRoot":"","sources":["../../src/sbv2.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable @typescript-eslint/no-non-null-asserted-optional-chain */\nimport * as anchor from \"@project-serum/anchor\";\nimport * as spl from \"@solana/spl-token-v2\";\nimport {\n  AccountInfo,\n  AccountMeta,\n  clusterApiUrl,\n  ConfirmOptions,\n  Connection,\n  Keypair,\n  PublicKey,\n  sendAndConfirmTransaction,\n  Signer,\n  SystemProgram,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport assert from \"assert\";\nimport Big from \"big.js\";\nimport * as crypto from \"crypto\";\n/*eslint-disable import/extensions */\nimport protos from \"./protos/index.js\";\n\nexport type SwitchboardProgram = anchor.Program;\n\n/**\n * Switchboard Devnet Program ID\n * 2TfB33aLaneQb5TNVwyDz3jSZXS6jdW2ARw1Dgf84XCG\n */\nexport const SBV2_DEVNET_PID = new PublicKey(\n  \"2TfB33aLaneQb5TNVwyDz3jSZXS6jdW2ARw1Dgf84XCG\"\n);\n/**\n * Switchboard Mainnet Program ID\n * SW1TCH7qEPTdLsDHRgPuMQjbQxKdH2aBStViMFnt64f\n */\nexport const SBV2_MAINNET_PID = new PublicKey(\n  \"SW1TCH7qEPTdLsDHRgPuMQjbQxKdH2aBStViMFnt64f\"\n);\n\nexport const GOVERNANCE_PID = new PublicKey(\n  \"GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw\"\n  // \"2iNnEMZuLk2TysefLvXtS6kyvCFC7CDUTLLeatVgRend\"\n);\n\n/**\n * Load the Switchboard Program ID for a given cluster\n * @param cluster solana cluster to fetch program ID for\n * @return Switchboard Program ID Public Key\n */\nexport function getSwitchboardPid(\n  cluster: \"devnet\" | \"mainnet-beta\"\n): PublicKey {\n  switch (cluster) {\n    case \"devnet\":\n      return SBV2_DEVNET_PID;\n    case \"mainnet-beta\":\n      return SBV2_MAINNET_PID;\n    default:\n      throw new Error(`no Switchboard PID associated with cluster ${cluster}`);\n  }\n}\n\n/**\n * Load the Switchboard Program for a given cluster\n * @param cluster solana cluster to interact with\n * @param connection optional Connection object to use for rpc request\n * @param payerKeypair optional Keypair to use for onchain txns. If ommited, a dummy keypair will be used and onchain txns will fail\n * @param confirmOptions optional confirmation options for rpc request\n * @return Switchboard Program\n */\nexport async function loadSwitchboardProgram(\n  cluster: \"devnet\" | \"mainnet-beta\",\n  connection = new Connection(clusterApiUrl(cluster)),\n  payerKeypair?: Keypair,\n  confirmOptions: ConfirmOptions = {\n    commitment: \"confirmed\",\n  }\n): Promise<SwitchboardProgram> {\n  const DEFAULT_KEYPAIR = Keypair.fromSeed(new Uint8Array(32).fill(1));\n  const programId = getSwitchboardPid(cluster);\n  const wallet: AnchorWallet = payerKeypair\n    ? new AnchorWallet(payerKeypair)\n    : new AnchorWallet(DEFAULT_KEYPAIR);\n  const provider = new anchor.AnchorProvider(\n    connection,\n    wallet,\n    confirmOptions\n  );\n\n  const anchorIdl = await anchor.Program.fetchIdl(programId, provider);\n  if (!anchorIdl) {\n    throw new Error(`failed to read idl for ${cluster} ${programId}`);\n  }\n\n  return new anchor.Program(anchorIdl, programId, provider);\n}\n\n// should also check if pubkey is a token account\nexport const findAccountName = (\n  program: SwitchboardProgram,\n  accountInfo: AccountInfo<Buffer>\n): string => {\n  const accountDiscriminator = accountInfo.data.slice(\n    0,\n    anchor.ACCOUNT_DISCRIMINATOR_SIZE\n  );\n\n  for (const accountDef of program.idl.accounts) {\n    const typeDiscriminator = anchor.BorshAccountsCoder.accountDiscriminator(\n      accountDef.name\n    );\n    if (Buffer.compare(accountDiscriminator, typeDiscriminator) === 0) {\n      return accountDef.name;\n    }\n  }\n\n  throw new Error(\"failed to match account type by discriminator\");\n};\n\n/** Callback to pass deserialized account data when updated on-chain */\nexport type OnAccountChangeCallback = (accountData: any) => void;\n\nexport function watchSwitchboardAccount(\n  program: SwitchboardProgram,\n  publicKey: PublicKey,\n  accountName: string,\n  callback: OnAccountChangeCallback\n): number {\n  // const accountName = await findAccountName(program, publicKey);\n  const accountDef = program.idl.accounts.find((a) => a.name === accountName);\n  if (!accountDef) {\n    throw new Error(`Failed to find account ${accountName} in switchboard IDL`);\n  }\n  const coder = new anchor.BorshAccountsCoder(program.idl);\n\n  return program.provider.connection.onAccountChange(\n    publicKey,\n    (accountInfo, context) => {\n      const data = coder.decode(accountName, accountInfo?.data);\n      callback(data);\n    }\n  );\n}\n\n/**\n * Switchboard precisioned representation of numbers.\n */\nexport class SwitchboardDecimal {\n  public constructor(\n    public readonly mantissa: anchor.BN,\n    public readonly scale: number\n  ) {}\n\n  /**\n   * Convert untyped object to a Switchboard decimal, if possible.\n   * @param obj raw object to convert from\n   * @return SwitchboardDecimal\n   */\n  public static from(obj: any): SwitchboardDecimal {\n    return new SwitchboardDecimal(new anchor.BN(obj.mantissa), obj.scale);\n  }\n\n  /**\n   * Convert a Big.js decimal to a Switchboard decimal.\n   * @param big a Big.js decimal\n   * @return a SwitchboardDecimal\n   */\n  public static fromBig(big: Big): SwitchboardDecimal {\n    // Round to fit in Switchboard Decimal\n    // TODO: smarter logic.\n    big = big.round(20);\n    let mantissa: anchor.BN = new anchor.BN(big.c.join(\"\"), 10);\n    // Set the scale. Big.exponenet sets scale from the opposite side\n    // SwitchboardDecimal does.\n    let scale = big.c.slice(1).length - big.e;\n\n    if (scale < 0) {\n      mantissa = mantissa.mul(\n        new anchor.BN(10, 10).pow(new anchor.BN(Math.abs(scale), 10))\n      );\n      scale = 0;\n    }\n    if (scale < 0) {\n      throw new Error(`SwitchboardDecimal: Unexpected negative scale.`);\n    }\n    if (scale >= 28) {\n      throw new Error(\"SwitchboardDecimalExcessiveScaleError\");\n    }\n\n    // Set sign for the coefficient (mantissa)\n    mantissa = mantissa.mul(new anchor.BN(big.s, 10));\n\n    const result = new SwitchboardDecimal(mantissa, scale);\n    if (big.sub(result.toBig()).abs().gt(new Big(0.00005))) {\n      throw new Error(\n        `SwitchboardDecimal: Converted decimal does not match original:\\n` +\n          `out: ${result.toBig().toNumber()} vs in: ${big.toNumber()}\\n` +\n          `-- result mantissa and scale: ${result.mantissa.toString()} ${result.scale.toString()}\\n` +\n          `${result} ${result.toBig()}`\n      );\n    }\n    return result;\n  }\n\n  /**\n   * SwitchboardDecimal equality comparator.\n   * @param other object to compare to.\n   * @return true iff equal\n   */\n  public eq(other: SwitchboardDecimal): boolean {\n    return this.mantissa.eq(other.mantissa) && this.scale === other.scale;\n  }\n\n  /**\n   * Convert SwitchboardDecimal to big.js Big type.\n   * @return Big representation\n   */\n  public toBig(): Big {\n    let mantissa: anchor.BN = new anchor.BN(this.mantissa, 10);\n    let s = 1;\n    const c: Array<number> = [];\n    const ZERO = new anchor.BN(0, 10);\n    const TEN = new anchor.BN(10, 10);\n    if (mantissa.lt(ZERO)) {\n      s = -1;\n      mantissa = mantissa.abs();\n    }\n    while (mantissa.gt(ZERO)) {\n      c.unshift(mantissa.mod(TEN).toNumber());\n      mantissa = mantissa.div(TEN);\n    }\n    const e = c.length - this.scale - 1;\n    const result = new Big(0);\n    if (c.length === 0) {\n      return result;\n    }\n    result.s = s;\n    result.c = c;\n    result.e = e;\n    return result;\n  }\n\n  toString() {\n    this.toBig().toString();\n  }\n}\n\n/**\n * Input parameters for constructing wrapped representations of Switchboard accounts.\n */\nexport interface AccountParams {\n  /**\n   * program referencing the Switchboard program and IDL.\n   */\n  program: SwitchboardProgram;\n  /**\n   * Public key of the account being referenced. This will always be populated\n   * within the account wrapper.\n   */\n  publicKey?: PublicKey;\n  /**\n   * Keypair of the account being referenced. This may not always be populated.\n   */\n  keypair?: Keypair;\n}\n\n/**\n * Input parameters initializing program state.\n */\nexport interface ProgramInitParams {\n  mint?: PublicKey;\n  daoMint?: PublicKey;\n}\nexport interface ProgramConfigParams {\n  mint?: PublicKey;\n  daoMint?: PublicKey;\n}\n\n/**\n * Input parameters for transferring from Switchboard token vault.\n */\nexport interface VaultTransferParams {\n  amount: anchor.BN;\n}\n\n/**\n * Account type representing Switchboard global program state.\n */\nexport class ProgramStateAccount {\n  static accountName = \"SbState\";\n\n  program: SwitchboardProgram;\n\n  publicKey: PublicKey;\n\n  keypair?: Keypair;\n\n  /**\n   * ProgramStateAccount constructor\n   * @param params initialization params.\n   */\n  public constructor(params: AccountParams) {\n    if (params.keypair === undefined && params.publicKey === undefined) {\n      throw new Error(\n        `${this.constructor.name}: User must provide either a publicKey or keypair for account use.`\n      );\n    }\n    if (params.keypair !== undefined && params.publicKey !== undefined) {\n      if (!params.publicKey.equals(params.keypair.publicKey)) {\n        throw new Error(\n          `${this.constructor.name}: provided pubkey and keypair mismatch.`\n        );\n      }\n    }\n    this.program = params.program;\n    this.keypair = params.keypair;\n    this.publicKey = params.publicKey ?? this.keypair.publicKey;\n  }\n\n  /**\n   * Constructs ProgramStateAccount from the static seed from which it was generated.\n   * @return ProgramStateAccount and PDA bump tuple.\n   */\n  static fromSeed(program: SwitchboardProgram): [ProgramStateAccount, number] {\n    const [statePubkey, stateBump] =\n      anchor.utils.publicKey.findProgramAddressSync(\n        [Buffer.from(\"STATE\")],\n        program.programId\n      );\n    return [\n      new ProgramStateAccount({ program, publicKey: statePubkey }),\n      stateBump,\n    ];\n  }\n\n  /**\n   * Load and parse ProgramStateAccount state based on the program IDL.\n   * @return ProgramStateAccount data parsed in accordance with the\n   * Switchboard IDL.\n   */\n  async loadData(): Promise<any> {\n    const state: any = await this.program.account.sbState.fetch(this.publicKey);\n    state.ebuf = undefined;\n    return state;\n  }\n\n  /**\n   * Fetch the Switchboard token mint specified in the program state account.\n   * @return Switchboard token mint.\n   */\n  async getTokenMint(): Promise<spl.Mint> {\n    const state = await this.loadData();\n    const switchTokenMint = spl.getMint(\n      this.program.provider.connection,\n      state.tokenMint\n    );\n    return switchTokenMint;\n  }\n\n  /**\n   * @return account size of the global ProgramStateAccount.\n   */\n  size(): number {\n    return this.program.account.sbState.size;\n  }\n\n  static async getOrCreate(\n    program: SwitchboardProgram,\n    params: ProgramInitParams\n  ): Promise<[ProgramStateAccount, number]> {\n    const [account, seed] = ProgramStateAccount.fromSeed(program);\n    try {\n      await account.loadData();\n    } catch (e) {\n      try {\n        await ProgramStateAccount.create(program, params);\n      } catch {}\n    }\n    return [account, seed];\n  }\n\n  /**\n   * Create and initialize the ProgramStateAccount.\n   * @param program Switchboard program representation holding connection and IDL.\n   * @param params.\n   * @return newly generated ProgramStateAccount.\n   */\n  static async create(\n    program: SwitchboardProgram,\n    params: ProgramInitParams\n  ): Promise<ProgramStateAccount> {\n    const payerKeypair = programWallet(program);\n    const [stateAccount, stateBump] = ProgramStateAccount.fromSeed(program);\n    const psa = new ProgramStateAccount({\n      program,\n      publicKey: stateAccount.publicKey,\n    });\n    // Short circuit if already created.\n    try {\n      await psa.loadData();\n      return psa;\n    } catch (e) {}\n    let mint = null;\n    let vault = null;\n    if (params.mint === undefined) {\n      const decimals = 9;\n      mint = await spl.createMint(\n        program.provider.connection,\n        payerKeypair,\n        payerKeypair.publicKey,\n        null,\n        decimals\n      );\n      const tokenVault = await spl.createAccount(\n        program.provider.connection,\n        payerKeypair,\n        mint,\n        Keypair.generate().publicKey\n      );\n      await spl.mintTo(\n        program.provider.connection,\n        payerKeypair,\n        mint,\n        tokenVault,\n        payerKeypair.publicKey,\n        100_000_000\n      );\n      vault = tokenVault;\n    } else {\n      mint = params.mint;\n      vault = await spl.createAccount(\n        program.provider.connection,\n        payerKeypair,\n        mint,\n        payerKeypair.publicKey\n      );\n    }\n    await program.methods\n      .programInit({\n        stateBump,\n      })\n      .accounts({\n        state: stateAccount.publicKey,\n        authority: payerKeypair.publicKey,\n        tokenMint: mint,\n        vault,\n        payer: payerKeypair.publicKey,\n        systemProgram: SystemProgram.programId,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n        daoMint: params.daoMint ?? mint,\n      })\n      .rpc();\n    return psa;\n  }\n\n  /**\n   * Transfer N tokens from the program vault to a specified account.\n   * @param to The recipient of the vault tokens.\n   * @param authority The vault authority required to sign the transfer tx.\n   * @param params specifies the amount to transfer.\n   * @return TransactionSignature\n   */\n  async vaultTransfer(\n    to: PublicKey,\n    authority: Keypair,\n    params: VaultTransferParams\n  ): Promise<TransactionSignature> {\n    const [statePubkey, stateBump] =\n      anchor.utils.publicKey.findProgramAddressSync(\n        [Buffer.from(\"STATE\")],\n        this.program.programId\n      );\n    const vault = (await this.loadData()).tokenVault;\n    return this.program.methods\n      .vaultTransfer({\n        stateBump,\n        amount: params.amount,\n      })\n      .accounts({\n        state: statePubkey,\n        to,\n        vault,\n        authority: authority.publicKey,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n      })\n      .signers([authority])\n      .rpc();\n  }\n}\n\n/**\n * Parameters to initialize an aggregator account.\n */\nexport interface AggregatorInitParams {\n  /**\n   *  Name of the aggregator to store on-chain.\n   */\n  name?: Buffer;\n  /**\n   *  Metadata of the aggregator to store on-chain.\n   */\n  metadata?: Buffer;\n  /**\n   *  Number of oracles to request on aggregator update.\n   */\n  batchSize: number;\n  /**\n   *  Minimum number of oracle responses required before a round is validated.\n   */\n  minRequiredOracleResults: number;\n  /**\n   *  Minimum number of feed jobs suggested to be successful before an oracle\n   *  sends a response.\n   */\n  minRequiredJobResults: number;\n  /**\n   *  Minimum number of seconds required between aggregator rounds.\n   */\n  minUpdateDelaySeconds: number;\n  /**\n   *  The queue to which this aggregator will be linked\n   */\n  queueAccount: OracleQueueAccount;\n  /**\n   *  unix_timestamp for which no feed update will occur before.\n   */\n  startAfter?: number;\n  /**\n   *  Change percentage required between a previous round and the current round.\n   *  If variance percentage is not met, reject new oracle responses.\n   */\n  varianceThreshold?: number;\n  /**\n   *  Number of seconds for which, even if the variance threshold is not passed,\n   *  accept new responses from oracles.\n   */\n  forceReportPeriod?: anchor.BN;\n  /**\n   *  unix_timestamp after which funds may be withdrawn from the aggregator.\n   *  null/undefined/0 means the feed has no expiration.\n   */\n  expiration?: anchor.BN;\n  /**\n   *  Optional pre-existing keypair to use for aggregator initialization.\n   */\n  keypair?: Keypair;\n  /**\n   *  An optional wallet for receiving kickbacks from job usage in feeds.\n   *  Defaults to token vault.\n   */\n  authorWallet?: PublicKey;\n  /**\n   *  If included, this keypair will be the aggregator authority rather than\n   *  the aggregator keypair.\n   */\n  authority?: PublicKey;\n}\n\n/**\n * Parameters for which oracles must submit for responding to update requests.\n */\nexport interface AggregatorSaveResultParams {\n  /**\n   *  Index in the list of oracles in the aggregator assigned to this round update.\n   */\n  oracleIdx: number;\n  /**\n   *  Reports that an error occured and the oracle could not send a value.\n   */\n  error: boolean;\n  /**\n   *  Value the oracle is responding with for this update.\n   */\n  value: Big;\n  /**\n   *  The minimum value this oracle has seen this round for the jobs listed in the\n   *  aggregator.\n   */\n  minResponse: Big;\n  /**\n   *  The maximum value this oracle has seen this round for the jobs listed in the\n   *  aggregator.\n   */\n  maxResponse: Big;\n  /**\n   *  List of protos.OracleJobs that were performed to produce this result.\n   */\n  jobs: Array<protos.OracleJob>;\n  /**\n   *  Authority of the queue the aggregator is attached to.\n   */\n  queueAuthority: PublicKey;\n  /**\n   *  Program token mint.\n   */\n  tokenMint: PublicKey;\n  /**\n   *  List of parsed oracles.\n   */\n  oracles: Array<any>;\n}\n\n/**\n * Parameters for creating and setting a history buffer for an aggregator\n */\nexport interface AggregatorSetHistoryBufferParams {\n  /*\n   * Authority keypair for the aggregator.\n   */\n  authority?: Keypair;\n  /*\n   * Number of elements for the history buffer to fit.\n   */\n  size: number;\n}\n\n/**\n * Parameters required to open an aggregator round\n */\nexport interface AggregatorOpenRoundParams {\n  /**\n   *  The oracle queue from which oracles are assigned this update.\n   */\n  oracleQueueAccount: OracleQueueAccount;\n  /**\n   *  The token wallet which will receive rewards for calling update on this feed.\n   */\n  payoutWallet: PublicKey;\n}\n\n/**\n * Switchboard wrapper for anchor program errors.\n */\nexport class SwitchboardError {\n  /**\n   *  The program containing the Switchboard IDL specifying error codes.\n   */\n  program: SwitchboardProgram;\n\n  /**\n   *  Stringified name of the error type.\n   */\n  name: string;\n\n  /**\n   *  Numerical SwitchboardError representation.\n   */\n  code: number;\n\n  /**\n   *  Message describing this error in detail.\n   */\n  msg?: string;\n\n  /**\n   * Converts a numerical error code to a SwitchboardError based on the program\n   * IDL.\n   * @param program the Switchboard program object containing the program IDL.\n   * @param code Error code to convert to a SwitchboardError object.\n   * @return SwitchboardError\n   */\n  static fromCode(program: SwitchboardProgram, code: number): SwitchboardError {\n    for (const e of program.idl.errors ?? []) {\n      if (code === e.code) {\n        const r = new SwitchboardError();\n        r.program = program;\n        r.name = e.name;\n        r.code = e.code;\n        r.msg = e.msg;\n        return r;\n      }\n    }\n    throw new Error(`Could not find SwitchboardError for error code ${code}`);\n  }\n}\n\n/**\n * Row structure of elements in the aggregator history buffer.\n */\nexport class AggregatorHistoryRow {\n  /**\n   *  Timestamp of the aggregator result.\n   */\n  timestamp: anchor.BN;\n\n  /**\n   *  Aggregator value at timestamp.\n   */\n  value: Big;\n\n  static from(buf: Buffer): AggregatorHistoryRow {\n    const timestamp = new anchor.BN(buf.slice(0, 8), \"le\");\n    // TODO(mgild): does this work for negative???\n    const mantissa = new anchor.BN(buf.slice(8, 24), \"le\");\n    const scale = buf.readUInt32LE(24);\n    const decimal = new SwitchboardDecimal(mantissa, scale);\n    const res = new AggregatorHistoryRow();\n    res.timestamp = timestamp;\n    res.value = decimal.toBig();\n    return res;\n  }\n}\n\nexport interface AggregatorSetBatchSizeParams {\n  batchSize: number;\n  authority?: Keypair;\n}\n\nexport interface AggregatorSetMinJobsParams {\n  minJobResults: number;\n  authority?: Keypair;\n}\n\nexport interface AggregatorSetMinOraclesParams {\n  minOracleResults: number;\n  authority?: Keypair;\n}\n\nexport interface AggregatorSetQueueParams {\n  queueAccount: OracleQueueAccount;\n  authority?: Keypair;\n}\n\nexport interface AggregatorSetUpdateIntervalParams {\n  newInterval: number;\n  authority?: Keypair;\n}\n\n/**\n * Account type representing an aggregator (data feed).\n */\nexport class AggregatorAccount {\n  static accountName = \"AggregatorAccountData\";\n\n  program: SwitchboardProgram;\n\n  publicKey: PublicKey;\n\n  keypair?: Keypair;\n\n  /**\n   * AggregatorAccount constructor\n   * @param params initialization params.\n   */\n  public constructor(params: AccountParams) {\n    if (params.keypair === undefined && params.publicKey === undefined) {\n      throw new Error(\n        `${this.constructor.name}: User must provide either a publicKey or keypair for account use.`\n      );\n    }\n    if (params.keypair !== undefined && params.publicKey !== undefined) {\n      if (!params.publicKey.equals(params.keypair.publicKey)) {\n        throw new Error(\n          `${this.constructor.name}: provided pubkey and keypair mismatch.`\n        );\n      }\n    }\n    this.program = params.program;\n    this.keypair = params.keypair;\n    this.publicKey = params.publicKey ?? this.keypair.publicKey;\n  }\n\n  static decode(\n    program: SwitchboardProgram,\n    accountInfo: AccountInfo<Buffer>\n  ): any {\n    const coder = new anchor.BorshAccountsCoder(program.idl);\n    const aggregator = coder.decode(\n      AggregatorAccount.accountName,\n      accountInfo?.data!\n    );\n    return aggregator;\n  }\n\n  /**\n   * Returns the aggregator's ID buffer in a stringified format.\n   * @param aggregator A preloaded aggregator object.\n   * @return The name of the aggregator.\n   */\n  static getName(aggregator: any): string {\n    // eslint-disable-next-line no-control-regex\n    return String.fromCharCode(...aggregator.name).replace(/\\u0000/g, \"\");\n  }\n\n  /**\n   * Load and parse AggregatorAccount state based on the program IDL.\n   * @return AggregatorAccount data parsed in accordance with the\n   * Switchboard IDL.\n   */\n  async loadData(): Promise<any> {\n    const aggregator: any =\n      await this.program.account.aggregatorAccountData.fetch(this.publicKey);\n    aggregator.ebuf = undefined;\n    return aggregator;\n  }\n\n  onChange(callback: OnAccountChangeCallback): number {\n    const coder = new anchor.BorshAccountsCoder(this.program.idl);\n    return this.program.provider.connection.onAccountChange(\n      this.publicKey,\n      (accountInfo, context) => {\n        const aggregator = coder.decode(\n          AggregatorAccount.accountName,\n          accountInfo?.data\n        );\n        callback(aggregator);\n      }\n    );\n  }\n\n  async onResult(\n    callback: (result: {\n      feedPubkey: PublicKey;\n      result: Big;\n      slot: anchor.BN;\n      timestamp: anchor.BN;\n      oracleValues: Big[];\n    }) => Promise<void>\n  ): Promise<number> {\n    return this.program.addEventListener(\n      \"AggregatorValueUpdateEvent\",\n      (event, slot) => {\n        const result = SwitchboardDecimal.from(\n          event.value as { mantissa: anchor.BN; scale: number }\n        ).toBig();\n        const oracleValues: Big[] = (\n          event.oracleValues as { mantissa: anchor.BN; scale: number }[]\n        ).map((v) => SwitchboardDecimal.from(v).toBig());\n        callback({\n          feedPubkey: event.feedPubkey as PublicKey,\n          result,\n          slot: event.slot as anchor.BN,\n          timestamp: event.timestamp as anchor.BN,\n          oracleValues,\n        });\n      }\n    );\n  }\n\n  async loadHistory(aggregator?: any): Promise<Array<AggregatorHistoryRow>> {\n    aggregator = aggregator ?? (await this.loadData());\n    if (aggregator.historyBuffer == PublicKey.default) {\n      return [];\n    }\n    const ROW_SIZE = 28;\n    let buffer =\n      (\n        await this.program.provider.connection.getAccountInfo(\n          aggregator.historyBuffer\n        )\n      )?.data ?? Buffer.from(\"\");\n    if (buffer.length < 12) {\n      return [];\n    }\n    const insertIdx = buffer.readUInt32LE(8) * ROW_SIZE;\n    // console.log(insertIdx);\n    buffer = buffer.slice(12);\n    const front = [];\n    const tail = [];\n    for (let i = 0; i < buffer.length; i += ROW_SIZE) {\n      if (i + ROW_SIZE > buffer.length) {\n        break;\n      }\n      const row = AggregatorHistoryRow.from(buffer.slice(i, i + ROW_SIZE));\n      if (row.timestamp.eq(new anchor.BN(0))) {\n        break;\n      }\n      if (i <= insertIdx) {\n        tail.push(row);\n      } else {\n        front.push(row);\n      }\n    }\n    return front.concat(tail);\n  }\n\n  /**\n   * Get the latest confirmed value stored in the aggregator account.\n   * @param aggregator Optional parameter representing the already loaded\n   * aggregator info.\n   * @return latest feed value\n   */\n  async getLatestValue(aggregator?: any, decimals = 20): Promise<Big | null> {\n    aggregator = aggregator ?? (await this.loadData());\n    if ((aggregator.latestConfirmedRound?.numSuccess ?? 0) === 0) {\n      return null;\n    }\n    const mantissa = new Big(\n      aggregator.latestConfirmedRound.result.mantissa.toString()\n    );\n    const scale = aggregator.latestConfirmedRound.result.scale;\n    const oldDp = Big.DP;\n    Big.DP = decimals;\n    const result: Big = mantissa.div(new Big(10).pow(scale));\n    Big.DP = oldDp;\n    return result;\n  }\n\n  /**\n   * Get the timestamp latest confirmed round stored in the aggregator account.\n   * @param aggregator Optional parameter representing the already loaded\n   * aggregator info.\n   * @return latest feed timestamp\n   */\n  async getLatestFeedTimestamp(aggregator?: any): Promise<anchor.BN> {\n    aggregator = aggregator ?? (await this.loadData());\n    if ((aggregator.latestConfirmedRound?.numSuccess ?? 0) === 0) {\n      throw new Error(\"Aggregator currently holds no value.\");\n    }\n    return aggregator.latestConfirmedRound.roundOpenTimestamp;\n  }\n\n  /**\n   * Speciifies if the aggregator settings recommend reporting a new value\n   * @param value The value which we are evaluating\n   * @param aggregator The loaded aggegator schema\n   * @returns boolean\n   */\n  static async shouldReportValue(\n    value: Big,\n    aggregator: any\n  ): Promise<boolean> {\n    if ((aggregator.latestConfirmedRound?.numSuccess ?? 0) === 0) {\n      return true;\n    }\n    const timestamp: anchor.BN = new anchor.BN(Math.round(Date.now() / 1000));\n    if (aggregator.startAfter.gt(timestamp)) {\n      return false;\n    }\n    const varianceThreshold: Big = SwitchboardDecimal.from(\n      aggregator.varianceThreshold\n    ).toBig();\n    const latestResult: Big = SwitchboardDecimal.from(\n      aggregator.latestConfirmedRound.result\n    ).toBig();\n    const forceReportPeriod: anchor.BN = aggregator.forceReportPeriod;\n    const lastTimestamp: anchor.BN =\n      aggregator.latestConfirmedRound.roundOpenTimestamp;\n    if (lastTimestamp.add(aggregator.forceReportPeriod).lt(timestamp)) {\n      return true;\n    }\n    let diff = safeDiv(latestResult, value);\n    if (diff.abs().gt(1)) {\n      diff = safeDiv(value, latestResult);\n    }\n    // I dont want to think about variance percentage when values cross 0.\n    // Changes the scale of what we consider a \"percentage\".\n    if (diff.lt(0)) {\n      return true;\n    }\n    const changePercent = new Big(1).minus(diff).mul(100);\n    return changePercent.gt(varianceThreshold);\n  }\n\n  /**\n   * Get the individual oracle results of the latest confirmed round.\n   * @param aggregator Optional parameter representing the already loaded\n   * aggregator info.\n   * @return latest results by oracle pubkey\n   */\n  async getConfirmedRoundResults(\n    aggregator?: any\n  ): Promise<Array<{ oracleAccount: OracleAccount; value: Big }>> {\n    aggregator = aggregator ?? (await this.loadData());\n    if ((aggregator.latestConfirmedRound?.numSuccess ?? 0) === 0) {\n      throw new Error(\"Aggregator currently holds no value.\");\n    }\n    const results: Array<{ oracleAccount: OracleAccount; value: Big }> = [];\n    for (let i = 0; i < aggregator.oracleRequestBatchSize; ++i) {\n      if (aggregator.latestConfirmedRound.mediansFulfilled[i] === true) {\n        results.push({\n          oracleAccount: new OracleAccount({\n            program: this.program,\n            publicKey: aggregator.latestConfirmedRound.oraclePubkeysData[i],\n          }),\n          value: SwitchboardDecimal.from(\n            aggregator.latestConfirmedRound.mediansData[i]\n          ).toBig(),\n        });\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Produces a hash of all the jobs currently in the aggregator\n   * @return hash of all the feed jobs.\n   */\n  produceJobsHash(jobs: Array<protos.OracleJob>): crypto.Hash {\n    const hash = crypto.createHash(\"sha256\");\n    for (const job of jobs) {\n      const jobHasher = crypto.createHash(\"sha256\");\n      jobHasher.update(protos.OracleJob.encodeDelimited(job).finish());\n      hash.update(jobHasher.digest());\n    }\n    return hash;\n  }\n\n  async loadCurrentRoundOracles(aggregator?: any): Promise<Array<any>> {\n    const coder = new anchor.BorshAccountsCoder(this.program.idl);\n\n    aggregator = aggregator ?? (await this.loadData());\n\n    const oracleAccountDatas = await anchor.utils.rpc.getMultipleAccounts(\n      this.program.provider.connection,\n      aggregator.currentRound?.oraclePubkeysData?.slice(\n        0,\n        aggregator.oracleRequestBatchSize\n      )\n    );\n    if (oracleAccountDatas === null) {\n      throw new Error(\"Failed to load aggregator oracles\");\n    }\n    return oracleAccountDatas.map((item) =>\n      coder.decode(\"OracleAccountData\", item.account.data)\n    );\n  }\n\n  async loadJobAccounts(aggregator?: any): Promise<Array<any>> {\n    const coder = new anchor.BorshAccountsCoder(this.program.idl);\n\n    aggregator = aggregator ?? (await this.loadData());\n\n    const jobAccountDatas = await anchor.utils.rpc.getMultipleAccounts(\n      this.program.provider.connection,\n      aggregator.jobPubkeysData.slice(0, aggregator.jobPubkeysSize)\n    );\n    if (jobAccountDatas === null) {\n      throw new Error(\"Failed to load feed jobs.\");\n    }\n    const jobs = jobAccountDatas.map((item) => {\n      return coder.decode(JobAccount.accountName, item.account.data);\n    });\n    return jobs;\n  }\n\n  /**\n   * Load and deserialize all jobs stored in this aggregator\n   * @return Array<protos.OracleJob>\n   */\n  async loadJobs(aggregator?: any): Promise<Array<protos.OracleJob>> {\n    const coder = new anchor.BorshAccountsCoder(this.program.idl);\n\n    aggregator = aggregator ?? (await this.loadData());\n\n    const jobAccountDatas = await anchor.utils.rpc.getMultipleAccounts(\n      this.program.provider.connection,\n      aggregator.jobPubkeysData.slice(0, aggregator.jobPubkeysSize)\n    );\n    if (jobAccountDatas === null) {\n      throw new Error(\"Failed to load feed jobs.\");\n    }\n    const jobs = jobAccountDatas.map((item) => {\n      const decoded = coder.decode(JobAccount.accountName, item.account.data);\n      return protos.OracleJob.decodeDelimited(decoded.data);\n    });\n    return jobs;\n  }\n\n  async loadHashes(aggregator?: any): Promise<Array<Buffer>> {\n    const coder = new anchor.BorshAccountsCoder(this.program.idl);\n\n    aggregator = aggregator ?? (await this.loadData());\n\n    const jobAccountDatas = await anchor.utils.rpc.getMultipleAccounts(\n      this.program.provider.connection,\n      aggregator.jobPubkeysData.slice(0, aggregator.jobPubkeysSize)\n    );\n    if (jobAccountDatas === null) {\n      throw new Error(\"Failed to load feed jobs.\");\n    }\n    const jobs = jobAccountDatas.map((item) => {\n      const decoded = coder.decode(JobAccount.accountName, item.account.data);\n      return decoded.hash;\n    });\n    return jobs;\n  }\n\n  /**\n   * Get the size of an AggregatorAccount on chain.\n   * @return size.\n   */\n  size(): number {\n    return this.program.account.aggregatorAccountData.size;\n  }\n\n  /**\n   * Create and initialize the AggregatorAccount.\n   * @param program Switchboard program representation holding connection and IDL.\n   * @param params.\n   * @return newly generated AggregatorAccount.\n   */\n  static async create(\n    program: SwitchboardProgram,\n    params: AggregatorInitParams\n  ): Promise<AggregatorAccount> {\n    const payerKeypair = programWallet(program);\n    const aggregatorAccount = params.keypair ?? anchor.web3.Keypair.generate();\n    const authority = params.authority ?? aggregatorAccount.publicKey;\n    const size = program.account.aggregatorAccountData.size;\n    const [stateAccount, stateBump] = ProgramStateAccount.fromSeed(program);\n    const state = await stateAccount.loadData();\n    await program.methods\n      .aggregatorInit({\n        name: (params.name ?? Buffer.from(\"\")).slice(0, 32),\n        metadata: (params.metadata ?? Buffer.from(\"\")).slice(0, 128),\n        batchSize: params.batchSize,\n        minOracleResults: params.minRequiredOracleResults,\n        minJobResults: params.minRequiredJobResults,\n        minUpdateDelaySeconds: params.minUpdateDelaySeconds,\n        varianceThreshold: SwitchboardDecimal.fromBig(\n          new Big(params.varianceThreshold ?? 0)\n        ),\n        forceReportPeriod: params.forceReportPeriod ?? new anchor.BN(0),\n        expiration: params.expiration ?? new anchor.BN(0),\n        stateBump,\n      })\n      .accounts({\n        aggregator: aggregatorAccount.publicKey,\n        authority,\n        queue: params.queueAccount.publicKey,\n        authorWallet: params.authorWallet ?? state.tokenVault,\n        programState: stateAccount.publicKey,\n      })\n      .signers([aggregatorAccount])\n      .preInstructions([\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: programWallet(program).publicKey,\n          newAccountPubkey: aggregatorAccount.publicKey,\n          space: size,\n          lamports:\n            await program.provider.connection.getMinimumBalanceForRentExemption(\n              size\n            ),\n          programId: program.programId,\n        }),\n      ])\n      .rpc();\n\n    return new AggregatorAccount({ program, keypair: aggregatorAccount });\n  }\n\n  async setBatchSize(\n    params: AggregatorSetBatchSizeParams\n  ): Promise<TransactionSignature> {\n    const program = this.program;\n    const authority =\n      params.authority ?? this.keypair ?? programWallet(this.program);\n    return program.methods\n      .aggregatorSetBatchSize({\n        batchSize: params.batchSize,\n      })\n      .accounts({\n        aggregator: this.publicKey,\n        authority: authority.publicKey,\n      })\n      .signers([authority])\n      .rpc();\n  }\n\n  async setVarianceThreshold(params: {\n    authority: Keypair;\n    threshold: Big;\n  }): Promise<TransactionSignature> {\n    const program = this.program;\n    const authority =\n      params.authority ?? this.keypair ?? programWallet(this.program);\n    return program.rpc.aggregatorSetVarianceThreshold(\n      {\n        varianceThreshold: SwitchboardDecimal.fromBig(params.threshold),\n      },\n      {\n        accounts: {\n          aggregator: this.publicKey,\n          authority: authority.publicKey,\n        },\n        signers: [authority],\n      }\n    );\n  }\n\n  async setMinJobs(\n    params: AggregatorSetMinJobsParams\n  ): Promise<TransactionSignature> {\n    const program = this.program;\n    const authority =\n      params.authority ?? this.keypair ?? programWallet(this.program);\n    return program.methods\n      .aggregatorSetMinJobs({\n        minJobResults: params.minJobResults,\n      })\n      .accounts({\n        aggregator: this.publicKey,\n        authority: authority.publicKey,\n      })\n      .signers([authority])\n      .rpc();\n  }\n\n  async setMinOracles(\n    params: AggregatorSetMinOraclesParams\n  ): Promise<TransactionSignature> {\n    const program = this.program;\n    const authority =\n      params.authority ?? this.keypair ?? programWallet(this.program);\n    return program.methods\n      .aggregatorSetMinOracles({\n        minOracleResults: params.minOracleResults,\n      })\n      .accounts({\n        aggregator: this.publicKey,\n        authority: authority.publicKey,\n      })\n      .signers([authority])\n      .rpc();\n  }\n\n  async setHistoryBuffer(\n    params: AggregatorSetHistoryBufferParams\n  ): Promise<TransactionSignature> {\n    const buffer = Keypair.generate();\n    const program = this.program;\n    const authority =\n      params.authority ?? this.keypair ?? programWallet(this.program);\n    const HISTORY_ROW_SIZE = 28;\n    const INSERT_IDX_SIZE = 4;\n    const DISCRIMINATOR_SIZE = 8;\n    const size =\n      params.size * HISTORY_ROW_SIZE + INSERT_IDX_SIZE + DISCRIMINATOR_SIZE;\n    return program.methods\n      .aggregatorSetHistoryBuffer({})\n      .accounts({\n        aggregator: this.publicKey,\n        authority: authority.publicKey,\n        buffer: buffer.publicKey,\n      })\n      .signers([authority, buffer])\n      .preInstructions([\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: programWallet(program).publicKey,\n          newAccountPubkey: buffer.publicKey,\n          space: size,\n          lamports:\n            await program.provider.connection.getMinimumBalanceForRentExemption(\n              size\n            ),\n          programId: program.programId,\n        }),\n      ])\n      .rpc();\n  }\n\n  async setUpdateInterval(\n    params: AggregatorSetUpdateIntervalParams\n  ): Promise<TransactionSignature> {\n    const authority =\n      params.authority ?? this.keypair ?? programWallet(this.program);\n    return this.program.methods\n      .aggregatorSetUpdateInterval({\n        newInterval: params.newInterval,\n      })\n      .accounts({\n        aggregator: this.publicKey,\n        authority: authority.publicKey,\n      })\n      .signers([authority])\n      .rpc();\n  }\n\n  async setQueue(\n    params: AggregatorSetQueueParams\n  ): Promise<TransactionSignature> {\n    const authority =\n      params.authority ?? this.keypair ?? programWallet(this.program);\n    return this.program.methods\n      .aggregatorSetQueue({})\n      .accounts({\n        aggregator: this.publicKey,\n        authority: authority.publicKey,\n        queue: params.queueAccount.publicKey,\n      })\n      .signers([authority])\n      .rpc();\n  }\n\n  /**\n   * RPC to add a new job to an aggregtor to be performed on feed updates.\n   * @param job JobAccount specifying another job for this aggregator to fulfill on update\n   * @return TransactionSignature\n   */\n  async addJob(\n    job: JobAccount,\n    authority?: Keypair,\n    weight = 1\n  ): Promise<TransactionSignature> {\n    authority = authority ?? this.keypair ?? programWallet(this.program);\n    return this.program.methods\n      .aggregatorAddJob({\n        weight,\n      })\n      .accounts({\n        aggregator: this.publicKey,\n        authority: authority.publicKey,\n        job: job.publicKey,\n      })\n      .signers([authority])\n      .rpc();\n  }\n\n  /**\n   * Prevent new jobs from being added to the feed.\n   * @param authority The current authroity keypair\n   * @return TransactionSignature\n   */\n  async lock(authority?: Keypair): Promise<TransactionSignature> {\n    authority = authority ?? this.keypair ?? programWallet(this.program);\n    return this.program.methods\n      .aggregatorLock({})\n      .accounts({\n        aggregator: this.publicKey,\n        authority: authority.publicKey,\n      })\n      .signers([authority])\n      .rpc();\n  }\n\n  /**\n   * Change the aggregator authority.\n   * @param currentAuthority The current authroity keypair\n   * @param newAuthority The new authority to set.\n   * @return TransactionSignature\n   */\n  async setAuthority(\n    newAuthority: PublicKey,\n    currentAuthority?: Keypair\n  ): Promise<TransactionSignature> {\n    currentAuthority =\n      currentAuthority ?? this.keypair ?? programWallet(this.program);\n    return this.program.methods\n      .aggregatorSetAuthority({})\n      .accounts({\n        aggregator: this.publicKey,\n        newAuthority,\n        authority: currentAuthority.publicKey,\n      })\n      .signers([currentAuthority])\n      .rpc();\n  }\n\n  /**\n   * RPC to remove a job from an aggregtor.\n   * @param job JobAccount to be removed from the aggregator\n   * @return TransactionSignature\n   */\n  async removeJob(\n    job: JobAccount,\n    authority?: Keypair\n  ): Promise<TransactionSignature> {\n    authority = authority ?? this.keypair ?? programWallet(this.program);\n    return this.program.methods\n      .aggregatorRemoveJob({})\n      .accounts({\n        aggregator: this.publicKey,\n        authority: authority.publicKey,\n        job: job.publicKey,\n      })\n      .signers([authority])\n      .rpc();\n  }\n\n  /**\n   * Opens a new round for the aggregator and will provide an incentivize reward\n   * to the caller\n   * @param params\n   * @return TransactionSignature\n   */\n  async openRound(\n    params: AggregatorOpenRoundParams\n  ): Promise<TransactionSignature> {\n    const [stateAccount, stateBump] = ProgramStateAccount.fromSeed(\n      this.program\n    );\n\n    const [leaseAccount, leaseBump] = LeaseAccount.fromSeed(\n      this.program,\n      params.oracleQueueAccount,\n      this\n    );\n    try {\n      await leaseAccount.loadData();\n    } catch (_) {\n      throw new Error(\n        \"A requested lease pda account has not been initialized.\"\n      );\n    }\n\n    const escrowPubkey = (await leaseAccount.loadData()).escrow;\n    const queue = await params.oracleQueueAccount.loadData();\n    const queueAuthority = queue.authority;\n\n    const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n      this.program,\n      queueAuthority,\n      params.oracleQueueAccount.publicKey,\n      this.publicKey\n    );\n    try {\n      await permissionAccount.loadData();\n    } catch (_) {\n      throw new Error(\n        \"A requested permission pda account has not been initialized.\"\n      );\n    }\n\n    return this.program.methods\n      .aggregatorOpenRound({\n        stateBump,\n        leaseBump,\n        permissionBump,\n      })\n      .accounts({\n        aggregator: this.publicKey,\n        lease: leaseAccount.publicKey,\n        oracleQueue: params.oracleQueueAccount.publicKey,\n        queueAuthority,\n        permission: permissionAccount.publicKey,\n        escrow: escrowPubkey,\n        programState: stateAccount.publicKey,\n        payoutWallet: params.payoutWallet,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n        dataBuffer: queue.dataBuffer,\n        mint: (await params.oracleQueueAccount.loadMint()).address,\n      })\n      .rpc();\n  }\n\n  async getOracleIndex(oraclePubkey: PublicKey): Promise<number> {\n    const aggregator = await this.loadData();\n    for (let i = 0; i < aggregator.oracleRequestBatchSize; i++) {\n      if (aggregator.currentRound.oraclePubkeysData[i].equals(oraclePubkey)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  async saveResult(\n    aggregator: any,\n    oracleAccount: OracleAccount,\n    params: AggregatorSaveResultParams\n  ): Promise<TransactionSignature> {\n    return (\n      await this.program.provider.sendAll([\n        {\n          tx: await this.saveResultTxn(aggregator, oracleAccount, params),\n          signers: [programWallet(this.program)],\n        },\n      ])\n    )[0];\n  }\n\n  /**\n   * RPC for an oracle to save a result to an aggregator round.\n   * @param oracleAccount The oracle account submitting a result.\n   * @param params\n   * @return TransactionSignature\n   */\n  async saveResultTxn(\n    aggregator: any,\n    oracleAccount: OracleAccount, // TODO: move to params.\n    params: AggregatorSaveResultParams\n  ): Promise<Transaction> {\n    let oracles = params.oracles ?? [];\n    if (oracles.length === 0) {\n      oracles = await this.loadCurrentRoundOracles(aggregator);\n    }\n    const payerKeypair = programWallet(this.program);\n    const remainingAccounts: Array<PublicKey> = [];\n    for (let i = 0; i < aggregator.oracleRequestBatchSize; ++i) {\n      remainingAccounts.push(aggregator.currentRound.oraclePubkeysData[i]);\n    }\n    for (const oracle of oracles) {\n      remainingAccounts.push(oracle.tokenAccount);\n    }\n    const queuePubkey = aggregator.queuePubkey;\n    const queueAccount = new OracleQueueAccount({\n      program: this.program,\n      publicKey: queuePubkey,\n    });\n    const [leaseAccount, leaseBump] = LeaseAccount.fromSeed(\n      this.program,\n      queueAccount,\n      this\n    );\n    const escrow = await spl.getAssociatedTokenAddress(\n      params.tokenMint,\n      leaseAccount.publicKey,\n      true\n    );\n    const [feedPermissionAccount, feedPermissionBump] =\n      PermissionAccount.fromSeed(\n        this.program,\n        params.queueAuthority,\n        queueAccount.publicKey,\n        this.publicKey\n      );\n    const [oraclePermissionAccount, oraclePermissionBump] =\n      PermissionAccount.fromSeed(\n        this.program,\n        params.queueAuthority,\n        queueAccount.publicKey,\n        oracleAccount.publicKey\n      );\n    const [programStateAccount, stateBump] = ProgramStateAccount.fromSeed(\n      this.program\n    );\n    const digest = this.produceJobsHash(params.jobs).digest();\n    let historyBuffer = aggregator.historyBuffer;\n    if (historyBuffer.equals(PublicKey.default)) {\n      historyBuffer = this.publicKey;\n    }\n\n    return this.program.methods\n      .aggregatorSaveResult({\n        oracleIdx: params.oracleIdx,\n        error: params.error,\n        value: SwitchboardDecimal.fromBig(params.value),\n        jobsChecksum: digest,\n        minResponse: SwitchboardDecimal.fromBig(params.minResponse),\n        maxResponse: SwitchboardDecimal.fromBig(params.maxResponse),\n        feedPermissionBump,\n        oraclePermissionBump,\n        leaseBump,\n        stateBump,\n      })\n      .accounts({\n        aggregator: this.publicKey,\n        oracle: oracleAccount.publicKey,\n        oracleAuthority: payerKeypair.publicKey,\n        oracleQueue: queueAccount.publicKey,\n        queueAuthority: params.queueAuthority,\n        feedPermission: feedPermissionAccount.publicKey,\n        oraclePermission: oraclePermissionAccount.publicKey,\n        lease: leaseAccount.publicKey,\n        escrow,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n        programState: programStateAccount.publicKey,\n        historyBuffer,\n        mint: params.tokenMint,\n      })\n      .remainingAccounts(\n        remainingAccounts.map((pubkey: PublicKey) => {\n          return { isSigner: false, isWritable: true, pubkey };\n        })\n      )\n      .transaction();\n  }\n}\n\n/**\n * Parameters for initializing JobAccount\n */\nexport interface JobInitParams {\n  /**\n   *  An optional name to apply to the job account.\n   */\n  name?: Buffer;\n  /**\n   *  unix_timestamp of when funds can be withdrawn from this account.\n   */\n  expiration?: anchor.BN;\n  /**\n   *  A serialized protocol buffer holding the schema of the job.\n   */\n  data: Buffer;\n  /**\n   *  A required variables oracles must fill to complete the job.\n   */\n  variables?: Array<string>;\n  /**\n   *  A pre-generated keypair to use.\n   */\n  keypair?: Keypair;\n  authority: PublicKey;\n}\n\n/**\n * A Switchboard account representing a job for an oracle to perform, stored as\n * a protocol buffer.\n */\nexport class JobAccount {\n  static accountName = \"JobAccountData\";\n\n  program: SwitchboardProgram;\n\n  publicKey: PublicKey;\n\n  keypair?: Keypair;\n\n  /**\n   * JobAccount constructor\n   * @param params initialization params.\n   */\n  public constructor(params: AccountParams) {\n    if (params.keypair === undefined && params.publicKey === undefined) {\n      throw new Error(\n        `${this.constructor.name}: User must provide either a publicKey or keypair for account use.`\n      );\n    }\n    if (params.keypair !== undefined && params.publicKey !== undefined) {\n      if (!params.publicKey.equals(params.keypair.publicKey)) {\n        throw new Error(\n          `${this.constructor.name}: provided pubkey and keypair mismatch.`\n        );\n      }\n    }\n    this.program = params.program;\n    this.keypair = params.keypair;\n    this.publicKey = params.publicKey ?? this.keypair.publicKey;\n  }\n\n  /**\n   * Load and parse JobAccount data based on the program IDL.\n   * @return JobAccount data parsed in accordance with the\n   * Switchboard IDL.\n   */\n  async loadData(): Promise<any> {\n    const job = await this.program.account.jobAccountData.fetch(this.publicKey);\n    return job;\n  }\n\n  /**\n   * Load and parse the protobuf from the raw buffer stored in the JobAccount.\n   * @return protos.OracleJob\n   */\n  async loadJob(): Promise<protos.OracleJob> {\n    const job = await this.loadData();\n    return protos.OracleJob.decodeDelimited(job.data);\n  }\n\n  /**\n   * Create and initialize the JobAccount.\n   * @param program Switchboard program representation holding connection and IDL.\n   * @param params.\n   * @return newly generated JobAccount.\n   */\n  static async create(\n    program: SwitchboardProgram,\n    params: JobInitParams\n  ): Promise<JobAccount> {\n    const payerKeypair = programWallet(program);\n    const jobAccount = params.keypair ?? anchor.web3.Keypair.generate();\n    const size =\n      280 + params.data.length + (params.variables?.join(\"\")?.length ?? 0);\n    const [stateAccount, stateBump] = await ProgramStateAccount.getOrCreate(\n      program,\n      {}\n    );\n    const state = await stateAccount.loadData();\n    await program.methods\n      .jobInit({\n        name: params.name ?? Buffer.from(\"\"),\n        expiration: params.expiration ?? new anchor.BN(0),\n        data: params.data,\n        variables:\n          params.variables?.map((item) => Buffer.from(\"\")) ??\n          new Array<Buffer>(),\n        stateBump,\n      })\n      .accounts({\n        job: jobAccount.publicKey,\n        authorWallet: params.authority,\n        authority: params.authority,\n        programState: stateAccount.publicKey,\n      })\n      .signers([jobAccount])\n      .preInstructions([\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: programWallet(program).publicKey,\n          newAccountPubkey: jobAccount.publicKey,\n          space: size,\n          lamports:\n            await program.provider.connection.getMinimumBalanceForRentExemption(\n              size\n            ),\n          programId: program.programId,\n        }),\n      ])\n      .rpc();\n    return new JobAccount({ program, keypair: jobAccount });\n  }\n\n  static decode(\n    program: SwitchboardProgram,\n    accountInfo: AccountInfo<Buffer>\n  ): any {\n    const coder = new anchor.BorshAccountsCoder(program.idl);\n    const data = coder.decode(JobAccount.accountName, accountInfo?.data!);\n    return data;\n  }\n\n  static decodeJob(\n    program: SwitchboardProgram,\n    accountInfo: AccountInfo<Buffer>\n  ): protos.OracleJob {\n    return protos.OracleJob.decodeDelimited(\n      JobAccount.decode(program, accountInfo).data!\n    );\n  }\n}\n\n/**\n * Parameters for initializing PermissionAccount\n */\nexport interface PermissionInitParams {\n  /**\n   *  Pubkey of the account granting the permission.\n   */\n  granter: PublicKey;\n  /**\n   *  The receiving account of a permission.\n   */\n  grantee: PublicKey;\n  /**\n   *  The authority that is allowed to set permissions for this account.\n   */\n  authority: PublicKey;\n}\n\n/**\n * Parameters for setting a permission in a PermissionAccount\n */\nexport interface PermissionSetParams {\n  /**\n   *  The permssion to set\n   */\n  permission: SwitchboardPermission;\n  /**\n   *  The authority controlling this permission.\n   */\n  //authority: Keypair | PublicKey;\n  authority: Keypair | PublicKey;\n  /**\n   *  Specifies whether to enable or disable the permission.\n   */\n  enable: boolean;\n}\n\nexport interface PermissionSetVoterWeightParams {\n  govProgram: PublicKey;\n  pubkeySigner?: PublicKey;\n  addinProgram: SwitchboardProgram;\n  realm: PublicKey;\n}\n\n/**\n * An enum representing all known permission types for Switchboard.\n */\nexport enum SwitchboardPermission {\n  PERMIT_ORACLE_HEARTBEAT = \"permitOracleHeartbeat\",\n  PERMIT_ORACLE_QUEUE_USAGE = \"permitOracleQueueUsage\",\n  PERMIT_VRF_REQUESTS = \"permitVrfRequests\",\n}\nexport enum SwitchboardPermissionValue {\n  PERMIT_ORACLE_HEARTBEAT = 1 << 0,\n  PERMIT_ORACLE_QUEUE_USAGE = 1 << 1,\n  PERMIT_VRF_REQUESTS = 1 << 2,\n}\n/**\n * A Switchboard account representing a permission or privilege granted by one\n * account signer to another account.\n */\nexport class PermissionAccount {\n  static accountName = \"PermissionAccountData\";\n\n  program: SwitchboardProgram;\n\n  publicKey: PublicKey;\n\n  keypair?: Keypair;\n\n  /**\n   * PermissionAccount constructor\n   * @param params initialization params.\n   */\n  public constructor(params: AccountParams) {\n    if (params.keypair === undefined && params.publicKey === undefined) {\n      throw new Error(\n        `${this.constructor.name}: User must provide either a publicKey or keypair for account use.`\n      );\n    }\n    if (params.keypair !== undefined && params.publicKey !== undefined) {\n      if (!params.publicKey.equals(params.keypair.publicKey)) {\n        throw new Error(\n          `${this.constructor.name}: provided pubkey and keypair mismatch.`\n        );\n      }\n    }\n    this.program = params.program;\n    this.keypair = params.keypair;\n    this.publicKey = params.publicKey ?? this.keypair.publicKey;\n  }\n\n  /**\n   * Check if a specific permission is enabled on this permission account\n   */\n  async isPermissionEnabled(\n    permission: SwitchboardPermissionValue\n  ): Promise<boolean> {\n    const permissions = (await this.loadData()).permissions;\n    return (permissions & (permission as number)) != 0;\n  }\n\n  /**\n   * Load and parse PermissionAccount data based on the program IDL.\n   * @return PermissionAccount data parsed in accordance with the\n   * Switchboard IDL.\n   */\n  async loadData(): Promise<any> {\n    const permission: any =\n      await this.program.account.permissionAccountData.fetch(this.publicKey);\n    permission.ebuf = undefined;\n    return permission;\n  }\n\n  /**\n   * Get the size of a PermissionAccount on chain.\n   * @return size.\n   */\n  size(): number {\n    return this.program.account.permissionAccountData.size;\n  }\n\n  /**\n   * Create and initialize the PermissionAccount.\n   * @param program Switchboard program representation holding connection and IDL.\n   * @param params.\n   * @return newly generated PermissionAccount.\n   */\n  static async create(\n    program: SwitchboardProgram,\n    params: PermissionInitParams\n  ): Promise<PermissionAccount> {\n    const authorityInfo = await program.provider.connection.getAccountInfo(\n      params.authority\n    );\n\n    const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n      program,\n      params.authority,\n      params.granter,\n      params.grantee\n    );\n    const payerKeypair = programWallet(program);\n    await program.methods\n      .permissionInit({})\n      .accounts({\n        permission: permissionAccount.publicKey,\n        authority: params.authority,\n        granter: params.granter,\n        grantee: params.grantee,\n        payer: programWallet(program).publicKey,\n        systemProgram: SystemProgram.programId,\n      })\n      .signers([payerKeypair])\n      .rpc();\n\n    return new PermissionAccount({\n      program,\n      publicKey: permissionAccount.publicKey,\n    });\n  }\n\n  /**\n   * Loads a PermissionAccount from the expected PDA seed format.\n   * @param authority The authority pubkey to be incorporated into the account seed.\n   * @param granter The granter pubkey to be incorporated into the account seed.\n   * @param grantee The grantee pubkey to be incorporated into the account seed.\n   * @return PermissionAccount and PDA bump.\n   */\n  static fromSeed(\n    program: SwitchboardProgram,\n    authority: PublicKey,\n    granter: PublicKey,\n    grantee: PublicKey\n  ): [PermissionAccount, number] {\n    const [pubkey, bump] = anchor.utils.publicKey.findProgramAddressSync(\n      [\n        Buffer.from(\"PermissionAccountData\"),\n        authority.toBytes(),\n        granter.toBytes(),\n        grantee.toBytes(),\n      ],\n      program.programId\n    );\n    return [new PermissionAccount({ program, publicKey: pubkey }), bump];\n  }\n\n  /**\n   * Sets the permission in the PermissionAccount\n   * @param params.\n   * @return TransactionSignature.\n   */\n  async set(params: PermissionSetParams): Promise<TransactionSignature> {\n    if (!(\"publicKey\" in params.authority)) {\n      throw new Error(\n        \"Authority cannot be a PublicKey for the set RPC method.\"\n      );\n    }\n    const permissionData = await this.loadData();\n    const authorityInfo = await this.program.provider.connection.getAccountInfo(\n      permissionData.authority\n    );\n\n    const permission = new Map<string, null>();\n    permission.set(params.permission.toString(), null);\n    return this.program.methods\n      .permissionSet({\n        permission: Object.fromEntries(permission),\n        enable: params.enable,\n      })\n      .accounts({\n        permission: this.publicKey,\n        authority: params.authority.publicKey,\n      })\n      .signers([params.authority])\n      .rpc();\n  }\n\n  /**\n   * Sets the permission in the PermissionAccount\n   * @param params.\n   * @return TransactionSignature.\n   */\n  async setTx(params: PermissionSetParams): Promise<Transaction> {\n    const permissionData = await this.loadData();\n\n    let authPk: PublicKey;\n    const signers: Array<Keypair> = [];\n    if (\"publicKey\" in params.authority) {\n      authPk = params.authority.publicKey;\n      signers.push(params.authority as Keypair);\n    } else {\n      authPk = params.authority;\n    }\n\n    const authorityInfo = await this.program.provider.connection.getAccountInfo(\n      permissionData.authority\n    );\n\n    const permission = new Map<string, null>();\n    permission.set(params.permission.toString(), null);\n    console.log(\"authority:\");\n    console.log(authPk);\n    return this.program.methods\n      .permissionSet({\n        permission: Object.fromEntries(permission),\n        enable: params.enable,\n      })\n      .accounts({\n        permission: this.publicKey,\n        authority: authPk,\n      })\n      .signers(signers)\n      .transaction();\n  }\n\n  async setVoterWeightTx(params: PermissionSetVoterWeightParams) {\n    const permissionData = await this.loadData();\n    const oracleData = await this.program.account.oracleAccountData.fetch(\n      permissionData.grantee\n    );\n\n    let payerKeypair;\n    if (params.pubkeySigner == undefined) {\n      payerKeypair = programWallet(this.program);\n    }\n\n    const [programStateAccount, stateBump] = ProgramStateAccount.fromSeed(\n      this.program\n    );\n    const psData = await programStateAccount.loadData();\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const [addinState, _] = await PublicKey.findProgramAddress(\n      [Buffer.from(\"state\")],\n      params.addinProgram.programId\n    );\n\n    const [realmSpawnRecord] = anchor.utils.publicKey.findProgramAddressSync(\n      [Buffer.from(\"RealmSpawnRecord\"), params.realm.toBytes()],\n      params.addinProgram.programId\n    );\n\n    const [voterWeightRecord] = anchor.utils.publicKey.findProgramAddressSync(\n      [Buffer.from(\"VoterWeightRecord\"), permissionData.grantee.toBytes()],\n      params.addinProgram.programId\n    );\n\n    const [tokenOwnerRecord] = anchor.utils.publicKey.findProgramAddressSync(\n      [\n        Buffer.from(\"governance\"),\n        params.realm.toBytes(),\n        psData.daoMint.toBytes(),\n        (oracleData.oracleAuthority as PublicKey).toBytes(),\n      ],\n      params.govProgram\n    );\n\n    return params.addinProgram.methods\n      .permissionSetVoterWeight()\n      .accounts({\n        permission: this.publicKey,\n        permissionAuthority: permissionData.authority,\n        oracle: permissionData.grantee,\n        oracleAuthority: oracleData.oracleAuthority as PublicKey,\n        payer: params.pubkeySigner,\n        systemProgram: SystemProgram.programId,\n        sbState: programStateAccount.publicKey,\n        programState: addinState,\n        govProgram: params.govProgram,\n        daoMint: psData.daoMint,\n        spawnRecord: realmSpawnRecord,\n        voterWeight: voterWeightRecord,\n        tokenOwnerRecord: tokenOwnerRecord,\n        realm: params.realm,\n      })\n      .transaction();\n  }\n}\n\n/**\n * Parameters for initializing OracleQueueAccount\n */\nexport interface OracleQueueInitParams {\n  /**\n   *  A name to assign to this OracleQueue\n   */\n  name?: Buffer;\n  /**\n   *  Buffer for queue metadata\n   */\n  metadata?: Buffer;\n  /**\n   *  Rewards to provide oracles and round openers on this queue.\n   */\n  reward: anchor.BN;\n  /**\n   *  The minimum amount of stake oracles must present to remain on the queue.\n   */\n  minStake: anchor.BN;\n  /**\n   *  After a feed lease is funded or re-funded, it must consecutively succeed\n   *  N amount of times or its authorization to use the queue is auto-revoked.\n   */\n  feedProbationPeriod?: number;\n  /**\n   *  The account to delegate authority to for creating permissions targeted\n   *  at the queue.\n   */\n  authority: PublicKey;\n  /**\n   *  Time period we should remove an oracle after if no response.\n   */\n  oracleTimeout?: anchor.BN;\n  /**\n   *  Whether slashing is enabled on this queue.\n   */\n  slashingEnabled?: boolean;\n  /**\n   *  The tolerated variance amount oracle results can have from the\n   *  accepted round result before being slashed.\n   *  slashBound = varianceToleranceMultiplier * stdDeviation\n   *  Default: 2\n   */\n  varianceToleranceMultiplier?: number;\n  /**\n   *  Consecutive failure limit for a feed before feed permission is revoked.\n   */\n  consecutiveFeedFailureLimit?: anchor.BN;\n  /**\n   *  TODO: implement\n   *  Consecutive failure limit for an oracle before oracle permission is revoked.\n   */\n  consecutiveOracleFailureLimit?: anchor.BN;\n\n  /**\n   * the minimum update delay time for Aggregators\n   */\n  minimumDelaySeconds?: number;\n  /**\n   * Optionally set the size of the queue.\n   */\n  queueSize?: number;\n  /**\n   * Enabling this setting means data feeds do not need explicit permission\n   * to join the queue.\n   */\n  unpermissionedFeeds?: boolean;\n  /**\n   * Enabling this setting means data feeds do not need explicit permission\n   * to request VRF proofs and verifications from this queue.\n   */\n  unpermissionedVrf?: boolean;\n  /**\n   * Enabling this setting will allow buffer relayer accounts to call openRound.\n   */\n  enableBufferRelayers?: boolean;\n  mint: PublicKey;\n}\n\nexport interface OracleQueueSetRewardsParams {\n  rewards: anchor.BN;\n  authority?: Keypair;\n}\n\nexport interface OracleQueueSetVrfSettingsParams {\n  unpermissionedVrf: boolean;\n  authority?: Keypair;\n}\n\n/**\n * A Switchboard account representing a queue for distributing oracles to\n * permitted data feeds.\n */\nexport class OracleQueueAccount {\n  static accountName = \"OracleQueueAccountData\";\n\n  program: SwitchboardProgram;\n\n  publicKey: PublicKey;\n\n  keypair?: Keypair;\n\n  /**\n   * OracleQueueAccount constructor\n   * @param params initialization params.\n   */\n  public constructor(params: AccountParams) {\n    if (params.keypair === undefined && params.publicKey === undefined) {\n      throw new Error(\n        `${this.constructor.name}: User must provide either a publicKey or keypair for account use.`\n      );\n    }\n    if (params.keypair !== undefined && params.publicKey !== undefined) {\n      if (!params.publicKey.equals(params.keypair.publicKey)) {\n        throw new Error(\n          `${this.constructor.name}: provided pubkey and keypair mismatch.`\n        );\n      }\n    }\n    this.program = params.program;\n    this.keypair = params.keypair;\n    this.publicKey = params.publicKey ?? this.keypair.publicKey;\n  }\n\n  async loadMint(): Promise<spl.Mint> {\n    const queue = await this.loadData();\n    let mintKey = queue.mint ?? PublicKey.default;\n    if (mintKey.equals(PublicKey.default)) {\n      mintKey = spl.NATIVE_MINT;\n    }\n    return spl.getMint(this.program.provider.connection, mintKey);\n  }\n\n  /**\n   * Load and parse OracleQueueAccount data based on the program IDL.\n   * @return OracleQueueAccount data parsed in accordance with the\n   * Switchboard IDL.\n   */\n  async loadData(): Promise<any> {\n    const queue: any = await this.program.account.oracleQueueAccountData.fetch(\n      this.publicKey\n    );\n    if (\n      !(\"mint\" in queue) ||\n      queue.mint === undefined ||\n      queue.mint === PublicKey.default\n    ) {\n      queue.mint = spl.NATIVE_MINT;\n    }\n    const queueData = [];\n    const buffer =\n      (\n        await this.program.provider.connection.getAccountInfo(queue.dataBuffer)\n      )?.data.slice(8) ?? Buffer.from(\"\");\n    const rowSize = 32;\n    for (let i = 0; i < queue.size * rowSize; i += rowSize) {\n      if (buffer.length - i < rowSize) {\n        break;\n      }\n      const pubkeyBuf = buffer.slice(i, i + rowSize);\n      const key = new PublicKey(pubkeyBuf);\n      if (key === PublicKey.default) {\n        break;\n      }\n      queueData.push(key);\n    }\n    queue.queue = queueData;\n    queue.ebuf = undefined;\n    return queue;\n  }\n\n  /**\n   * Get the size of an OracleQueueAccount on chain.\n   * @return size.\n   */\n  size(): number {\n    return this.program.account.oracleQueueAccountData.size;\n  }\n\n  /**\n   * Create and initialize the OracleQueueAccount.\n   * @param program Switchboard program representation holding connection and IDL.\n   * @param params.\n   * @return newly generated OracleQueueAccount.\n   */\n  static async create(\n    program: SwitchboardProgram,\n    params: OracleQueueInitParams\n  ): Promise<OracleQueueAccount> {\n    const payerKeypair = programWallet(program);\n    const [stateAccount, stateBump] = ProgramStateAccount.fromSeed(program);\n    /*const mint = (await stateAccount.getTokenMint()).publicKey;*/\n    const mint = params.mint;\n    const oracleQueueAccount = anchor.web3.Keypair.generate();\n    const buffer = anchor.web3.Keypair.generate();\n    const size = program.account.oracleQueueAccountData.size;\n    params.queueSize = params.queueSize ?? 500;\n    const queueSize = params.queueSize * 32 + 8;\n    await program.methods\n      .oracleQueueInit({\n        name: (params.name ?? Buffer.from(\"\")).slice(0, 32),\n        metadata: (params.metadata ?? Buffer.from(\"\")).slice(0, 64),\n        reward: params.reward ?? new anchor.BN(0),\n        minStake: params.minStake ?? new anchor.BN(0),\n        feedProbationPeriod: params.feedProbationPeriod ?? 0,\n        oracleTimeout: params.oracleTimeout ?? 180,\n        slashingEnabled: params.slashingEnabled ?? false,\n        varianceToleranceMultiplier: SwitchboardDecimal.fromBig(\n          new Big(params.varianceToleranceMultiplier ?? 2)\n        ),\n        authority: params.authority,\n        consecutiveFeedFailureLimit:\n          params.consecutiveFeedFailureLimit ?? new anchor.BN(1000),\n        consecutiveOracleFailureLimit:\n          params.consecutiveOracleFailureLimit ?? new anchor.BN(1000),\n        minimumDelaySeconds: params.minimumDelaySeconds ?? 5,\n        queueSize: params.queueSize,\n        unpermissionedFeeds: params.unpermissionedFeeds ?? false,\n        enableBufferRelayers: params.enableBufferRelayers ?? false,\n      })\n      .accounts({\n        oracleQueue: oracleQueueAccount.publicKey,\n        authority: params.authority,\n        buffer: buffer.publicKey,\n        systemProgram: SystemProgram.programId,\n        payer: programWallet(program).publicKey,\n        mint,\n      })\n      .signers([oracleQueueAccount, buffer])\n      .preInstructions([\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: programWallet(program).publicKey,\n          newAccountPubkey: buffer.publicKey,\n          space: queueSize,\n          lamports:\n            await program.provider.connection.getMinimumBalanceForRentExemption(\n              queueSize\n            ),\n          programId: program.programId,\n        }),\n      ])\n      .rpc();\n\n    return new OracleQueueAccount({ program, keypair: oracleQueueAccount });\n  }\n\n  async setRewards(\n    params: OracleQueueSetRewardsParams\n  ): Promise<TransactionSignature> {\n    const authority =\n      params.authority ?? this.keypair ?? programWallet(this.program);\n    return this.program.methods\n      .oracleQueueSetRewards({\n        rewards: params.rewards,\n      })\n      .accounts({ queue: this.publicKey, authority: authority.publicKey })\n      .signers([authority])\n      .rpc();\n  }\n\n  async setVrfSettings(\n    params: OracleQueueSetVrfSettingsParams\n  ): Promise<TransactionSignature> {\n    const authority =\n      params.authority ?? this.keypair ?? programWallet(this.program);\n\n    return this.program.methods\n      .oracleQueueVrfConfig({\n        unpermissionedVrfEnabled: params.unpermissionedVrf,\n      })\n      .accounts({\n        queue: this.publicKey,\n        authority: authority.publicKey,\n      })\n      .signers([authority])\n      .rpc();\n  }\n}\n\n/**\n * Parameters for initializing a LeaseAccount\n */\nexport interface LeaseInitParams {\n  /**\n   *  Token amount to load into the lease escrow\n   */\n  loadAmount: anchor.BN;\n  /**\n   *  The funding wallet of the lease.\n   */\n  funder: PublicKey;\n  /**\n   *  The authority of the funding wallet\n   */\n  funderAuthority: Keypair;\n  /**\n   *  The target to which this lease is applied.\n   */\n  oracleQueueAccount: OracleQueueAccount;\n  /**\n   *  The feed which the lease grants permission.\n   */\n  aggregatorAccount: AggregatorAccount;\n  /**\n   *  This authority will be permitted to withdraw funds from this lease.\n   */\n  withdrawAuthority?: PublicKey;\n}\n\n/**\n * Parameters for extending a LeaseAccount\n */\nexport interface LeaseExtendParams {\n  /**\n   *  Token amount to load into the lease escrow\n   */\n  loadAmount: anchor.BN;\n  /**\n   *  The funding wallet of the lease.\n   */\n  funder: PublicKey;\n  /**\n   *  The authority of the funding wallet\n   */\n  funderAuthority: Keypair;\n}\n\n/**\n * Parameters for withdrawing from a LeaseAccount\n */\nexport interface LeaseWithdrawParams {\n  /**\n   *  Token amount to withdraw from the lease escrow\n   */\n  amount: anchor.BN;\n  /**\n   *  The wallet to withdraw to.\n   */\n  withdrawWallet: PublicKey;\n  /**\n   *  The withdraw authority of the lease\n   */\n  withdrawAuthority: Keypair;\n}\n\n/**\n * A Switchboard account representing a lease for managing funds for oracle payouts\n * for fulfilling feed updates.\n */\nexport class LeaseAccount {\n  program: SwitchboardProgram;\n\n  publicKey: PublicKey;\n\n  keypair?: Keypair;\n\n  /**\n   * LeaseAccount constructor\n   * @param params initialization params.\n   */\n  public constructor(params: AccountParams) {\n    if (params.keypair === undefined && params.publicKey === undefined) {\n      throw new Error(\n        `${this.constructor.name}: User must provide either a publicKey or keypair for account use.`\n      );\n    }\n    if (params.keypair !== undefined && params.publicKey !== undefined) {\n      if (!params.publicKey.equals(params.keypair.publicKey)) {\n        throw new Error(\n          `${this.constructor.name}: provided pubkey and keypair mismatch.`\n        );\n      }\n    }\n    this.program = params.program;\n    this.keypair = params.keypair;\n    this.publicKey = params.publicKey ?? this.keypair.publicKey;\n  }\n\n  /**\n   * Loads a LeaseAccount from the expected PDA seed format.\n   * @param leaser The leaser pubkey to be incorporated into the account seed.\n   * @param target The target pubkey to be incorporated into the account seed.\n   * @return LeaseAccount and PDA bump.\n   */\n  static fromSeed(\n    program: SwitchboardProgram,\n    queueAccount: OracleQueueAccount,\n    aggregatorAccount: AggregatorAccount\n  ): [LeaseAccount, number] {\n    const [pubkey, bump] = anchor.utils.publicKey.findProgramAddressSync(\n      [\n        Buffer.from(\"LeaseAccountData\"),\n        queueAccount.publicKey.toBytes(),\n        aggregatorAccount.publicKey.toBytes(),\n      ],\n      program.programId\n    );\n    return [new LeaseAccount({ program, publicKey: pubkey }), bump];\n  }\n\n  /**\n   * Load and parse LeaseAccount data based on the program IDL.\n   * @return LeaseAccount data parsed in accordance with the\n   * Switchboard IDL.\n   */\n  async loadData(): Promise<any> {\n    const lease: any = await this.program.account.leaseAccountData.fetch(\n      this.publicKey\n    );\n    lease.ebuf = undefined;\n    return lease;\n  }\n\n  /**\n   * Get the size of a LeaseAccount on chain.\n   * @return size.\n   */\n  size(): number {\n    return this.program.account.leaseAccountData.size;\n  }\n\n  /**\n   * Create and initialize the LeaseAccount.\n   * @param program Switchboard program representation holding connection and IDL.\n   * @param params.\n   * @return newly generated LeaseAccount.\n   */\n  static async create(\n    program: SwitchboardProgram,\n    params: LeaseInitParams\n  ): Promise<LeaseAccount> {\n    const payerKeypair = programWallet(program);\n    const [programStateAccount, stateBump] =\n      ProgramStateAccount.fromSeed(program);\n    const switchTokenMint = await params.oracleQueueAccount.loadMint();\n    const [leaseAccount, leaseBump] = LeaseAccount.fromSeed(\n      program,\n      params.oracleQueueAccount,\n      params.aggregatorAccount\n    );\n    const escrow = await spl.getAssociatedTokenAddress(\n      switchTokenMint.address,\n      leaseAccount.publicKey,\n      true\n    );\n\n    const jobAccountDatas = await params.aggregatorAccount.loadJobAccounts();\n    const aggregatorData = await params.aggregatorAccount.loadData();\n    const jobPubkeys = aggregatorData.jobPubkeysData.slice(\n      0,\n      aggregatorData.jobPubkeysSize\n    );\n    const jobWallets: Array<PublicKey> = [];\n    const walletBumps: Array<number> = [];\n    for (const idx in jobAccountDatas) {\n      const jobAccountData = jobAccountDatas[idx];\n      const authority = jobAccountData.authority ?? PublicKey.default;\n      const [jobWallet, bump] = await PublicKey.findProgramAddress(\n        [\n          authority.toBuffer(),\n          spl.TOKEN_PROGRAM_ID.toBuffer(),\n          switchTokenMint.address.toBuffer(),\n        ],\n        spl.ASSOCIATED_TOKEN_PROGRAM_ID\n      );\n      jobWallets.push(jobWallet);\n      walletBumps.push(bump);\n    }\n\n    await program.methods\n      .leaseInit({\n        loadAmount: params.loadAmount,\n        stateBump,\n        leaseBump,\n        withdrawAuthority: params.withdrawAuthority ?? PublicKey.default,\n        walletBumps: Buffer.from(walletBumps),\n      })\n      .accounts({\n        programState: programStateAccount.publicKey,\n        lease: leaseAccount.publicKey,\n        queue: params.oracleQueueAccount.publicKey,\n        aggregator: params.aggregatorAccount.publicKey,\n        systemProgram: SystemProgram.programId,\n        funder: params.funder,\n        payer: programWallet(program).publicKey,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n        escrow,\n        owner: params.funderAuthority.publicKey,\n        mint: switchTokenMint.address,\n      })\n      .preInstructions([\n        spl.createAssociatedTokenAccountInstruction(\n          payerKeypair.publicKey,\n          escrow,\n          leaseAccount.publicKey,\n          switchTokenMint.address\n        ),\n      ])\n      .signers([params.funderAuthority])\n      .remainingAccounts(\n        jobPubkeys.concat(jobWallets).map((pubkey: PublicKey) => {\n          return { isSigner: false, isWritable: true, pubkey };\n        })\n      )\n      .rpc();\n\n    return new LeaseAccount({ program, publicKey: leaseAccount.publicKey });\n  }\n\n  async getBalance(): Promise<number> {\n    const lease = await this.loadData();\n    const escrow = await spl.getAccount(\n      this.program.provider.connection,\n      lease.escrow\n    );\n    return Number(escrow.amount);\n  }\n\n  /**\n   * Estimate the time remaining on a given lease\n   * @params void\n   * @returns number milliseconds left in lease (estimate)\n   */\n  async estimatedLeaseTimeRemaining(): Promise<number> {\n    // get lease data for escrow + aggregator pubkeys\n    const lease = await this.loadData();\n    const aggregatorAccount = new AggregatorAccount({\n      program: this.program,\n      publicKey: lease.aggregator,\n    });\n    // get aggregator data for minUpdateDelaySeconds + batchSize + queue pubkey\n    const aggregator = await aggregatorAccount.loadData();\n    const queueAccount = new OracleQueueAccount({\n      program: this.program,\n      publicKey: aggregator.queuePubkey,\n    });\n    const queue = await queueAccount.loadData();\n    const batchSize = aggregator.oracleRequestBatchSize + 1;\n    const minUpdateDelaySeconds = aggregator.minUpdateDelaySeconds * 1.5; // account for jitters with * 1.5\n    const updatesPerDay = (60 * 60 * 24) / minUpdateDelaySeconds;\n    const costPerDay = batchSize * queue.reward * updatesPerDay;\n    const oneDay = 24 * 60 * 60 * 1000; // ms in a day\n    const balance = await this.getBalance();\n    const endDate = new Date();\n    endDate.setTime(endDate.getTime() + (balance * oneDay) / costPerDay);\n    const timeLeft = endDate.getTime() - new Date().getTime();\n    return timeLeft;\n  }\n\n  /**\n   * Adds fund to a LeaseAccount. Note that funds can always be withdrawn by\n   * the withdraw authority if one was set on lease initialization.\n   * @param program Switchboard program representation holding connection and IDL.\n   * @param params.\n   */\n  async extend(params: LeaseExtendParams): Promise<TransactionSignature> {\n    const program = this.program;\n    const lease = await this.loadData();\n    const escrow = lease.escrow;\n    const queue = lease.queue;\n    const queueAccount = new OracleQueueAccount({ program, publicKey: queue });\n    const aggregator = lease.aggregator;\n    const aggregatorAccount = new AggregatorAccount({\n      program,\n      publicKey: aggregator,\n    });\n    const [programStateAccount, stateBump] =\n      ProgramStateAccount.fromSeed(program);\n    const switchTokenMint = await queueAccount.loadMint();\n\n    const [leaseAccount, leaseBump] = LeaseAccount.fromSeed(\n      program,\n      queueAccount,\n      aggregatorAccount\n    );\n    const aggregatorData = await aggregatorAccount.loadData();\n    const jobPubkeys = aggregatorData.jobPubkeysData.slice(\n      0,\n      aggregatorData.jobPubkeysSize\n    );\n    const jobAccountDatas = await aggregatorAccount.loadJobAccounts();\n    const jobWallets: Array<PublicKey> = [];\n    const walletBumps: Array<number> = [];\n    for (const idx in jobAccountDatas) {\n      const jobAccountData = jobAccountDatas[idx];\n      const authority = jobAccountData.authority ?? PublicKey.default;\n      const [jobWallet, bump] = await PublicKey.findProgramAddress(\n        [\n          authority.toBuffer(),\n          spl.TOKEN_PROGRAM_ID.toBuffer(),\n          switchTokenMint.address.toBuffer(),\n        ],\n        spl.ASSOCIATED_TOKEN_PROGRAM_ID\n      );\n      jobWallets.push(jobWallet);\n      walletBumps.push(bump);\n    }\n    return program.methods\n      .leaseExtend({\n        loadAmount: params.loadAmount,\n        stateBump,\n        leaseBump,\n        walletBumps: Buffer.from(walletBumps),\n      })\n      .accounts({\n        lease: leaseAccount.publicKey,\n        aggregator,\n        queue,\n        funder: params.funder,\n        owner: params.funderAuthority.publicKey,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n        escrow,\n        programState: programStateAccount.publicKey,\n        mint: (await queueAccount.loadMint()).address,\n      })\n      .signers([params.funderAuthority])\n      .remainingAccounts(\n        jobPubkeys.concat(jobWallets).map((pubkey: PublicKey) => {\n          return { isSigner: false, isWritable: true, pubkey };\n        })\n      )\n      .rpc();\n  }\n\n  /**\n   * Withdraw funds from a LeaseAccount.\n   * @param program Switchboard program representation holding connection and IDL.\n   * @param params.\n   */\n  async withdraw(params: LeaseWithdrawParams): Promise<TransactionSignature> {\n    const program = this.program;\n    const lease = await this.loadData();\n    const escrow = lease.escrow;\n    const queue = lease.queue;\n    const queueAccount = new OracleQueueAccount({ program, publicKey: queue });\n    const aggregator = lease.aggregator;\n    const [programStateAccount, stateBump] =\n      ProgramStateAccount.fromSeed(program);\n    const switchTokenMint = await queueAccount.loadMint();\n    const [leaseAccount, leaseBump] = LeaseAccount.fromSeed(\n      program,\n      queueAccount,\n      new AggregatorAccount({ program, publicKey: aggregator })\n    );\n    return program.methods\n      .leaseWithdraw({\n        amount: params.amount,\n        stateBump,\n        leaseBump,\n      })\n      .accounts({\n        lease: leaseAccount.publicKey,\n        escrow,\n        aggregator,\n        queue,\n        withdrawAuthority: params.withdrawAuthority.publicKey,\n        withdrawAccount: params.withdrawWallet,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n        programState: programStateAccount.publicKey,\n        mint: (await queueAccount.loadMint()).address,\n      })\n      .signers([params.withdrawAuthority])\n      .rpc();\n  }\n}\n\n/**\n * Parameters for initializing a CrankAccount\n */\nexport interface CrankInitParams {\n  /**\n   *  Buffer specifying crank name\n   */\n  name?: Buffer;\n  /**\n   *  Buffer specifying crank metadata\n   */\n  metadata?: Buffer;\n  /**\n   *  OracleQueueAccount for which this crank is associated\n   */\n  queueAccount: OracleQueueAccount;\n  /**\n   * Optional max number of rows\n   */\n  maxRows?: number;\n}\n\n/**\n * Parameters for popping an element from a CrankAccount.\n */\nexport interface CrankPopParams {\n  /**\n   * Specifies the wallet to reward for turning the crank.\n   */\n  payoutWallet: PublicKey;\n  /**\n   * The pubkey of the linked oracle queue.\n   */\n  queuePubkey: PublicKey;\n  /**\n   * The pubkey of the linked oracle queue authority.\n   */\n  queueAuthority: PublicKey;\n  /**\n   * Array of pubkeys to attempt to pop. If discluded, this will be loaded\n   * from the crank upon calling.\n   */\n  readyPubkeys?: Array<PublicKey>;\n  /**\n   * Nonce to allow consecutive crank pops with the same blockhash.\n   */\n  nonce?: number;\n  crank: any;\n  queue: any;\n  tokenMint: PublicKey;\n  failOpenOnMismatch?: boolean;\n}\n\n/**\n * Parameters for pushing an element into a CrankAccount.\n */\nexport interface CrankPushParams {\n  /**\n   * Specifies the aggregator to push onto the crank.\n   */\n  aggregatorAccount: AggregatorAccount;\n}\n\n/**\n * Row structure of elements in the crank.\n */\nexport class CrankRow {\n  /**\n   *  Aggregator account pubkey\n   */\n  pubkey: PublicKey;\n\n  /**\n   *  Next aggregator update timestamp to order the crank by\n   */\n  nextTimestamp: anchor.BN;\n\n  static from(buf: Buffer): CrankRow {\n    const pubkey = new PublicKey(buf.slice(0, 32));\n    const nextTimestamp = new anchor.BN(buf.slice(32, 40), \"le\");\n    const res = new CrankRow();\n    res.pubkey = pubkey;\n    res.nextTimestamp = nextTimestamp;\n    return res;\n  }\n}\n\n/**\n * A Switchboard account representing a crank of aggregators ordered by next update time.\n */\nexport class CrankAccount {\n  static accountName = \"CrankAccountData\";\n\n  program: SwitchboardProgram;\n\n  publicKey: PublicKey;\n\n  keypair?: Keypair;\n\n  /**\n   * CrankAccount constructor\n   * @param params initialization params.\n   */\n  public constructor(params: AccountParams) {\n    if (params.keypair === undefined && params.publicKey === undefined) {\n      throw new Error(\n        `${this.constructor.name}: User must provide either a publicKey or keypair for account use.`\n      );\n    }\n    if (params.keypair !== undefined && params.publicKey !== undefined) {\n      if (!params.publicKey.equals(params.keypair.publicKey)) {\n        throw new Error(\n          `${this.constructor.name}: provided pubkey and keypair mismatch.`\n        );\n      }\n    }\n    this.program = params.program;\n    this.keypair = params.keypair;\n    this.publicKey = params.publicKey ?? this.keypair.publicKey;\n  }\n\n  /**\n   * Load and parse CrankAccount data based on the program IDL.\n   * @return CrankAccount data parsed in accordance with the\n   * Switchboard IDL.\n   */\n  async loadData(): Promise<any> {\n    const crank: any = await this.program.account.crankAccountData.fetch(\n      this.publicKey\n    );\n    const pqData = [];\n    const buffer =\n      (\n        await this.program.provider.connection.getAccountInfo(crank.dataBuffer)\n      )?.data.slice(8) ?? Buffer.from(\"\");\n    const rowSize = 40;\n    for (let i = 0; i < crank.pqSize * rowSize; i += rowSize) {\n      if (buffer.length - i < rowSize) {\n        break;\n      }\n      const rowBuf = buffer.slice(i, i + rowSize);\n      pqData.push(CrankRow.from(rowBuf));\n    }\n    crank.pqData = pqData;\n    crank.ebuf = undefined;\n    return crank;\n  }\n\n  /**\n   * Get the size of a CrankAccount on chain.\n   * @return size.\n   */\n  size(): number {\n    return this.program.account.crankAccountData.size;\n  }\n\n  /**\n   * Create and initialize the CrankAccount.\n   * @param program Switchboard program representation holding connection and IDL.\n   * @param params.\n   * @return newly generated CrankAccount.\n   */\n  static async create(\n    program: SwitchboardProgram,\n    params: CrankInitParams\n  ): Promise<CrankAccount> {\n    const payerKeypair = programWallet(program);\n    const crankAccount = anchor.web3.Keypair.generate();\n    const buffer = anchor.web3.Keypair.generate();\n    const size = program.account.crankAccountData.size;\n    params.maxRows = params.maxRows ?? 500;\n    const crankSize = params.maxRows * 40 + 8;\n    await program.methods\n      .crankInit({\n        name: (params.name ?? Buffer.from(\"\")).slice(0, 32),\n        metadata: (params.metadata ?? Buffer.from(\"\")).slice(0, 64),\n        crankSize: params.maxRows,\n      })\n      .accounts({\n        crank: crankAccount.publicKey,\n        queue: params.queueAccount.publicKey,\n        buffer: buffer.publicKey,\n        systemProgram: SystemProgram.programId,\n        payer: programWallet(program).publicKey,\n      })\n      .signers([crankAccount, buffer])\n      .preInstructions([\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: programWallet(program).publicKey,\n          newAccountPubkey: buffer.publicKey,\n          space: crankSize,\n          lamports:\n            await program.provider.connection.getMinimumBalanceForRentExemption(\n              crankSize\n            ),\n          programId: program.programId,\n        }),\n      ])\n      .rpc();\n    return new CrankAccount({ program, keypair: crankAccount });\n  }\n\n  /**\n   * Pushes a new aggregator onto the crank.\n   * @param aggregator The Aggregator account to push on the crank.\n   * @return TransactionSignature\n   */\n  async push(params: CrankPushParams): Promise<TransactionSignature> {\n    const aggregatorAccount: AggregatorAccount = params.aggregatorAccount;\n    const crank = await this.loadData();\n    const queueAccount = new OracleQueueAccount({\n      program: this.program,\n      publicKey: crank.queuePubkey,\n    });\n    const queue = await queueAccount.loadData();\n    const queueAuthority = queue.authority;\n    const [leaseAccount, leaseBump] = LeaseAccount.fromSeed(\n      this.program,\n      queueAccount,\n      aggregatorAccount\n    );\n    let lease = null;\n    try {\n      lease = await leaseAccount.loadData();\n    } catch (_) {\n      throw new Error(\n        \"A requested lease pda account has not been initialized.\"\n      );\n    }\n\n    const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n      this.program,\n      queueAuthority,\n      queueAccount.publicKey,\n      aggregatorAccount.publicKey\n    );\n    try {\n      await permissionAccount.loadData();\n    } catch (_) {\n      throw new Error(\n        \"A requested permission pda account has not been initialized.\"\n      );\n    }\n    const [programStateAccount, stateBump] = ProgramStateAccount.fromSeed(\n      this.program\n    );\n    return this.program.methods\n      .crankPush({\n        stateBump,\n        permissionBump,\n        nofitiRef: null,\n        notifiRef: null,\n      })\n      .accounts({\n        crank: this.publicKey,\n        aggregator: aggregatorAccount.publicKey,\n        oracleQueue: queueAccount.publicKey,\n        queueAuthority,\n        permission: permissionAccount.publicKey,\n        lease: leaseAccount.publicKey,\n        escrow: lease.escrow,\n        programState: programStateAccount.publicKey,\n        dataBuffer: crank.dataBuffer,\n      })\n      .rpc();\n  }\n\n  /**\n   * Pops an aggregator from the crank.\n   * @param params\n   * @return TransactionSignature\n   */\n  async popTxn(params: CrankPopParams): Promise<Transaction> {\n    const failOpenOnAccountMismatch = params.failOpenOnMismatch ?? false;\n    const next = params.readyPubkeys ?? (await this.peakNextReady(5));\n    if (next.length === 0) {\n      throw new Error(\"Crank is not ready to be turned.\");\n    }\n    const remainingAccounts: Array<PublicKey> = [];\n    const leaseBumpsMap: Map<string, number> = new Map();\n    const permissionBumpsMap: Map<string, number> = new Map();\n    const queueAccount = new OracleQueueAccount({\n      program: this.program,\n      publicKey: params.queuePubkey,\n    });\n\n    for (const row of next) {\n      const aggregatorAccount = new AggregatorAccount({\n        program: this.program,\n        publicKey: row,\n      });\n      const [leaseAccount, leaseBump] = LeaseAccount.fromSeed(\n        this.program,\n        queueAccount,\n        aggregatorAccount\n      );\n      const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n        this.program,\n        params.queueAuthority,\n        params.queuePubkey,\n        row\n      );\n      const escrow = await spl.getAssociatedTokenAddress(\n        params.tokenMint,\n        leaseAccount.publicKey,\n        true\n      );\n      remainingAccounts.push(aggregatorAccount.publicKey);\n      remainingAccounts.push(leaseAccount.publicKey);\n      remainingAccounts.push(escrow);\n      remainingAccounts.push(permissionAccount.publicKey);\n      leaseBumpsMap.set(row.toBase58(), leaseBump);\n      permissionBumpsMap.set(row.toBase58(), permissionBump);\n    }\n    remainingAccounts.sort((a: PublicKey, b: PublicKey) =>\n      a.toBuffer().compare(b.toBuffer())\n    );\n    const crank = params.crank;\n    const queue = params.queue;\n    const leaseBumps: Array<number> = [];\n    const permissionBumps: Array<number> = [];\n    // Map bumps to the index of their corresponding feeds.\n    for (const key of remainingAccounts) {\n      leaseBumps.push(leaseBumpsMap.get(key.toBase58()) ?? 0);\n      permissionBumps.push(permissionBumpsMap.get(key.toBase58()) ?? 0);\n    }\n    const [programStateAccount, stateBump] = ProgramStateAccount.fromSeed(\n      this.program\n    );\n    const payerKeypair = programWallet(this.program);\n    let mint: PublicKey = queue.mint;\n    if (!mint || mint.equals(PublicKey.default)) {\n      mint = spl.NATIVE_MINT;\n    }\n    // const promises: Array<Promise<TransactionSignature>> = [];\n    return this.program.methods\n      .crankPop({\n        stateBump,\n        leaseBumps: Buffer.from(leaseBumps),\n        permissionBumps: Buffer.from(permissionBumps),\n        nonce: params.nonce ?? null,\n        failOpenOnAccountMismatch,\n      })\n      .accounts({\n        crank: this.publicKey,\n        oracleQueue: params.queuePubkey,\n        queueAuthority: params.queueAuthority,\n        programState: programStateAccount.publicKey,\n        payoutWallet: params.payoutWallet,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n        crankDataBuffer: crank.dataBuffer,\n        queueDataBuffer: queue.dataBuffer,\n        mint,\n      })\n      .remainingAccounts(\n        remainingAccounts.map((pubkey: PublicKey) => {\n          return { isSigner: false, isWritable: true, pubkey };\n        })\n      )\n      .signers([payerKeypair])\n      .transaction();\n  }\n\n  /**\n   * Pops an aggregator from the crank.\n   * @param params\n   * @return TransactionSignature\n   */\n  async pop(params: CrankPopParams): Promise<TransactionSignature> {\n    const payerKeypair = programWallet(this.program);\n    return sendAndConfirmTransaction(\n      this.program.provider.connection,\n      await this.popTxn(params),\n      [payerKeypair]\n    );\n  }\n\n  /**\n   * Get an array of the next aggregator pubkeys to be popped from the crank, limited by n\n   * @param n The limit of pubkeys to return.\n   * @return Pubkey list of Aggregators and next timestamp to be popped, ordered by timestamp.\n   */\n  async peakNextWithTime(n: number): Promise<Array<CrankRow>> {\n    const crank = await this.loadData();\n    const items = crank.pqData\n      .slice(0, crank.pqSize)\n      .sort((a: CrankRow, b: CrankRow) => a.nextTimestamp.sub(b.nextTimestamp))\n      .slice(0, n);\n    return items;\n  }\n\n  /**\n   * Get an array of the next readily updateable aggregator pubkeys to be popped\n   * from the crank, limited by n\n   * @param n The limit of pubkeys to return.\n   * @return Pubkey list of Aggregator pubkeys.\n   */\n  async peakNextReady(n?: number): Promise<Array<PublicKey>> {\n    const now = Math.floor(+new Date() / 1000);\n    const crank = await this.loadData();\n    n = n ?? crank.pqSize;\n    const items = crank.pqData\n      .slice(0, crank.pqSize)\n      .filter((row: CrankRow) => now >= row.nextTimestamp.toNumber())\n      .sort((a: CrankRow, b: CrankRow) => a.nextTimestamp.sub(b.nextTimestamp))\n      .slice(0, n)\n      .map((item: CrankRow) => item.pubkey);\n    return items;\n  }\n\n  /**\n   * Get an array of the next aggregator pubkeys to be popped from the crank, limited by n\n   * @param n The limit of pubkeys to return.\n   * @return Pubkey list of Aggregators next up to be popped.\n   */\n  async peakNext(n: number): Promise<Array<PublicKey>> {\n    const crank = await this.loadData();\n    const items = crank.pqData\n      .slice(0, crank.pqSize)\n      .sort((a: CrankRow, b: CrankRow) => a.nextTimestamp.sub(b.nextTimestamp))\n      .map((item: CrankRow) => item.pubkey)\n      .slice(0, n);\n    return items;\n  }\n}\n\n/**\n * Parameters for an OracleInit request.\n */\nexport interface OracleInitParams {\n  /**\n   *  Buffer specifying oracle name\n   */\n  name?: Buffer;\n  /**\n   *  Buffer specifying oracle metadata\n   */\n  metadata?: Buffer;\n  /**\n   * If included, this keypair will be the oracle authority.\n   */\n  oracleAuthority?: Keypair;\n  /**\n   * Specifies the oracle queue to associate with this OracleAccount.\n   */\n  queueAccount: OracleQueueAccount;\n}\n\n/**\n * Parameters for an OracleWithdraw request.\n */\nexport interface OracleWithdrawParams {\n  /**\n   *  Amount to withdraw\n   */\n  amount: anchor.BN;\n  /**\n   * Token Account to withdraw to\n   */\n  withdrawAccount: PublicKey;\n  /**\n   * Oracle authority keypair.\n   */\n  oracleAuthority: Keypair;\n}\n\n/**\n * A Switchboard account representing an oracle account and its associated queue\n * and escrow account.\n */\nexport class OracleAccount {\n  static accountName = \"OracleAccountData\";\n\n  program: SwitchboardProgram;\n\n  publicKey: PublicKey;\n\n  keypair?: Keypair;\n\n  /**\n   * OracleAccount constructor\n   * @param params initialization params.\n   */\n  public constructor(params: AccountParams) {\n    if (params.keypair === undefined && params.publicKey === undefined) {\n      throw new Error(\n        `${this.constructor.name}: User must provide either a publicKey or keypair for account use.`\n      );\n    }\n    if (params.keypair !== undefined && params.publicKey !== undefined) {\n      if (!params.publicKey.equals(params.keypair.publicKey)) {\n        throw new Error(\n          `${this.constructor.name}: provided pubkey and keypair mismatch.`\n        );\n      }\n    }\n    this.program = params.program;\n    this.keypair = params.keypair;\n    this.publicKey = params.publicKey ?? this.keypair.publicKey;\n  }\n\n  /**\n   * Load and parse OracleAccount data based on the program IDL.\n   * @return OracleAccount data parsed in accordance with the\n   * Switchboard IDL.\n   */\n  async loadData(): Promise<any> {\n    const item: any = await this.program.account.oracleAccountData.fetch(\n      this.publicKey\n    );\n    item.ebuf = undefined;\n    return item;\n  }\n\n  /**\n   * Get the size of an OracleAccount on chain.\n   * @return size.\n   */\n  size(): number {\n    return this.program.account.oracleAccountData.size;\n  }\n\n  /**\n   * Create and initialize the OracleAccount.\n   * @param program Switchboard program representation holding connection and IDL.\n   * @param params.\n   * @return newly generated OracleAccount.\n   */\n  static async create(\n    program: SwitchboardProgram,\n    params: OracleInitParams\n  ): Promise<OracleAccount> {\n    const payerKeypair = programWallet(program);\n    const authorityKeypair = params.oracleAuthority ?? payerKeypair;\n    const size = program.account.oracleAccountData.size;\n    const [programStateAccount, stateBump] =\n      ProgramStateAccount.fromSeed(program);\n\n    const mint = await params.queueAccount.loadMint();\n\n    const walletKeypair = Keypair.generate();\n\n    const [oracleAccount, oracleBump] = OracleAccount.fromSeed(\n      program,\n      params.queueAccount,\n      walletKeypair.publicKey\n    );\n\n    const tokenRent =\n      await program.provider.connection.getMinimumBalanceForRentExemption(\n        spl.ACCOUNT_SIZE\n      );\n\n    await program.methods\n      .oracleInit({\n        name: (params.name ?? Buffer.from(\"\")).slice(0, 32),\n        metadata: (params.metadata ?? Buffer.from(\"\")).slice(0, 128),\n        stateBump,\n        oracleBump,\n      })\n      .accounts({\n        oracle: oracleAccount.publicKey,\n        oracleAuthority: authorityKeypair.publicKey,\n        queue: params.queueAccount.publicKey,\n        wallet: walletKeypair.publicKey,\n        programState: programStateAccount.publicKey,\n        systemProgram: SystemProgram.programId,\n        payer: programWallet(program).publicKey,\n      })\n      .preInstructions([\n        SystemProgram.createAccount({\n          fromPubkey: payerKeypair.publicKey,\n          newAccountPubkey: walletKeypair.publicKey,\n          space: spl.ACCOUNT_SIZE,\n          lamports: tokenRent,\n          programId: spl.TOKEN_PROGRAM_ID,\n        }),\n        spl.createInitializeAccountInstruction(\n          walletKeypair.publicKey,\n          mint.address,\n          programWallet(program).publicKey\n        ),\n        spl.createSetAuthorityInstruction(\n          walletKeypair.publicKey,\n          programWallet(program).publicKey,\n          spl.AuthorityType.AccountOwner,\n          programStateAccount.publicKey,\n          [programWallet(program), walletKeypair],\n          spl.TOKEN_PROGRAM_ID\n        ),\n      ])\n      .signers([walletKeypair])\n      .rpc();\n\n    return new OracleAccount({ program, publicKey: oracleAccount.publicKey });\n  }\n\n  static decode(\n    program: SwitchboardProgram,\n    accountInfo: AccountInfo<Buffer>\n  ): any {\n    const coder = new anchor.BorshAccountsCoder(program.idl);\n    const key = \"OracleAccountData\";\n    const data = coder.decode(key, accountInfo?.data!);\n    return data;\n  }\n\n  /**\n   * Constructs OracleAccount from the static seed from which it was generated.\n   * @return OracleAccount and PDA bump tuple.\n   */\n  static fromSeed(\n    program: SwitchboardProgram,\n    queueAccount: OracleQueueAccount,\n    wallet: PublicKey\n  ): [OracleAccount, number] {\n    const [oraclePubkey, oracleBump] =\n      anchor.utils.publicKey.findProgramAddressSync(\n        [\n          Buffer.from(\"OracleAccountData\"),\n          queueAccount.publicKey.toBuffer(),\n          wallet.toBuffer(),\n        ],\n        program.programId\n      );\n    return [\n      new OracleAccount({ program, publicKey: oraclePubkey }),\n      oracleBump,\n    ];\n  }\n\n  /**\n   * Inititates a heartbeat for an OracleAccount, signifying oracle is still healthy.\n   * @return TransactionSignature.\n   */\n  async heartbeat(authority: Keypair): Promise<TransactionSignature> {\n    const payerKeypair = programWallet(this.program);\n    const queueAccount = new OracleQueueAccount({\n      program: this.program,\n      publicKey: (await this.loadData()).queuePubkey,\n    });\n    const queue = await queueAccount.loadData();\n    let lastPubkey = this.publicKey;\n    if (queue.size !== 0) {\n      lastPubkey = queue.queue[queue.gcIdx];\n    }\n    const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n      this.program,\n      queue.authority,\n      queueAccount.publicKey,\n      this.publicKey\n    );\n    try {\n      await permissionAccount.loadData();\n    } catch (_) {\n      throw new Error(\n        \"A requested permission pda account has not been initialized.\"\n      );\n    }\n    const oracle = await this.loadData();\n\n    assert(this.publicKey !== undefined);\n    assert(payerKeypair.publicKey !== undefined);\n    assert(oracle.tokenAccount !== undefined);\n    assert(lastPubkey !== undefined);\n    assert(queueAccount.publicKey !== undefined);\n    assert(queueAccount.publicKey !== undefined);\n    assert(permissionAccount.publicKey !== undefined);\n    assert(queue.dataBuffer !== undefined);\n\n    return this.program.methods\n      .oracleHeartbeat({\n        permissionBump,\n      })\n      .accounts({\n        oracle: this.publicKey,\n        oracleAuthority: payerKeypair.publicKey,\n        tokenAccount: oracle.tokenAccount,\n        gcOracle: lastPubkey,\n        oracleQueue: queueAccount.publicKey,\n        permission: permissionAccount.publicKey,\n        dataBuffer: queue.dataBuffer,\n      })\n      .signers([authority])\n      .rpc();\n  }\n\n  /**\n  /**\n   * Inititates a heartbeat for an OracleAccount, signifying oracle is still healthy.\n   * @return TransactionSignature.\n   */\n  async heartbeatTx(): Promise<Transaction> {\n    const payerKeypair = programWallet(this.program);\n    const queueAccount = new OracleQueueAccount({\n      program: this.program,\n      publicKey: (await this.loadData()).queuePubkey,\n    });\n    const queue = await queueAccount.loadData();\n    let lastPubkey = this.publicKey;\n    if (queue.size !== 0) {\n      lastPubkey = queue.queue[queue.gcIdx];\n    }\n    const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n      this.program,\n      queue.authority,\n      queueAccount.publicKey,\n      this.publicKey\n    );\n    try {\n      await permissionAccount.loadData();\n    } catch (_) {\n      throw new Error(\n        \"A requested permission pda account has not been initialized.\"\n      );\n    }\n    const oracle = await this.loadData();\n\n    return this.program.methods\n      .oracleHeartbeat({\n        permissionBump,\n      })\n      .accounts({\n        oracle: this.publicKey,\n        oracleAuthority: payerKeypair.publicKey,\n        tokenAccount: oracle.tokenAccount,\n        gcOracle: lastPubkey,\n        oracleQueue: queueAccount.publicKey,\n        permission: permissionAccount.publicKey,\n        dataBuffer: queue.dataBuffer,\n      })\n      .signers([this.keypair])\n      .transaction();\n  }\n\n  /**\n   * Withdraw stake and/or rewards from an OracleAccount.\n   */\n  async withdraw(params: OracleWithdrawParams): Promise<TransactionSignature> {\n    const payerKeypair = programWallet(this.program);\n    const oracle = await this.loadData();\n    const queuePubkey = oracle.queuePubkey;\n    const queueAccount = new OracleQueueAccount({\n      program: this.program,\n      publicKey: queuePubkey,\n    });\n    const queueAuthority = (await queueAccount.loadData()).authority;\n    const [stateAccount, stateBump] = ProgramStateAccount.fromSeed(\n      this.program\n    );\n    const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n      this.program,\n      queueAuthority,\n      queueAccount.publicKey,\n      this.publicKey\n    );\n\n    return this.program.methods\n      .oracleWithdraw({\n        permissionBump,\n        stateBump,\n        amount: params.amount,\n      })\n      .accounts({\n        oracle: this.publicKey,\n        oracleAuthority: params.oracleAuthority.publicKey,\n        tokenAccount: oracle.tokenAccount,\n        withdrawAccount: params.withdrawAccount,\n        oracleQueue: queueAccount.publicKey,\n        permission: permissionAccount.publicKey,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n        programState: stateAccount.publicKey,\n        systemProgram: SystemProgram.programId,\n        payer: programWallet(this.program).publicKey,\n      })\n      .signers([params.oracleAuthority])\n      .rpc();\n  }\n\n  async getBalance(): Promise<number> {\n    const oracle = await this.loadData();\n    const escrow = await spl.getAccount(\n      this.program.provider.connection,\n      oracle.tokenAccount\n    );\n    return Number(escrow.amount);\n  }\n}\n\nexport interface Callback {\n  programId: PublicKey;\n  accounts: Array<AccountMeta>;\n  ixData: Buffer;\n}\n\n/**\n * Parameters for a VrfInit request.\n */\nexport interface VrfInitParams {\n  /**\n   *  Vrf account authority to configure the account\n   */\n  authority: PublicKey;\n  queue: OracleQueueAccount;\n  callback: Callback;\n  /**\n   *  Keypair to use for the vrf account.\n   */\n  keypair: Keypair;\n}\n/**\n * Parameters for a VrfSetCallback request.\n */\nexport interface VrfSetCallbackParams {\n  authority: Keypair;\n  cpiProgramId: PublicKey;\n  accountList: Array<AccountMeta>;\n  instruction: Buffer;\n}\n\nexport interface VrfProveAndVerifyParams {\n  proof: Buffer;\n  oracleAccount: OracleAccount;\n  oracleAuthority: Keypair;\n  skipPreflight: boolean;\n}\n\nexport interface VrfRequestRandomnessParams {\n  authority: Keypair;\n  payer: PublicKey;\n  payerAuthority: Keypair;\n}\n\nexport interface VrfProveParams {\n  proof: Buffer;\n  oracleAccount: OracleAccount;\n  oracleAuthority: Keypair;\n}\n\n/**\n * A Switchboard VRF account.\n */\nexport class VrfAccount {\n  static accountName = \"VrfAccountData\";\n\n  program: SwitchboardProgram;\n\n  publicKey: PublicKey;\n\n  keypair?: Keypair;\n\n  /**\n   * CrankAccount constructor\n   * @param params initialization params.\n   */\n  public constructor(params: AccountParams) {\n    if (params.keypair === undefined && params.publicKey === undefined) {\n      throw new Error(\n        `${this.constructor.name}: User must provide either a publicKey or keypair for account use.`\n      );\n    }\n    if (params.keypair !== undefined && params.publicKey !== undefined) {\n      if (!params.publicKey.equals(params.keypair.publicKey)) {\n        throw new Error(\n          `${this.constructor.name}: provided pubkey and keypair mismatch.`\n        );\n      }\n    }\n    this.program = params.program;\n    this.keypair = params.keypair;\n    this.publicKey = params.publicKey ?? this.keypair.publicKey;\n  }\n\n  /**\n   * Load and parse VrfAccount data based on the program IDL.\n   * @return VrfAccount data parsed in accordance with the\n   * Switchboard IDL.\n   */\n  async loadData(): Promise<any> {\n    const vrf: any = await this.program.account.vrfAccountData.fetch(\n      this.publicKey\n    );\n    vrf.ebuf = undefined;\n    vrf.builders = vrf.builders.slice(0, vrf.buildersLen);\n    return vrf;\n  }\n\n  onChange(callback: OnAccountChangeCallback): number {\n    const coder = new anchor.BorshAccountsCoder(this.program.idl);\n    return this.program.provider.connection.onAccountChange(\n      this.publicKey,\n      (accountInfo, context) => {\n        const vrf = coder.decode(VrfAccount.accountName, accountInfo?.data);\n        callback(vrf);\n      }\n    );\n  }\n\n  /**\n   * Get the size of a VrfAccount on chain.\n   * @return size.\n   */\n  size(): number {\n    return this.program.account.vrfAccountData.size;\n  }\n\n  /**\n   * Create and initialize the VrfAccount.\n   * @param program Switchboard program representation holding connection and IDL.\n   * @param params.\n   * @return newly generated VrfAccount.\n   */\n  static async create(\n    program: SwitchboardProgram,\n    params: VrfInitParams\n  ): Promise<VrfAccount> {\n    const payerKeypair = programWallet(program);\n    const [programStateAccount, stateBump] =\n      ProgramStateAccount.fromSeed(program);\n    const keypair = params.keypair;\n    const size = program.account.vrfAccountData.size;\n    const switchTokenMint = await params.queue.loadMint();\n\n    const escrow = await spl.getAssociatedTokenAddress(\n      switchTokenMint.address,\n      keypair.publicKey,\n      true\n    );\n\n    await program.methods\n      .vrfInit({\n        stateBump,\n        callback: params.callback,\n      })\n      .accounts({\n        vrf: keypair.publicKey,\n        escrow,\n        authority: params.authority ?? keypair.publicKey,\n        oracleQueue: params.queue.publicKey,\n        programState: programStateAccount.publicKey,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n      })\n      .preInstructions([\n        spl.createAssociatedTokenAccountInstruction(\n          payerKeypair.publicKey,\n          escrow,\n          keypair.publicKey,\n          switchTokenMint.address\n        ),\n        spl.createSetAuthorityInstruction(\n          escrow,\n          keypair.publicKey,\n          spl.AuthorityType.AccountOwner,\n          programStateAccount.publicKey,\n          [payerKeypair, keypair]\n        ),\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payerKeypair.publicKey,\n          newAccountPubkey: keypair.publicKey,\n          space: size,\n          lamports:\n            await program.provider.connection.getMinimumBalanceForRentExemption(\n              size\n            ),\n          programId: program.programId,\n        }),\n      ])\n      .signers([payerKeypair, keypair])\n      .rpc();\n\n    return new VrfAccount({ program, keypair, publicKey: keypair.publicKey });\n  }\n\n  /**\n   * Trigger new randomness production on the vrf account\n   */\n  async requestRandomness(params: VrfRequestRandomnessParams) {\n    const vrf = await this.loadData();\n    const queueAccount = new OracleQueueAccount({\n      program: this.program,\n      publicKey: vrf.oracleQueue,\n    });\n    const queue = await queueAccount.loadData();\n    const queueAuthority = queue.authority;\n    const dataBuffer = queue.dataBuffer;\n    const escrow = vrf.escrow;\n    const payer = params.payer;\n    const [stateAccount, stateBump] = ProgramStateAccount.fromSeed(\n      this.program\n    );\n    const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n      this.program,\n      queueAuthority,\n      queueAccount.publicKey,\n      this.publicKey\n    );\n    try {\n      await permissionAccount.loadData();\n    } catch (_) {\n      throw new Error(\n        \"A requested permission pda account has not been initialized.\"\n      );\n    }\n    const tokenProgram = spl.TOKEN_PROGRAM_ID;\n    const recentBlockhashes = SYSVAR_RECENT_BLOCKHASHES_PUBKEY;\n    await this.program.methods\n      .vrfRequestRandomness({\n        stateBump,\n        permissionBump,\n      })\n      .accounts({\n        authority: params.authority.publicKey,\n        vrf: this.publicKey,\n        oracleQueue: queueAccount.publicKey,\n        queueAuthority,\n        dataBuffer,\n        permission: permissionAccount.publicKey,\n        escrow,\n        payerWallet: payer,\n        payerAuthority: params.payerAuthority.publicKey,\n        recentBlockhashes,\n        programState: stateAccount.publicKey,\n        tokenProgram,\n      })\n      .signers([params.authority, params.payerAuthority])\n      .rpc();\n  }\n\n  async prove(params: VrfProveParams): Promise<TransactionSignature> {\n    const vrf = await this.loadData();\n    let idx = -1;\n    let producerKey = PublicKey.default;\n    for (idx = 0; idx < vrf.buildersLen; ++idx) {\n      const builder = vrf.builders[idx];\n      producerKey = builder.producer;\n      if (producerKey.equals(params.oracleAccount.publicKey)) {\n        break;\n      }\n    }\n    if (idx === vrf.buildersLen) {\n      throw new Error(\"OracleProofRequestNotFoundError\");\n    }\n    return this.program.methods\n      .vrfProve({\n        proof: params.proof,\n        idx,\n      })\n      .accounts({\n        vrf: this.publicKey,\n        oracle: producerKey,\n        randomnessProducer: params.oracleAuthority.publicKey,\n      })\n      .signers([params.oracleAuthority])\n      .rpc();\n  }\n\n  async verify(\n    oracle: OracleAccount,\n    tryCount = 278\n  ): Promise<Array<TransactionSignature>> {\n    const skipPreflight = true;\n    const txs: Array<any> = [];\n    const vrf = await this.loadData();\n    const idx = vrf.builders.find((builder: any) =>\n      oracle.publicKey.equals(builder.producer)\n    );\n    if (idx === -1) {\n      throw new Error(\"OracleNotFoundError\");\n    }\n    const counter = 0;\n    const remainingAccounts = vrf.callback.accounts.slice(\n      0,\n      vrf.callback.accountsLen\n    );\n    const [programStateAccount, stateBump] = ProgramStateAccount.fromSeed(\n      this.program\n    );\n    const oracleData = await oracle.loadData();\n    const oracleWallet = oracleData.tokenAccount;\n    const oracleAuthority: PublicKey = oracleData.oracleAuthority;\n\n    const instructions = [];\n    const tx = new Transaction();\n    for (let i = 0; i < tryCount; ++i) {\n      txs.push({\n        tx: await this.program.methods\n          .vrfProveAndVerify({\n            nonce: i,\n            stateBump,\n            idx,\n            proof: Buffer.from(\"\"),\n          })\n          .accounts({\n            vrf: this.publicKey,\n            callbackPid: vrf.callback.programId,\n            tokenProgram: spl.TOKEN_PROGRAM_ID,\n            escrow: vrf.escrow,\n            programState: programStateAccount.publicKey,\n            oracle: oracle.publicKey,\n            oracleAuthority,\n            oracleWallet,\n            instructionsSysvar: SYSVAR_INSTRUCTIONS_PUBKEY,\n          })\n          .remainingAccounts(remainingAccounts)\n          .transaction(),\n      });\n      // try {\n      // tx.add(newTx);\n      // } catch (e) {\n      // txs.push({ tx });\n      // tx = newTx;\n      // }\n      // txs.push(newTx);\n    }\n    // txs.push({ tx });\n    return sendAll(this.program.provider, txs, [], skipPreflight);\n  }\n\n  /**\n   * Attempt the maximum amount of turns remaining on the vrf verify crank.\n   * This will automatically call the vrf callback (if set) when completed.\n   */\n  async proveAndVerify(\n    params: VrfProveAndVerifyParams,\n    tryCount = 278\n  ): Promise<Array<TransactionSignature>> {\n    const skipPreflight = params.skipPreflight;\n    const oracle = params.oracleAccount;\n    const txs: Array<any> = [];\n    const vrf = await this.loadData();\n    const idx = vrf.builders.find((builder: any) =>\n      oracle.publicKey.equals(builder.producer)\n    );\n    if (idx === -1) {\n      throw new Error(\"OracleNotFoundError\");\n    }\n    const counter = 0;\n    const remainingAccounts = vrf.callback.accounts.slice(\n      0,\n      vrf.callback.accountsLen\n    );\n    const [programStateAccount, stateBump] = ProgramStateAccount.fromSeed(\n      this.program\n    );\n    const oracleData = await oracle.loadData();\n    const oracleWallet = oracleData.tokenAccount;\n    const oracleAuthority: PublicKey = oracleData.oracleAuthority;\n\n    const instructions = [];\n    const tx = new Transaction();\n    for (let i = 0; i < tryCount; ++i) {\n      txs.push({\n        tx: await this.program.methods\n          .vrfProveAndVerify({\n            nonce: i,\n            stateBump,\n            idx,\n            proof: params.proof,\n          })\n          .accounts({\n            vrf: this.publicKey,\n            callbackPid: vrf.callback.programId,\n            tokenProgram: spl.TOKEN_PROGRAM_ID,\n            escrow: vrf.escrow,\n            programState: programStateAccount.publicKey,\n            oracle: oracle.publicKey,\n            oracleAuthority,\n            oracleWallet,\n            instructionsSysvar: SYSVAR_INSTRUCTIONS_PUBKEY,\n          })\n          .remainingAccounts(remainingAccounts)\n          .signers([params.oracleAuthority])\n          .transaction(),\n      });\n      // try {\n      // tx.add(newTx);\n      // } catch (e) {\n      // txs.push({ tx });\n      // tx = newTx;\n      // }\n      // txs.push(newTx);\n    }\n    // txs.push({ tx });\n    return sendAll(\n      this.program.provider,\n      txs,\n      [params.oracleAuthority],\n      skipPreflight\n    );\n  }\n}\n\nexport class BufferRelayerAccount {\n  program: SwitchboardProgram;\n\n  publicKey: PublicKey;\n\n  keypair?: Keypair;\n\n  /**\n   * CrankAccount constructor\n   * @param params initialization params.\n   */\n  public constructor(params: AccountParams) {\n    if (params.keypair === undefined && params.publicKey === undefined) {\n      throw new Error(\n        `${this.constructor.name}: User must provide either a publicKey or keypair for account use.`\n      );\n    }\n    if (params.keypair !== undefined && params.publicKey !== undefined) {\n      if (!params.publicKey.equals(params.keypair.publicKey)) {\n        throw new Error(\n          `${this.constructor.name}: provided pubkey and keypair mismatch.`\n        );\n      }\n    }\n    this.program = params.program;\n    this.keypair = params.keypair;\n    this.publicKey = params.publicKey ?? this.keypair.publicKey;\n  }\n\n  /**\n   * Load and parse BufferRelayerAccount data based on the program IDL.\n   * @return BufferRelayerAccount data parsed in accordance with the\n   * Switchboard IDL.\n   */\n  async loadData(): Promise<any> {\n    const data: any = await this.program.account.bufferRelayerAccountData.fetch(\n      this.publicKey\n    );\n    data.ebuf = undefined;\n    return data;\n  }\n\n  size(): number {\n    return 4092;\n  }\n\n  static async create(\n    program: SwitchboardProgram,\n    params: {\n      name: Buffer;\n      minUpdateDelaySeconds: number;\n      queueAccount: OracleQueueAccount;\n      authority: PublicKey;\n      jobAccount: JobAccount;\n    }\n  ): Promise<BufferRelayerAccount> {\n    const [programStateAccount, stateBump] =\n      ProgramStateAccount.fromSeed(program);\n    const switchTokenMint = await params.queueAccount.loadMint();\n    const keypair = Keypair.generate();\n    const escrow = await spl.getAssociatedTokenAddress(\n      switchTokenMint.address,\n      keypair.publicKey\n    );\n    const size = 2048;\n    const payer = programWallet(program);\n    await program.rpc.bufferRelayerInit(\n      {\n        name: params.name.slice(0, 32),\n        minUpdateDelaySeconds: params.minUpdateDelaySeconds,\n        stateBump,\n      },\n      {\n        accounts: {\n          bufferRelayer: keypair.publicKey,\n          escrow,\n          authority: params.authority,\n          queue: params.queueAccount.publicKey,\n          job: params.jobAccount.publicKey,\n          programState: programStateAccount.publicKey,\n          mint: switchTokenMint.address,\n          payer: payer.publicKey,\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n          associatedTokenProgram: spl.ASSOCIATED_TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          rent: new PublicKey(\"SysvarRent111111111111111111111111111111111\"),\n        },\n        instructions: [\n          anchor.web3.SystemProgram.createAccount({\n            fromPubkey: programWallet(program).publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: size,\n            lamports:\n              await program.provider.connection.getMinimumBalanceForRentExemption(\n                size\n              ),\n            programId: program.programId,\n          }),\n        ],\n        signers: [keypair],\n      }\n    );\n    return new BufferRelayerAccount({ program, keypair });\n  }\n\n  async openRound(): Promise<TransactionSignature> {\n    const [programStateAccount, stateBump] = ProgramStateAccount.fromSeed(\n      this.program\n    );\n    const relayerData = await this.loadData();\n    const queue = relayerData.queuePubkey;\n    const queueAccount = new OracleQueueAccount({\n      program: this.program,\n      publicKey: queue,\n    });\n    const switchTokenMint = await queueAccount.loadMint();\n    const source = (\n      await spl.getOrCreateAssociatedTokenAccount(\n        this.program.provider.connection,\n        programWallet(this.program),\n        switchTokenMint.address,\n        programWallet(this.program).publicKey,\n        true\n      )\n    ).address;\n    const bufferRelayer = this.publicKey;\n    const escrow = relayerData.escrow;\n    const queueData = await queueAccount.loadData();\n    const queueAuthority = queueData.authority;\n    const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n      this.program,\n      queueAuthority,\n      queueAccount.publicKey,\n      this.publicKey\n    );\n    const payer = programWallet(this.program);\n    const transferIx = spl.createTransferInstruction(\n      source,\n      escrow,\n      programWallet(this.program).publicKey,\n      queueData.reward.toNumber()\n    );\n    const openRoundIx = this.program.instruction.bufferRelayerOpenRound(\n      {\n        stateBump,\n        permissionBump,\n      },\n      {\n        accounts: {\n          bufferRelayer,\n          oracleQueue: queueAccount.publicKey,\n          dataBuffer: queueData.dataBuffer,\n          queueAuthority: queueData.authority,\n          permission: permissionAccount.publicKey,\n          escrow,\n          programState: programStateAccount.publicKey,\n          job: relayerData.jobPubkey,\n        },\n      }\n    );\n    const tx = new Transaction();\n    tx.add(transferIx);\n    tx.add(openRoundIx);\n    const connection = (this.program.provider as anchor.AnchorProvider)\n      .connection;\n    return sendAndConfirmTransaction(connection, tx, [\n      programWallet(this.program),\n    ]);\n  }\n\n  async saveResult(params: {\n    oracleAuthority: Keypair;\n    result: Buffer;\n    success: boolean;\n  }): Promise<TransactionSignature> {\n    const [programStateAccount, stateBump] = ProgramStateAccount.fromSeed(\n      this.program\n    );\n    const relayerData = await this.loadData();\n    const queue = new PublicKey(relayerData.queuePubkey);\n    const queueAccount = new OracleQueueAccount({\n      program: this.program,\n      publicKey: queue!,\n    });\n    const bufferRelayer = this.publicKey;\n    const escrow = relayerData.escrow;\n    const queueData = await queueAccount.loadData();\n    const queueAuthority = queueData.authority;\n    const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n      this.program,\n      queueAuthority,\n      queueAccount.publicKey,\n      this.publicKey\n    );\n    const oracleAccount = new OracleAccount({\n      program: this.program,\n      publicKey: relayerData.currentRound.oraclePubkey,\n    });\n    const oracleData = await oracleAccount.loadData();\n    console.log(\"!!!!\");\n    return this.program.rpc.bufferRelayerSaveResult(\n      {\n        stateBump,\n        permissionBump,\n        result: params.result,\n        success: params.success,\n      },\n      {\n        accounts: {\n          bufferRelayer,\n          oracleAuthority: params.oracleAuthority.publicKey,\n          oracle: relayerData.currentRound.oraclePubkey,\n          oracleQueue: queueAccount.publicKey,\n          dataBuffer: queueData.dataBuffer,\n          queueAuthority: queueData.authority,\n          permission: permissionAccount.publicKey,\n          escrow,\n          programState: programStateAccount.publicKey,\n          oracleWallet: oracleData.tokenAccount,\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n        },\n      }\n    );\n  }\n}\n\nexport async function sendAll(\n  provider: anchor.Provider,\n  reqs: Array<any>,\n  signers: Array<Keypair>,\n  skipPreflight: boolean\n): Promise<Array<TransactionSignature>> {\n  const res: Array<TransactionSignature> = [];\n  try {\n    const opts = (provider as anchor.AnchorProvider).opts;\n    // TODO: maybe finalized\n    const blockhash = await provider.connection.getLatestBlockhash(\"confirmed\");\n\n    let txs = reqs.map((r: any) => {\n      if (r === null || r === undefined) return new Transaction();\n      const tx = r.tx;\n      let rSigners = r.signers;\n\n      if (rSigners === undefined) {\n        rSigners = [];\n      }\n\n      tx.feePayer = (provider as anchor.AnchorProvider).wallet.publicKey;\n      tx.recentBlockhash = blockhash.blockhash;\n\n      rSigners\n        .filter((s: any): s is Signer => s !== undefined)\n        .forEach((kp: any) => {\n          tx.partialSign(kp);\n        });\n\n      return tx;\n    });\n    txs = await packTransactions(\n      provider.connection,\n      txs,\n      signers,\n      (provider as anchor.AnchorProvider).wallet.publicKey\n    );\n\n    const signedTxs = await (\n      provider as anchor.AnchorProvider\n    ).wallet.signAllTransactions(txs);\n    const promises = [];\n    for (let k = 0; k < txs.length; k += 1) {\n      const tx = signedTxs[k];\n      const rawTx = tx.serialize();\n      promises.push(\n        provider.connection.sendRawTransaction(rawTx, {\n          skipPreflight,\n          maxRetries: 10,\n        })\n      );\n    }\n    return await Promise.all(promises);\n  } catch (e) {\n    console.log(e);\n  }\n  return res;\n}\n\n/**\n * Pack instructions into transactions as tightly as possible\n * @param instructions Instructions or Grouping of Instructions to pack down into transactions.\n * Arrays of instructions will be grouped into the same tx.\n * NOTE: this will break if grouping is too large for a single tx\n * @param feePayer Optional feepayer\n * @param recentBlockhash Optional blockhash\n * @returns Transaction[]\n */\nexport function packInstructions(\n  instructions: (TransactionInstruction | TransactionInstruction[])[],\n  feePayer: PublicKey = PublicKey.default,\n  recentBlockhash: string = PublicKey.default.toBase58()\n): Transaction[] {\n  const packed: Transaction[] = [];\n  let currentTransaction = new Transaction();\n  currentTransaction.recentBlockhash = recentBlockhash;\n  currentTransaction.feePayer = feePayer;\n\n  const encodeLength = (bytes: Array<number>, len: number) => {\n    let remLen = len;\n    for (;;) {\n      let elem = remLen & 0x7f;\n      remLen >>= 7;\n      if (remLen == 0) {\n        bytes.push(elem);\n        break;\n      } else {\n        elem |= 0x80;\n        bytes.push(elem);\n      }\n    }\n  };\n\n  for (const ixGroup of instructions) {\n    const ixs = Array.isArray(ixGroup) ? ixGroup : [ixGroup];\n\n    for (const ix of ixs) {\n      // add the new transaction\n      currentTransaction.add(ix);\n    }\n\n    const sigCount: number[] = [];\n    encodeLength(sigCount, currentTransaction.signatures.length);\n\n    if (\n      anchor.web3.PACKET_DATA_SIZE <=\n      currentTransaction.serializeMessage().length +\n        currentTransaction.signatures.length * 64 +\n        sigCount.length\n    ) {\n      // If the aggregator transaction fits, it will serialize without error. We can then push it ahead no problem\n      const trimmedInstructions = ixs\n        .map(() => currentTransaction.instructions.pop())\n        .reverse();\n\n      // Every serialize adds the instruction signatures as dependencies\n      currentTransaction.signatures = [];\n\n      const overflowInstructions = trimmedInstructions;\n\n      // add the capped transaction to our transaction - only push it if it works\n      packed.push(currentTransaction);\n\n      currentTransaction = new Transaction();\n      currentTransaction.recentBlockhash = recentBlockhash;\n      currentTransaction.feePayer = feePayer;\n      currentTransaction.instructions = overflowInstructions;\n\n      const newsc: number[] = [];\n      encodeLength(newsc, currentTransaction.signatures.length);\n      if (\n        anchor.web3.PACKET_DATA_SIZE <=\n        currentTransaction.serializeMessage().length +\n          currentTransaction.signatures.length * 64 +\n          newsc.length\n      ) {\n        throw new Error(\n          \"Instruction packing error: a grouping of instructions must be able to fit into a single transaction\"\n        );\n      }\n    }\n  }\n\n  packed.push(currentTransaction);\n\n  return packed;\n}\n\n/**\n * Repack Transactions and sign them\n * @param connection Web3.js Connection\n * @param transactions Transactions to repack\n * @param signers Signers for each transaction\n */\nexport async function packTransactions(\n  connection: anchor.web3.Connection,\n  transactions: Transaction[],\n  signers: Keypair[],\n  feePayer: PublicKey\n): Promise<Transaction[]> {\n  const instructions = transactions.map((t) => t.instructions).flat();\n  const txs = packInstructions(instructions, feePayer);\n  const { blockhash } = await connection.getLatestBlockhash();\n  txs.forEach((t) => {\n    t.recentBlockhash = blockhash;\n  });\n  return signTransactions(txs, signers);\n}\n\n/**\n * Sign transactions with correct signers\n * @param transactions array of transactions to sign\n * @param signers array of keypairs to sign the array of transactions with\n * @returns transactions signed\n */\nexport function signTransactions(\n  transactions: Transaction[],\n  signers: Keypair[]\n): Transaction[] {\n  // Sign with all the appropriate signers\n  for (const transaction of transactions) {\n    // Get pubkeys of signers needed\n    const sigsNeeded = transaction.instructions\n      .map((instruction) => {\n        const ixnSigners = instruction.keys.filter((meta) => meta.isSigner);\n        return ixnSigners.map((signer) => signer.pubkey);\n      })\n      .flat();\n\n    // Get matching signers in our supplied array\n    const currentSigners = signers.filter((signer) =>\n      Boolean(sigsNeeded.find((sig) => sig.equals(signer.publicKey)))\n    );\n\n    // Sign all transactions\n    for (const signer of currentSigners) {\n      transaction.partialSign(signer);\n    }\n  }\n  return transactions;\n}\n\nexport function programWallet(program: SwitchboardProgram): Keypair {\n  return ((program.provider as anchor.AnchorProvider).wallet as AnchorWallet)\n    .payer;\n}\n\nfunction safeDiv(number_: Big, denominator: Big, decimals = 20): Big {\n  const oldDp = Big.DP;\n  Big.DP = decimals;\n  const result = number_.div(denominator);\n  Big.DP = oldDp;\n  return result;\n}\n\nexport class AnchorWallet implements anchor.Wallet {\n  constructor(readonly payer: Keypair) {\n    this.payer = payer;\n  }\n\n  async signTransaction(tx: Transaction): Promise<Transaction> {\n    tx.partialSign(this.payer);\n    return tx;\n  }\n\n  async signAllTransactions(txs: Transaction[]): Promise<Transaction[]> {\n    return txs.map((t) => {\n      t.partialSign(this.payer);\n      return t;\n    });\n  }\n\n  get publicKey(): PublicKey {\n    return this.payer.publicKey;\n  }\n}\n"]}